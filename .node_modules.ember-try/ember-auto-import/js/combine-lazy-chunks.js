"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const broccoli_plugin_1 = __importDefault(require("broccoli-plugin"));
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
class CombineLazyChunks extends broccoli_plugin_1.default {
    constructor(bundler, targetFilename) {
        super([bundler], { annotation: 'ember-auto-import-combine-lazy-chunks' });
        this.bundler = bundler;
        this.targetFilename = targetFilename;
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            fs_extra_1.outputFileSync(path_1.join(this.outputPath, this.targetFilename), this.bundler.buildResult.lazyAssets
                .map(asset => {
                let fullName = path_1.join(this.inputPaths[0], asset);
                return fs_1.readFileSync(fullName, 'utf8');
            })
                .join('\n'), 'utf8');
        });
    }
}
exports.default = CombineLazyChunks;
//# sourceMappingURL=combine-lazy-chunks.js.map