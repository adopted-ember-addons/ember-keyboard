"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inserter = void 0;
const broccoli_plugin_1 = __importDefault(require("broccoli-plugin"));
const debug_1 = __importDefault(require("debug"));
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const parse_html_1 = require("./parse-html");
const debug = debug_1.default('ember-auto-import:inserter');
class Inserter extends broccoli_plugin_1.default {
    constructor(allApp, bundler, config) {
        super([allApp], {
            annotation: 'ember-auto-import-inserter',
        });
        this.bundler = bundler;
        this.config = config;
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            let fastbootInfo = this.fastbootManifestInfo();
            for (let filename of this.config.htmlEntrypoints()) {
                let fullName = path_1.join(this.inputPaths[0], filename);
                if (fs_1.existsSync(fullName)) {
                    this.processHTML(filename, fullName, fastbootInfo);
                }
            }
            if (fastbootInfo && !fastbootInfo.readsHTML) {
                // we need to add our chunks to the fastboot manifest, because this
                // version of fastboot doesn't look for scripts in HTML.
                let assets = this.bundler.buildResult.entrypoints.get('app');
                if (assets) {
                    for (let asset of assets) {
                        fastbootInfo.vendorFiles.push(asset);
                    }
                }
                for (let asset of this.bundler.buildResult.lazyAssets) {
                    fastbootInfo.vendorFiles.push(asset);
                }
                fs_extra_1.writeJSONSync(path_1.join(this.outputPath, 'package.json'), fastbootInfo.pkg);
            }
        });
    }
    processHTML(filename, fullName, fastbootInfo) {
        debug(`parsing %s`, filename);
        let html = fs_1.readFileSync(fullName, 'utf8');
        let ast = parse_html_1.parse(html);
        let { scripts, styles } = chunks(this.bundler.buildResult, this.config);
        let stringInserter = new StringInserter(html);
        debug(`looking for scripts: %s`, [...scripts.keys()]);
        debug(`looking for styles: %s`, [...styles.keys()]);
        parse_html_1.traverse(ast, element => {
            var _a, _b;
            if (element.tagName === 'script') {
                let src = (_a = element.attrs.find(a => a.name === 'src')) === null || _a === void 0 ? void 0 : _a.value;
                if (src) {
                    debug(`found script with src=%s`, src);
                    for (let [url, { chunks, bundleName }] of scripts) {
                        if (src.endsWith(url)) {
                            debug(`inserting %s`, chunks);
                            let rootURL = src.replace(url, '');
                            let insertedSrc = chunks.map(chunk => `\n<script src="${rootURL}${chunk}"></script>`).join('');
                            if ((fastbootInfo === null || fastbootInfo === void 0 ? void 0 : fastbootInfo.readsHTML) && bundleName === 'app') {
                                // lazy chunks are eager in fastboot because webpack's lazy
                                // loading doesn't work in fastboot, because we share a single
                                // build with the browser and use a browser-specific
                                // lazy-loading implementation. It's probably better to make
                                // them eager on the server anyway, so they're handled as part
                                // of server startup.
                                insertedSrc += this.bundler.buildResult.lazyAssets
                                    .map(chunk => `\n<fastboot-script src="${rootURL}${chunk}"></fastboot-script>`)
                                    .join('');
                            }
                            stringInserter.insert(element.sourceCodeLocation.endOffset, insertedSrc);
                        }
                    }
                }
            }
            if (element.tagName === 'link') {
                if (element.attrs.some(a => a.name === 'rel' && a.value === 'stylesheet')) {
                    let href = (_b = element.attrs.find(a => a.name === 'href')) === null || _b === void 0 ? void 0 : _b.value;
                    if (href) {
                        debug(`found stylesheet with href=%s`, href);
                        for (let [url, { chunks }] of styles) {
                            if (href.endsWith(url)) {
                                debug(`inserting %s`, chunks);
                                let rootURL = href.replace(url, '');
                                stringInserter.insert(element.sourceCodeLocation.endOffset, chunks.map(chunk => `\n<link rel="stylesheet" href="${rootURL}${chunk}"/>`).join(''));
                            }
                        }
                    }
                }
            }
        });
        fs_extra_1.outputFileSync(path_1.join(this.outputPath, filename), stringInserter.serialize(), 'utf8');
    }
    fastbootManifestInfo() {
        var _a, _b;
        let pkgPath = path_1.join(this.inputPaths[0], 'package.json');
        if (!fs_1.existsSync(pkgPath)) {
            return undefined;
        }
        let pkg = fs_extra_1.readJSONSync(pkgPath);
        if (!pkg.fastboot) {
            return undefined;
        }
        if (((_a = pkg.fastboot.schemaVersion) !== null && _a !== void 0 ? _a : 0) >= 5) {
            // starting in schemaVersion 5, fastboot discovers scripts directly from
            // the HTML, so we don't need to muck about with inserting things into a
            // separate manifest
            return { readsHTML: true };
        }
        else {
            if (!((_b = pkg.fastboot.manifest) === null || _b === void 0 ? void 0 : _b.vendorFiles)) {
                throw new Error(`bug: ember-auto-import can't find the fastboot manifest vendorFiles`);
            }
            return { pkg, readsHTML: false, vendorFiles: pkg.fastboot.manifest.vendorFiles };
        }
    }
}
exports.Inserter = Inserter;
function chunks(buildResult, config) {
    let scripts = new Map();
    let styles = new Map();
    for (let [bundleName, assets] of buildResult.entrypoints) {
        let scriptChunks = assets.filter(a => a.endsWith('.js'));
        if (scriptChunks.length > 0) {
            scripts.set(config.bundleEntrypoint(bundleName, 'js'), { chunks: scriptChunks, bundleName });
        }
        let styleChunks = assets.filter(a => a.endsWith('.css'));
        if (styleChunks.length > 0) {
            styles.set(config.bundleEntrypoint(bundleName, 'css'), { chunks: styleChunks, bundleName });
        }
    }
    return { scripts, styles };
}
class StringInserter {
    constructor(original) {
        this.original = original;
        this.insertions = [];
    }
    insert(location, str) {
        this.insertions.push({ location, str });
    }
    serialize() {
        let output = [];
        let insertions = this.insertions.slice().sort((a, b) => a.location - b.location);
        let cursor = 0;
        while (insertions.length > 0) {
            let nextInsertion = insertions.shift();
            output.push(this.original.slice(cursor, nextInsertion.location));
            output.push(nextInsertion.str);
            cursor = nextInsertion.location;
        }
        output.push(this.original.slice(cursor));
        return output.join('');
    }
}
//# sourceMappingURL=inserter.js.map