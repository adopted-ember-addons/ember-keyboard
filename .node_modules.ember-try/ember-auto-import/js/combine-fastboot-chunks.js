"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const broccoli_plugin_1 = __importDefault(require("broccoli-plugin"));
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
class CombineFastbootChunks extends broccoli_plugin_1.default {
    constructor(bundler, allAppTree, opts) {
        super([bundler, allAppTree], { annotation: 'ember-auto-import-combine-fastboot-chunks' });
        this.bundler = bundler;
        this.opts = opts;
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            fs_extra_1.outputFileSync(path_1.join(this.outputPath, this.opts.targetFilename), this.appendedAssets()
                .map(asset => {
                let fullName = path_1.join(this.inputPaths[0], asset);
                return fs_1.readFileSync(fullName, 'utf8');
            })
                .join('\n'), 'utf8');
        });
    }
    appendedAssets() {
        let { lazyAssets, entrypoints } = this.bundler.buildResult;
        if (this.fastbootReadsHTML()) {
            // we always need to insert the lazy chunks because webpack's lazy loading
            // won't work in fastboot (because we share a single build with the
            // browser, and webpack used a browser-specific lazy loading
            // implementation)
            return lazyAssets;
        }
        else {
            // on older versions of fastboot, we also need to insert the eager chunks,
            // because fastboot won't notice them in the HTML.
            return entrypoints.get('app').concat(lazyAssets);
        }
    }
    // fastboot schema 5 started discovering scripts directly from the HTML.
    // Earlier versions do not.
    fastbootReadsHTML() {
        var _a, _b;
        let allAppTree = this.inputPaths[1];
        let pkgPath = path_1.join(allAppTree, 'package.json');
        if (fs_1.existsSync(pkgPath)) {
            return ((_b = (_a = fs_extra_1.readJSONSync(pkgPath).fastboot) === null || _a === void 0 ? void 0 : _a.schemaVersion) !== null && _b !== void 0 ? _b : 0) >= 5;
        }
        return false;
    }
}
exports.default = CombineFastbootChunks;
//# sourceMappingURL=combine-fastboot-chunks.js.map