{"version":3,"file":"index.js","sources":["../../../src/attributes.ts","../../../src/child-nodes.ts","../../../src/clone.ts","../../../src/mutation.ts","../../../src/qualified-name.ts","../../../src/node.ts","../../../src/document.ts"],"sourcesContent":["import { AttrNamespace, ElementNamespace, Namespace, SimpleAttr, SimpleAttrs } from '@simple-dom/interface';\nimport { SimpleElementImpl } from './node';\n\nexport const EMPTY_ATTRS: SimpleAttr[] = [];\n\nfunction indexOfAttribute(\n  attributes: SimpleAttrs,\n  namespaceURI: AttrNamespace | null,\n  localName: string,\n): number {\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    if (attr.namespaceURI === namespaceURI && attr.localName === localName) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function adjustAttrName(namespaceURI: ElementNamespace, localName: string) {\n  return namespaceURI === Namespace.HTML ? localName.toLowerCase() : localName;\n}\n\nexport function getAttribute(\n  attributes: SimpleAttrs,\n  namespaceURI: AttrNamespace | null,\n  localName: string,\n) {\n  const index = indexOfAttribute(attributes, namespaceURI, localName);\n  return index === -1 ? null : attributes[index].value;\n}\n\nexport function removeAttribute(\n  attributes: SimpleAttr[],\n  namespaceURI: AttrNamespace | null,\n  localName: string,\n): void {\n  const index = indexOfAttribute(attributes, namespaceURI, localName);\n  if (index !== -1) {\n    attributes.splice(index, 1);\n  }\n}\n\n// https://dom.spec.whatwg.org/#dom-element-setattributens\nexport function setAttribute(\n  element: SimpleElementImpl,\n  namespaceURI: AttrNamespace | null,\n  prefix: string | null,\n  localName: string,\n  value: string,\n) {\n  if (typeof value !== 'string') {\n    value = '' + value;\n  }\n  let { attributes } = element;\n  if (attributes === EMPTY_ATTRS) {\n    attributes = element.attributes = [];\n  } else {\n    const index = indexOfAttribute(attributes, namespaceURI, localName);\n    if (index !== -1) {\n      attributes[index].value = value;\n      return;\n    }\n  }\n  attributes.push({\n    localName,\n    name: prefix === null ? localName : prefix + ':' + localName,\n    namespaceURI,\n    prefix,\n    specified: true, // serializer compat with old IE\n    value,\n  });\n}\n","import { SimpleChildNodes, SimpleNode } from '@simple-dom/interface';\n\nexport class ChildNodes implements SimpleChildNodes {\n  [index: number]: SimpleNode;\n\n  public stale = true;\n\n  private _length = 0;\n\n  constructor(private node: SimpleNode) {\n  }\n\n  public get length() {\n    if (this.stale) {\n      this.stale = false;\n      let len = 0;\n      let child = this.node.firstChild;\n\n      for (; child !== null; len++) {\n        this[len] = child;\n        child = child.nextSibling;\n      }\n\n      const oldLen = this._length;\n      this._length = len;\n\n      for (; len < oldLen; len++) {\n        delete this[len];\n      }\n    }\n    return this._length;\n  }\n\n  public item(index: number): SimpleNode | null {\n    return index < this.length ? this[index] : null;\n  }\n}\n","import {\n  ElementNamespace,\n  Namespace,\n  NodeType,\n  SimpleAttr,\n  SimpleAttrs,\n  SimpleDocument,\n  SimpleNode,\n} from '@simple-dom/interface';\nimport { EMPTY_ATTRS } from './attributes';\nimport SimpleNodeImpl from './node';\n\nexport { Namespace, SimpleDocument, NodeType };\n\nexport function cloneNode(\n  node: SimpleNode,\n  deep: boolean,\n) {\n  const clone = nodeFrom(node);\n\n  if (deep) {\n    let child = node.firstChild;\n    let nextChild = child;\n\n    while (child !== null) {\n      nextChild = child.nextSibling;\n      clone.appendChild(child.cloneNode(true));\n      child = nextChild;\n    }\n  }\n\n  return clone;\n}\n\nfunction nodeFrom(node: SimpleNode): SimpleNode {\n\n  let namespaceURI: ElementNamespace | undefined;\n  if (node.nodeType === NodeType.ELEMENT_NODE) {\n    namespaceURI = node.namespaceURI;\n  }\n\n  const clone = new SimpleNodeImpl(\n    node.ownerDocument,\n    node.nodeType,\n    node.nodeName,\n    node.nodeValue,\n    namespaceURI,\n  );\n\n  if (node.nodeType === NodeType.ELEMENT_NODE) {\n    clone.attributes = copyAttrs(node.attributes);\n  }\n\n  return clone as SimpleNode;\n}\n\nfunction copyAttrs(attrs: SimpleAttrs): SimpleAttr[] {\n  if (attrs === EMPTY_ATTRS) {\n    return EMPTY_ATTRS;\n  }\n\n  const copy: SimpleAttr[] = [];\n  for (let i = 0; i < attrs.length; i++) {\n    const attr = attrs[i];\n    copy.push({\n      localName: attr.localName,\n      name: attr.name,\n      namespaceURI: attr.namespaceURI,\n      prefix: attr.prefix,\n      specified: true,\n      value: attr.value,\n    });\n  }\n  return copy;\n}\n","import { NodeType, SimpleDocumentFragment, SimpleNode } from '@simple-dom/interface';\nimport { SimpleElementImpl } from './node';\n\nexport function insertBefore(parentNode: SimpleNode, newChild: SimpleNode, refChild: SimpleNode | null): void {\n  invalidate(parentNode as SimpleElementImpl);\n\n  insertBetween(\n    parentNode,\n    newChild,\n    refChild === null ? parentNode.lastChild : refChild.previousSibling,\n    refChild);\n}\n\nexport function removeChild(parentNode: SimpleNode, oldChild: SimpleNode): void {\n  invalidate(parentNode as SimpleElementImpl);\n\n  removeBetween(parentNode, oldChild, oldChild.previousSibling, oldChild.nextSibling);\n}\n\nfunction invalidate(parentNode: SimpleElementImpl) {\n  const childNodes = parentNode._childNodes;\n  if (childNodes !== undefined) {\n    childNodes.stale = true;\n  }\n}\n\nfunction insertBetween(\n  parentNode: SimpleNode,\n  newChild: SimpleNode,\n  previousSibling: SimpleNode | null,\n  nextSibling: SimpleNode | null,\n) {\n  if (newChild.nodeType === NodeType.DOCUMENT_FRAGMENT_NODE) {\n    insertFragment(newChild, parentNode, previousSibling, nextSibling);\n    return;\n  }\n\n  if (newChild.parentNode !== null) {\n    removeChild(newChild.parentNode, newChild);\n  }\n\n  newChild.parentNode = parentNode;\n  newChild.previousSibling = previousSibling;\n  newChild.nextSibling = nextSibling;\n\n  if (previousSibling === null) {\n    parentNode.firstChild = newChild;\n  } else {\n    previousSibling.nextSibling = newChild;\n  }\n\n  if (nextSibling === null) {\n    parentNode.lastChild = newChild;\n  } else {\n    nextSibling.previousSibling = newChild;\n  }\n}\n\nfunction removeBetween(\n  parentNode: SimpleNode,\n  oldChild: SimpleNode,\n  previousSibling: SimpleNode | null,\n  nextSibling: SimpleNode | null,\n) {\n  oldChild.parentNode = null;\n  oldChild.previousSibling = null;\n  oldChild.nextSibling = null;\n\n  if (previousSibling === null) {\n    parentNode.firstChild = nextSibling;\n  } else {\n    previousSibling.nextSibling = nextSibling;\n  }\n\n  if (nextSibling === null) {\n    parentNode.lastChild = previousSibling;\n  } else {\n    nextSibling.previousSibling = previousSibling;\n  }\n}\n\nfunction insertFragment(\n  fragment: SimpleDocumentFragment,\n  parentNode: SimpleNode,\n  previousSibling: SimpleNode | null,\n  nextSibling: SimpleNode | null,\n): void {\n  const firstChild = fragment.firstChild;\n  if (firstChild === null) {\n    return;\n  }\n\n  fragment.firstChild = null;\n  fragment.lastChild = null;\n\n  let lastChild = firstChild;\n  let newChild: SimpleNode | null = firstChild;\n\n  firstChild.previousSibling = previousSibling;\n  if (previousSibling === null) {\n    parentNode.firstChild = firstChild;\n  } else {\n    previousSibling.nextSibling = firstChild;\n  }\n\n  while (newChild !== null) {\n    newChild.parentNode = parentNode;\n    lastChild = newChild;\n    newChild = newChild.nextSibling;\n  }\n\n  lastChild.nextSibling = nextSibling;\n  if (nextSibling === null) {\n    parentNode.lastChild = lastChild;\n  } else {\n    nextSibling.previousSibling = lastChild;\n  }\n}\n","export type Prefix = string | null;\nexport type LocalName = string;\nexport type QualifiedName = [Prefix, LocalName];\n\nexport function parseQualifiedName(qualifiedName: string): QualifiedName {\n  let localName = qualifiedName;\n  let prefix: string | null = null;\n  const i = qualifiedName.indexOf(':');\n  if (i !== -1) {\n    prefix = qualifiedName.slice(0, i);\n    localName = qualifiedName.slice(i + 1);\n  }\n  return [prefix, localName];\n}\n","import {\n  AttrNamespace,\n  ElementNamespace,\n  InsertPosition,\n  Namespace,\n  NodeType,\n  SimpleAttr,\n  SimpleChildNodes,\n  SimpleComment,\n  SimpleDocument,\n  SimpleDocumentFragment,\n  SimpleDocumentType,\n  SimpleElement,\n  SimpleNode,\n  SimpleRawHTMLSection,\n  SimpleText,\n} from '@simple-dom/interface';\nimport {\n  adjustAttrName,\n  EMPTY_ATTRS,\n  getAttribute,\n  removeAttribute,\n  setAttribute,\n} from './attributes';\nimport { ChildNodes } from './child-nodes';\nimport { cloneNode } from './clone';\nimport {\n  insertBefore,\n  removeChild,\n} from './mutation';\nimport {\n  parseQualifiedName,\n} from './qualified-name';\n\nexport type SimpleElementImpl = SimpleNodeImpl<NodeType.ELEMENT_NODE, null, ElementNamespace>;\nexport type SimpleDocumentImpl = SimpleNodeImpl<NodeType.DOCUMENT_NODE, null, Namespace.HTML>;\n\nexport default class SimpleNodeImpl<\n  T extends NodeType,\n  V extends string | null,\n  N extends ElementNamespace | undefined\n> {\n  public parentNode: SimpleNode | null = null;\n  public previousSibling: SimpleNode | null = null;\n  public nextSibling: SimpleNode | null = null;\n  public firstChild: SimpleNode | null = null;\n  public lastChild: SimpleNode | null = null;\n\n  public attributes: SimpleAttr[] = EMPTY_ATTRS;\n\n  /**\n   * @internal\n   */\n  public _childNodes: ChildNodes | undefined = undefined;\n\n  constructor(\n    public readonly ownerDocument: SimpleDocument,\n    public readonly nodeType: T,\n    public readonly nodeName: string,\n    public nodeValue: V,\n    public readonly namespaceURI: N) {\n  }\n\n  public get tagName(): string {\n    return this.nodeName;\n  }\n\n  public get childNodes(): SimpleChildNodes {\n    let children = this._childNodes;\n    if (children === undefined) {\n      children = this._childNodes = new ChildNodes(this as SimpleNode);\n    }\n    return children;\n  }\n\n  public cloneNode(this: SimpleNode, deep?: boolean): SimpleNode {\n    return cloneNode(this, deep === true);\n  }\n\n  public appendChild<Node extends SimpleNode>(this: SimpleNode, newChild: Node): Node {\n    insertBefore(this, newChild, null);\n    return newChild;\n  }\n\n  public insertBefore<Node extends SimpleNode>(this: SimpleNode, newChild: Node, refChild: SimpleNode | null): Node {\n    insertBefore(this, newChild, refChild);\n    return newChild;\n  }\n\n  public removeChild<Node extends SimpleNode>(this: SimpleNode, oldChild: Node): Node {\n    removeChild(this, oldChild);\n    return oldChild;\n  }\n\n  public insertAdjacentHTML(this: SimpleElementImpl, position: InsertPosition, html: string): void {\n    const raw = new SimpleNodeImpl(this.ownerDocument, NodeType.RAW_NODE, '#raw', html, void 0);\n    let parentNode: SimpleNode | null;\n    let nextSibling: SimpleNode | null;\n    switch (position) {\n      case 'beforebegin':\n        parentNode = this.parentNode;\n        nextSibling = this;\n        break;\n      case 'afterbegin':\n        parentNode = this;\n        nextSibling = this.firstChild;\n        break;\n      case 'beforeend':\n        parentNode = this;\n        nextSibling = null;\n        break;\n      case 'afterend':\n        parentNode = this.parentNode;\n        nextSibling = this.nextSibling;\n        break;\n      default: throw new Error('invalid position');\n    }\n    if (parentNode === null) {\n      throw new Error(`${position} requires a parentNode`);\n    }\n    insertBefore(parentNode, raw, nextSibling);\n  }\n\n  public getAttribute(this: SimpleElementImpl, name: string): string | null {\n    const localName = adjustAttrName(this.namespaceURI, name);\n    return getAttribute(this.attributes, null, localName);\n  }\n\n  public getAttributeNS(this: SimpleElementImpl, namespaceURI: AttrNamespace | null, localName: string): string | null {\n    return getAttribute(this.attributes, namespaceURI, localName);\n  }\n\n  public setAttribute(this: SimpleElementImpl, name: string, value: string): void {\n    const localName = adjustAttrName(this.namespaceURI, name);\n    setAttribute(this, null, null, localName, value);\n  }\n\n  public setAttributeNS(\n    this: SimpleElementImpl,\n    namespaceURI: AttrNamespace | null,\n    qualifiedName: string,\n    value: string,\n  ) {\n    const [prefix, localName] = parseQualifiedName(qualifiedName);\n    setAttribute(this as SimpleElementImpl, namespaceURI, prefix, localName, value);\n  }\n\n  public removeAttribute(this: SimpleElementImpl, name: string): void {\n    const localName = adjustAttrName(this.namespaceURI, name);\n    removeAttribute(this.attributes, null, localName);\n  }\n\n  public removeAttributeNS(this: SimpleElementImpl, namespaceURI: AttrNamespace | null, localName: string) {\n    removeAttribute(this.attributes, namespaceURI, localName);\n  }\n\n  get doctype() {\n    return this.firstChild as SimpleDocumentType;\n  }\n\n  get documentElement() {\n    return this.lastChild as SimpleElement;\n  }\n\n  get head() {\n    return this.documentElement.firstChild as SimpleElement;\n  }\n\n  get body() {\n    return this.documentElement.lastChild as SimpleElement;\n  }\n\n  public createElement(this: SimpleDocumentImpl, name: string): SimpleElement {\n    return new SimpleNodeImpl(this, NodeType.ELEMENT_NODE, name.toUpperCase(), null, Namespace.HTML);\n  }\n\n  public createElementNS(this: SimpleDocumentImpl, namespace: ElementNamespace, qualifiedName: string): SimpleElement {\n    // Node name is case-preserving in XML contexts, but returns canonical uppercase form in HTML contexts\n    // https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-104682815\n    const nodeName = namespace === Namespace.HTML ? qualifiedName.toUpperCase() : qualifiedName;\n    // we don't care to parse the qualified name because we only support HTML documents\n    // which don't support prefixed elements\n    return new SimpleNodeImpl(this, NodeType.ELEMENT_NODE, nodeName, null, namespace);\n  }\n\n  public createTextNode(this: SimpleDocumentImpl, text: string): SimpleText {\n    return new SimpleNodeImpl(this, NodeType.TEXT_NODE, '#text', text, void 0);\n  }\n\n  public createComment(this: SimpleDocumentImpl, text: string): SimpleComment {\n    return new SimpleNodeImpl(this, NodeType.COMMENT_NODE, '#comment', text, void 0);\n  }\n\n  /**\n   * Backwards compat\n   * @deprecated\n   */\n  public createRawHTMLSection(this: SimpleDocumentImpl, text: string): SimpleRawHTMLSection {\n    return new SimpleNodeImpl(this, NodeType.RAW_NODE, '#raw', text, void 0);\n  }\n\n  public createDocumentFragment(this: SimpleDocumentImpl): SimpleDocumentFragment {\n    return new SimpleNodeImpl(this, NodeType.DOCUMENT_FRAGMENT_NODE, '#document-fragment', null, void 0);\n  }\n}\n","import {\n  Namespace,\n  NodeType,\n  SimpleDocument,\n} from '@simple-dom/interface';\nimport SimpleNodeImpl from './node';\n\nexport function createHTMLDocument(): SimpleDocument {\n  // dom.d.ts types ownerDocument as Document but for a document ownerDocument is null\n  const document = new SimpleNodeImpl(null as any, NodeType.DOCUMENT_NODE, '#document', null, Namespace.HTML);\n  const doctype = new SimpleNodeImpl(document, NodeType.DOCUMENT_TYPE_NODE, 'html', null, Namespace.HTML);\n  const html = new SimpleNodeImpl(document, NodeType.ELEMENT_NODE, 'HTML', null, Namespace.HTML);\n  const head = new SimpleNodeImpl(document, NodeType.ELEMENT_NODE, 'HEAD', null, Namespace.HTML);\n  const body = new SimpleNodeImpl(document, NodeType.ELEMENT_NODE, 'BODY', null, Namespace.HTML);\n  html.appendChild(head);\n  html.appendChild(body);\n  document.appendChild(doctype);\n  document.appendChild(html);\n  return document;\n}\n"],"names":[],"mappings":"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"}