define('@glimmer/reference', ['exports', '@glimmer/global-context', '@glimmer/util', '@glimmer/validator', '@glimmer/env'], function (exports, globalContext, util, validator, env) { 'use strict';

  var REFERENCE = util.symbol('REFERENCE');

  var ReferenceImpl = function ReferenceImpl(type) {
    this.tag = null;
    this.lastRevision = validator.INITIAL;
    this.children = null;
    this.compute = null;
    this.update = null;
    this[REFERENCE] = type;
  };

  function createPrimitiveRef(value) {
    var ref = new ReferenceImpl(2
    /* Unbound */
    );
    ref.tag = validator.CONSTANT_TAG;
    ref.lastValue = value;

    if (env.DEBUG) {
      ref.debugLabel = String(value);
    }

    return ref;
  }
  var UNDEFINED_REFERENCE = createPrimitiveRef(undefined);
  var NULL_REFERENCE = createPrimitiveRef(null);
  var TRUE_REFERENCE = createPrimitiveRef(true);
  var FALSE_REFERENCE = createPrimitiveRef(false);
  function createConstRef(value, debugLabel) {
    var ref = new ReferenceImpl(0
    /* Constant */
    );
    ref.lastValue = value;
    ref.tag = validator.CONSTANT_TAG;

    if (env.DEBUG) {
      ref.debugLabel = debugLabel;
    }

    return ref;
  }
  function createUnboundRef(value, debugLabel) {
    var ref = new ReferenceImpl(2
    /* Unbound */
    );
    ref.lastValue = value;
    ref.tag = validator.CONSTANT_TAG;

    if (env.DEBUG) {
      ref.debugLabel = debugLabel;
    }

    return ref;
  }
  function createComputeRef(compute, update, debugLabel) {
    if (update === void 0) {
      update = null;
    }

    if (debugLabel === void 0) {
      debugLabel = 'unknown';
    }

    var ref = new ReferenceImpl(1
    /* Compute */
    );
    ref.compute = compute;
    ref.update = update;

    if (env.DEBUG) {
      ref.debugLabel = "(result of a `" + debugLabel + "` helper)";
    }

    return ref;
  }
  function createReadOnlyRef(ref) {
    if (!isUpdatableRef(ref)) return ref;
    return createComputeRef(function () {
      return valueForRef(ref);
    }, null, ref.debugLabel);
  }
  function isInvokableRef(ref) {
    return ref[REFERENCE] === 3
    /* Invokable */
    ;
  }
  function createInvokableRef(inner) {
    var ref = createComputeRef(function () {
      return valueForRef(inner);
    }, function (value) {
      return updateRef(inner, value);
    });
    ref.debugLabel = inner.debugLabel;
    ref[REFERENCE] = 3
    /* Invokable */
    ;
    return ref;
  }
  function isConstRef(_ref) {
    var ref = _ref;
    return ref.tag === validator.CONSTANT_TAG;
  }
  function isUpdatableRef(_ref) {
    var ref = _ref;
    return ref.update !== null;
  }
  function valueForRef(_ref) {
    var ref = _ref;
    var tag = ref.tag;

    if (tag === validator.CONSTANT_TAG) {
      return ref.lastValue;
    }

    var lastRevision = ref.lastRevision;
    var lastValue;

    if (tag === null || !validator.validateTag(tag, lastRevision)) {
      var compute = ref.compute;
      tag = ref.tag = validator.track(function () {
        lastValue = ref.lastValue = compute();
      }, env.DEBUG && ref.debugLabel);
      ref.lastRevision = validator.valueForTag(tag);
    } else {
      lastValue = ref.lastValue;
    }

    validator.consumeTag(tag);
    return lastValue;
  }
  function updateRef(_ref, value) {
    var ref = _ref;
    var update = ref.update;
    update(value);
  }
  function childRefFor(_parentRef, path) {
    var parentRef = _parentRef;
    var type = parentRef[REFERENCE];
    var children = parentRef.children;
    var child;

    if (children === null) {
      children = parentRef.children = new Map();
    } else {
      child = children.get(path);

      if (child !== undefined) {
        return child;
      }
    }

    if (type === 2
    /* Unbound */
    ) {
        var parent = valueForRef(parentRef);

        if (util.isDict(parent)) {
          child = createUnboundRef(parent[path], env.DEBUG && parentRef.debugLabel + "." + path);
        } else {
          child = UNDEFINED_REFERENCE;
        }
      } else {
      child = createComputeRef(function () {
        var parent = valueForRef(parentRef);

        if (util.isDict(parent)) {
          return globalContext.getProp(parent, path);
        }
      }, function (val) {
        var parent = valueForRef(parentRef);

        if (util.isDict(parent)) {
          return globalContext.setProp(parent, path, val);
        }
      });

      if (env.DEBUG) {
        child.debugLabel = parentRef.debugLabel + "." + path;
      }
    }

    children.set(path, child);
    return child;
  }
  function childRefFromParts(root, parts) {
    var reference = root;

    for (var i = 0; i < parts.length; i++) {
      reference = childRefFor(reference, parts[i]);
    }

    return reference;
  }

  if (env.DEBUG) {
    exports.createDebugAliasRef = function createDebugAliasRef(debugLabel, inner) {
      var update = isUpdatableRef(inner) ? function (value) {
        return updateRef(inner, value);
      } : null;
      var ref = createComputeRef(function () {
        return valueForRef(inner);
      }, update);
      ref[REFERENCE] = inner[REFERENCE];
      ref.debugLabel = debugLabel;
      return ref;
    };
  }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
  var NULL_IDENTITY = {};

  var KEY = function KEY(_, index) {
    return index;
  };

  var INDEX = function INDEX(_, index) {
    return String(index);
  };

  var IDENTITY = function IDENTITY(item) {
    if (item === null) {
      // Returning null as an identity will cause failures since the iterator
      // can't tell that it's actually supposed to be null
      return NULL_IDENTITY;
    }

    return item;
  };

  function keyForPath(path) {
    if (env.DEBUG && path[0] === '@') {
      throw new Error("invalid keypath: '" + path + "', valid keys: @index, @identity, or a path");
    }

    return uniqueKeyFor(function (item) {
      return globalContext.getPath(item, path);
    });
  }

  function makeKeyFor(key) {
    switch (key) {
      case '@key':
        return uniqueKeyFor(KEY);

      case '@index':
        return uniqueKeyFor(INDEX);

      case '@identity':
        return uniqueKeyFor(IDENTITY);

      default:
        return keyForPath(key);
    }
  }

  var WeakMapWithPrimitives = /*#__PURE__*/function () {
    function WeakMapWithPrimitives() {}

    var _proto = WeakMapWithPrimitives.prototype;

    _proto.set = function set(key, value) {
      if (util.isObject(key) || typeof key === 'function') {
        this.weakMap.set(key, value);
      } else {
        this.primitiveMap.set(key, value);
      }
    };

    _proto.get = function get(key) {
      if (util.isObject(key) || typeof key === 'function') {
        return this.weakMap.get(key);
      } else {
        return this.primitiveMap.get(key);
      }
    };

    _createClass(WeakMapWithPrimitives, [{
      key: "weakMap",
      get: function get() {
        if (this._weakMap === undefined) {
          this._weakMap = new WeakMap();
        }

        return this._weakMap;
      }
    }, {
      key: "primitiveMap",
      get: function get() {
        if (this._primitiveMap === undefined) {
          this._primitiveMap = new Map();
        }

        return this._primitiveMap;
      }
    }]);

    return WeakMapWithPrimitives;
  }();

  var IDENTITIES = new WeakMapWithPrimitives();

  function identityForNthOccurence(value, count) {
    var identities = IDENTITIES.get(value);

    if (identities === undefined) {
      identities = [];
      IDENTITIES.set(value, identities);
    }

    var identity = identities[count];

    if (identity === undefined) {
      identity = {
        value: value,
        count: count
      };
      identities[count] = identity;
    }

    return identity;
  }
  /**
   * When iterating over a list, it's possible that an item with the same unique
   * key could be encountered twice:
   *
   * ```js
   * let arr = ['same', 'different', 'same', 'same'];
   * ```
   *
   * In general, we want to treat these items as _unique within the list_. To do
   * this, we track the occurences of every item as we iterate the list, and when
   * an item occurs more than once, we generate a new unique key just for that
   * item, and that occurence within the list. The next time we iterate the list,
   * and encounter an item for the nth time, we can get the _same_ key, and let
   * Glimmer know that it should reuse the DOM for the previous nth occurence.
   */


  function uniqueKeyFor(keyFor) {
    var seen = new WeakMapWithPrimitives();
    return function (value, memo) {
      var key = keyFor(value, memo);
      var count = seen.get(key) || 0;
      seen.set(key, count + 1);

      if (count === 0) {
        return key;
      }

      return identityForNthOccurence(key, count);
    };
  }

  function createIteratorRef(listRef, key) {
    return createComputeRef(function () {
      var iterable = valueForRef(listRef);
      var keyFor = makeKeyFor(key);

      if (Array.isArray(iterable)) {
        return new ArrayIterator(iterable, keyFor);
      }

      var maybeIterator = globalContext.toIterator(iterable);

      if (maybeIterator === null) {
        return new ArrayIterator(util.EMPTY_ARRAY, function () {
          return null;
        });
      }

      return new IteratorWrapper(maybeIterator, keyFor);
    });
  }
  function createIteratorItemRef(_value) {
    var value = _value;
    var tag = validator.createTag();
    return createComputeRef(function () {
      validator.consumeTag(tag);
      return value;
    }, function (newValue) {
      if (value !== newValue) {
        value = newValue;
        validator.dirtyTag(tag);
      }
    });
  }

  var IteratorWrapper = /*#__PURE__*/function () {
    function IteratorWrapper(inner, keyFor) {
      this.inner = inner;
      this.keyFor = keyFor;
    }

    var _proto2 = IteratorWrapper.prototype;

    _proto2.isEmpty = function isEmpty() {
      return this.inner.isEmpty();
    };

    _proto2.next = function next() {
      var nextValue = this.inner.next();

      if (nextValue !== null) {
        nextValue.key = this.keyFor(nextValue.value, nextValue.memo);
      }

      return nextValue;
    };

    return IteratorWrapper;
  }();

  var ArrayIterator = /*#__PURE__*/function () {
    function ArrayIterator(iterator, keyFor) {
      this.iterator = iterator;
      this.keyFor = keyFor;
      this.pos = 0;

      if (iterator.length === 0) {
        this.current = {
          kind: 'empty'
        };
      } else {
        this.current = {
          kind: 'first',
          value: iterator[this.pos]
        };
      }
    }

    var _proto3 = ArrayIterator.prototype;

    _proto3.isEmpty = function isEmpty() {
      return this.current.kind === 'empty';
    };

    _proto3.next = function next() {
      var value;
      var current = this.current;

      if (current.kind === 'first') {
        this.current = {
          kind: 'progress'
        };
        value = current.value;
      } else if (this.pos >= this.iterator.length - 1) {
        return null;
      } else {
        value = this.iterator[++this.pos];
      }

      var keyFor = this.keyFor;
      var key = keyFor(value, this.pos);
      var memo = this.pos;
      return {
        key: key,
        value: value,
        memo: memo
      };
    };

    return ArrayIterator;
  }();

  exports.FALSE_REFERENCE = FALSE_REFERENCE;
  exports.NULL_REFERENCE = NULL_REFERENCE;
  exports.REFERENCE = REFERENCE;
  exports.TRUE_REFERENCE = TRUE_REFERENCE;
  exports.UNDEFINED_REFERENCE = UNDEFINED_REFERENCE;
  exports.childRefFor = childRefFor;
  exports.childRefFromParts = childRefFromParts;
  exports.createComputeRef = createComputeRef;
  exports.createConstRef = createConstRef;
  exports.createInvokableRef = createInvokableRef;
  exports.createIteratorItemRef = createIteratorItemRef;
  exports.createIteratorRef = createIteratorRef;
  exports.createPrimitiveRef = createPrimitiveRef;
  exports.createReadOnlyRef = createReadOnlyRef;
  exports.createUnboundRef = createUnboundRef;
  exports.isConstRef = isConstRef;
  exports.isInvokableRef = isInvokableRef;
  exports.isUpdatableRef = isUpdatableRef;
  exports.updateRef = updateRef;
  exports.valueForRef = valueForRef;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
