import { unreachable } from './platform-utils';
export function castToSimple(node) {
  if (isDocument(node)) {
    return node;
  } else if (isElement(node)) {
    return node;
  } else {
    return node;
  }
}
export function castToBrowser(node, sugaryCheck) {
  if (node === null || node === undefined) {
    return null;
  }

  if (typeof document === undefined) {
    throw new Error('Attempted to cast to a browser node in a non-browser context');
  }

  if (isDocument(node)) {
    return node;
  }

  if (node.ownerDocument !== document) {
    throw new Error('Attempted to cast to a browser node with a node that was not created from this document');
  }

  return checkNode(node, sugaryCheck);
}

function checkError(from, check) {
  return new Error(`cannot cast a ${from} into ${check}`);
}

function isDocument(node) {
  return node.nodeType === 9
  /* DOCUMENT_NODE */
  ;
}

function isElement(node) {
  return node.nodeType === 1
  /* ELEMENT_NODE */
  ;
}

export function checkNode(node, check) {
  let isMatch = false;

  if (node !== null) {
    if (typeof check === 'string') {
      isMatch = stringCheckNode(node, check);
    } else if (Array.isArray(check)) {
      isMatch = check.some(c => stringCheckNode(node, c));
    } else {
      throw unreachable();
    }
  }

  if (isMatch) {
    return node;
  } else {
    throw checkError(`SimpleElement(${node})`, check);
  }
}

function stringCheckNode(node, check) {
  switch (check) {
    case 'NODE':
      return true;

    case 'HTML':
      return node instanceof HTMLElement;

    case 'SVG':
      return node instanceof SVGElement;

    case 'ELEMENT':
      return node instanceof Element;

    default:
      if (check.toUpperCase() === check) {
        throw new Error(`BUG: this code is missing handling for a generic node type`);
      }

      return node instanceof Element && node.tagName.toLowerCase() === check;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,