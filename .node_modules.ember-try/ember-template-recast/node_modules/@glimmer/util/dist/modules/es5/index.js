export { EMPTY_ARRAY } from './lib/array-utils';
export { default as assert, deprecate } from './lib/assert';
export { dict, DictSet, isDict, isObject, StackImpl as Stack } from './lib/collections';
export * from './lib/dom';
export { ensureGuid, initializeGuid } from './lib/guid';
export { isSerializationFirstNode, SERIALIZATION_FIRST_NODE_STRING } from './lib/is-serialization-first-node';
export { assign, fillNulls, values } from './lib/object-utils';
export * from './lib/platform-utils';
export * from './lib/string';
export * from './lib/immediate';
export * from './lib/template';
export { default as _WeakSet } from './lib/weak-set';
export { castToSimple, castToBrowser, checkNode } from './lib/simple-cast';
export { default as debugToString } from './lib/debug-to-string';
export { beginTestSteps, endTestSteps, logStep, verifySteps } from './lib/debug-steps';
export function assertNever(value, desc) {
  if (desc === void 0) {
    desc = 'unexpected unreachable branch';
  }

  console.log('unreachable', value);
  console.trace(desc + " :: " + JSON.stringify(value) + " (" + value + ")");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBQSxXQUFBLFFBQUEsbUJBQUE7QUFDQSxTQUFTLE9BQU8sSUFBaEIsTUFBQSxFQUFBLFNBQUEsUUFBQSxjQUFBO0FBQ0EsU0FBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQStDLFNBQVMsSUFBeEQsS0FBQSxRQUFBLG1CQUFBO0FBQ0EsY0FBQSxXQUFBO0FBQ0EsU0FBQSxVQUFBLEVBQUEsY0FBQSxRQUFBLFlBQUE7QUFDQSxTQUFBLHdCQUFBLEVBQUEsK0JBQUEsUUFBQSxtQ0FBQTtBQUlBLFNBQUEsTUFBQSxFQUFBLFNBQUEsRUFBQSxNQUFBLFFBQUEsb0JBQUE7QUFDQSxjQUFBLHNCQUFBO0FBQ0EsY0FBQSxjQUFBO0FBQ0EsY0FBQSxpQkFBQTtBQUNBLGNBQUEsZ0JBQUE7QUFDQSxTQUFTLE9BQU8sSUFBaEIsUUFBQSxRQUFBLGdCQUFBO0FBQ0EsU0FBQSxZQUFBLEVBQUEsYUFBQSxFQUFBLFNBQUEsUUFBQSxtQkFBQTtBQUVBLFNBQVMsT0FBTyxJQUFoQixhQUFBLFFBQUEsdUJBQUE7QUFDQSxTQUFBLGNBQUEsRUFBQSxZQUFBLEVBQUEsT0FBQSxFQUFBLFdBQUEsUUFBQSxtQkFBQTtBQUlBLE9BQU0sU0FBQSxXQUFBLENBQUEsS0FBQSxFQUFvQyxJQUFwQyxFQUEwRTtBQUFBLE1BQXRDLElBQXNDO0FBQXRDLElBQUEsSUFBc0MsR0FBMUUsK0JBQTBFO0FBQUE7O0FBQzlFLEVBQUEsT0FBTyxDQUFQLEdBQUEsQ0FBQSxhQUFBLEVBQUEsS0FBQTtBQUNBLEVBQUEsT0FBTyxDQUFQLEtBQUEsQ0FBaUIsSUFBakIsWUFBNEIsSUFBSSxDQUFKLFNBQUEsQ0FBQSxLQUFBLENBQTVCLFVBQUEsS0FBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuL2xpYi9hcnJheS11dGlscyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIGFzc2VydCwgZGVwcmVjYXRlIH0gZnJvbSAnLi9saWIvYXNzZXJ0JztcbmV4cG9ydCB7IGRpY3QsIERpY3RTZXQsIGlzRGljdCwgaXNPYmplY3QsIFNldCwgU3RhY2tJbXBsIGFzIFN0YWNrIH0gZnJvbSAnLi9saWIvY29sbGVjdGlvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvZG9tJztcbmV4cG9ydCB7IGVuc3VyZUd1aWQsIEhhc0d1aWQsIGluaXRpYWxpemVHdWlkIH0gZnJvbSAnLi9saWIvZ3VpZCc7XG5leHBvcnQge1xuICBpc1NlcmlhbGl6YXRpb25GaXJzdE5vZGUsXG4gIFNFUklBTElaQVRJT05fRklSU1RfTk9ERV9TVFJJTkcsXG59IGZyb20gJy4vbGliL2lzLXNlcmlhbGl6YXRpb24tZmlyc3Qtbm9kZSc7XG5leHBvcnQgeyBhc3NpZ24sIGZpbGxOdWxscywgdmFsdWVzIH0gZnJvbSAnLi9saWIvb2JqZWN0LXV0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3BsYXRmb3JtLXV0aWxzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL3N0cmluZyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9pbW1lZGlhdGUnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvdGVtcGxhdGUnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBfV2Vha1NldCB9IGZyb20gJy4vbGliL3dlYWstc2V0JztcbmV4cG9ydCB7IGNhc3RUb1NpbXBsZSwgY2FzdFRvQnJvd3NlciwgY2hlY2tOb2RlIH0gZnJvbSAnLi9saWIvc2ltcGxlLWNhc3QnO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIGRlYnVnVG9TdHJpbmcgfSBmcm9tICcuL2xpYi9kZWJ1Zy10by1zdHJpbmcnO1xuZXhwb3J0IHsgYmVnaW5UZXN0U3RlcHMsIGVuZFRlc3RTdGVwcywgbG9nU3RlcCwgdmVyaWZ5U3RlcHMgfSBmcm9tICcuL2xpYi9kZWJ1Zy1zdGVwcyc7XG5cbmV4cG9ydCB0eXBlIEZJWE1FPFQsIFMgZXh0ZW5kcyBzdHJpbmc+ID0gKFQgJiBTKSB8IFQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROZXZlcih2YWx1ZTogbmV2ZXIsIGRlc2MgPSAndW5leHBlY3RlZCB1bnJlYWNoYWJsZSBicmFuY2gnKTogdm9pZCB7XG4gIGNvbnNvbGUubG9nKCd1bnJlYWNoYWJsZScsIHZhbHVlKTtcbiAgY29uc29sZS50cmFjZShgJHtkZXNjfSA6OiAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0gKCR7dmFsdWV9KWApO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==