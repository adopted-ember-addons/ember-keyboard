export default class Walker {
    constructor(order) {
        this.order = order;
        this.stack = [];
    }
    visit(node, callback) {
        if (!node) {
            return;
        }
        this.stack.push(node);
        if (this.order === 'post') {
            this.children(node, callback);
            callback(node, this);
        } else {
            callback(node, this);
            this.children(node, callback);
        }
        this.stack.pop();
    }
    children(node, callback) {
        let type;
        if (node.type === 'Block' || node.type === 'Template' && visitors.Program) {
            type = 'Program';
        } else {
            type = node.type;
        }
        let visitor = visitors[type];
        if (visitor) {
            visitor(this, node, callback);
        }
    }
}
let visitors = {
    Program(walker, node, callback) {
        for (let i = 0; i < node.body.length; i++) {
            walker.visit(node.body[i], callback);
        }
    },
    Template(walker, node, callback) {
        for (let i = 0; i < node.body.length; i++) {
            walker.visit(node.body[i], callback);
        }
    },
    Block(walker, node, callback) {
        for (let i = 0; i < node.body.length; i++) {
            walker.visit(node.body[i], callback);
        }
    },
    ElementNode(walker, node, callback) {
        for (let i = 0; i < node.children.length; i++) {
            walker.visit(node.children[i], callback);
        }
    },
    BlockStatement(walker, node, callback) {
        walker.visit(node.program, callback);
        walker.visit(node.inverse || null, callback);
    }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL3dhbGtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZUFLYyxNQUFPLE1BQVAsQ0FBYTtBQUV6QixnQkFBbUIsS0FBbkIsRUFBOEI7QUFBWCxhQUFBLEtBQUEsR0FBQSxLQUFBO0FBRFosYUFBQSxLQUFBLEdBQWUsRUFBZjtBQUMyQjtBQUVsQyxVQUEwQixJQUExQixFQUEyQyxRQUEzQyxFQUFvRTtBQUNsRSxZQUFJLENBQUMsSUFBTCxFQUFXO0FBQ1Q7QUFDRDtBQUVELGFBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBaEI7QUFFQSxZQUFJLEtBQUssS0FBTCxLQUFlLE1BQW5CLEVBQTJCO0FBQ3pCLGlCQUFLLFFBQUwsQ0FBYyxJQUFkLEVBQW9CLFFBQXBCO0FBQ0EscUJBQVMsSUFBVCxFQUFlLElBQWY7QUFDRCxTQUhELE1BR087QUFDTCxxQkFBUyxJQUFULEVBQWUsSUFBZjtBQUNBLGlCQUFLLFFBQUwsQ0FBYyxJQUFkLEVBQW9CLFFBQXBCO0FBQ0Q7QUFFRCxhQUFLLEtBQUwsQ0FBVyxHQUFYO0FBQ0Q7QUFFRCxhQUFTLElBQVQsRUFBb0IsUUFBcEIsRUFBaUM7QUFDL0IsWUFBSSxJQUFKO0FBQ0EsWUFBSSxLQUFLLElBQUwsS0FBYyxPQUFkLElBQTBCLEtBQUssSUFBTCxLQUFjLFVBQWQsSUFBNEIsU0FBUyxPQUFuRSxFQUE2RTtBQUMzRSxtQkFBTyxTQUFQO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsbUJBQU8sS0FBSyxJQUFaO0FBQ0Q7QUFFRCxZQUFJLFVBQVcsU0FBaUIsSUFBakIsQ0FBZjtBQUNBLFlBQUksT0FBSixFQUFhO0FBQ1gsb0JBQVEsSUFBUixFQUFjLElBQWQsRUFBb0IsUUFBcEI7QUFDRDtBQUNGO0FBbEN3QjtBQXFDM0IsSUFBSSxXQUFXO0FBQ2IsWUFBUSxNQUFSLEVBQXdCLElBQXhCLEVBQTJDLFFBQTNDLEVBQTJFO0FBQ3pFLGFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLElBQUwsQ0FBVSxNQUE5QixFQUFzQyxHQUF0QyxFQUEyQztBQUN6QyxtQkFBTyxLQUFQLENBQWEsS0FBSyxJQUFMLENBQVUsQ0FBVixDQUFiLEVBQTJCLFFBQTNCO0FBQ0Q7QUFDRixLQUxZO0FBT2IsYUFBUyxNQUFULEVBQXlCLElBQXpCLEVBQTZDLFFBQTdDLEVBQTZFO0FBQzNFLGFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLElBQUwsQ0FBVSxNQUE5QixFQUFzQyxHQUF0QyxFQUEyQztBQUN6QyxtQkFBTyxLQUFQLENBQWEsS0FBSyxJQUFMLENBQVUsQ0FBVixDQUFiLEVBQTJCLFFBQTNCO0FBQ0Q7QUFDRixLQVhZO0FBYWIsVUFBTSxNQUFOLEVBQXNCLElBQXRCLEVBQXVDLFFBQXZDLEVBQXVFO0FBQ3JFLGFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLElBQUwsQ0FBVSxNQUE5QixFQUFzQyxHQUF0QyxFQUEyQztBQUN6QyxtQkFBTyxLQUFQLENBQWEsS0FBSyxJQUFMLENBQVUsQ0FBVixDQUFiLEVBQTJCLFFBQTNCO0FBQ0Q7QUFDRixLQWpCWTtBQW1CYixnQkFBWSxNQUFaLEVBQTRCLElBQTVCLEVBQW1ELFFBQW5ELEVBQW1GO0FBQ2pGLGFBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxLQUFLLFFBQUwsQ0FBYyxNQUFsQyxFQUEwQyxHQUExQyxFQUErQztBQUM3QyxtQkFBTyxLQUFQLENBQWEsS0FBSyxRQUFMLENBQWMsQ0FBZCxDQUFiLEVBQStCLFFBQS9CO0FBQ0Q7QUFDRixLQXZCWTtBQXlCYixtQkFBZSxNQUFmLEVBQStCLElBQS9CLEVBQXlELFFBQXpELEVBQTBGO0FBQ3hGLGVBQU8sS0FBUCxDQUFhLEtBQUssT0FBbEIsRUFBMkIsUUFBM0I7QUFDQSxlQUFPLEtBQVAsQ0FBYSxLQUFLLE9BQUwsSUFBZ0IsSUFBN0IsRUFBbUMsUUFBbkM7QUFDRDtBQTVCWSxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuXG5leHBvcnQgdHlwZSBOb2RlQ2FsbGJhY2s8TiBleHRlbmRzIEFTVC5Ob2RlPiA9IChub2RlOiBOLCB3YWxrZXI6IFdhbGtlcikgPT4gdm9pZDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2Fsa2VyIHtcbiAgcHVibGljIHN0YWNrOiBhbnlbXSA9IFtdO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgb3JkZXI/OiBhbnkpIHt9XG5cbiAgdmlzaXQ8TiBleHRlbmRzIEFTVC5Ob2RlPihub2RlOiBPcHRpb248Tj4sIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8Tj4pIHtcbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrLnB1c2gobm9kZSk7XG5cbiAgICBpZiAodGhpcy5vcmRlciA9PT0gJ3Bvc3QnKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuKG5vZGUsIGNhbGxiYWNrKTtcbiAgICAgIGNhbGxiYWNrKG5vZGUsIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhub2RlLCB0aGlzKTtcbiAgICAgIHRoaXMuY2hpbGRyZW4obm9kZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gIH1cblxuICBjaGlsZHJlbihub2RlOiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcbiAgICBsZXQgdHlwZTtcbiAgICBpZiAobm9kZS50eXBlID09PSAnQmxvY2snIHx8IChub2RlLnR5cGUgPT09ICdUZW1wbGF0ZScgJiYgdmlzaXRvcnMuUHJvZ3JhbSkpIHtcbiAgICAgIHR5cGUgPSAnUHJvZ3JhbSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSBub2RlLnR5cGU7XG4gICAgfVxuXG4gICAgbGV0IHZpc2l0b3IgPSAodmlzaXRvcnMgYXMgYW55KVt0eXBlXTtcbiAgICBpZiAodmlzaXRvcikge1xuICAgICAgdmlzaXRvcih0aGlzLCBub2RlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG59XG5cbmxldCB2aXNpdG9ycyA9IHtcbiAgUHJvZ3JhbSh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULlByb2dyYW0sIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULk5vZGU+KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdhbGtlci52aXNpdChub2RlLmJvZHlbaV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgVGVtcGxhdGUod2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5UZW1wbGF0ZSwgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxBU1QuTm9kZT4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgd2Fsa2VyLnZpc2l0KG5vZGUuYm9keVtpXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBCbG9jayh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULkJsb2NrLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Ob2RlPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5ib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YWxrZXIudmlzaXQobm9kZS5ib2R5W2ldLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIEVsZW1lbnROb2RlKHdhbGtlcjogV2Fsa2VyLCBub2RlOiBBU1QuRWxlbWVudE5vZGUsIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULk5vZGU+KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YWxrZXIudmlzaXQobm9kZS5jaGlsZHJlbltpXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBCbG9ja1N0YXRlbWVudCh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULkJsb2NrU3RhdGVtZW50LCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5CbG9jaz4pIHtcbiAgICB3YWxrZXIudmlzaXQobm9kZS5wcm9ncmFtLCBjYWxsYmFjayk7XG4gICAgd2Fsa2VyLnZpc2l0KG5vZGUuaW52ZXJzZSB8fCBudWxsLCBjYWxsYmFjayk7XG4gIH0sXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==