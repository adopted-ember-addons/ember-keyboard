var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { EventedTokenizer, EntityParser, HTML5NamedCharRefs as namedCharRefs } from 'simple-html-tokenizer';
import { assert } from '@glimmer/util';
export var Parser = function () {
    function Parser(source) {
        var entityParser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new EntityParser(namedCharRefs);

        _classCallCheck(this, Parser);

        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.source = source.split(/(?:\r\n?|\n)/g);
        this.tokenizer = new EventedTokenizer(this, entityParser);
    }

    Parser.prototype.acceptTemplate = function acceptTemplate(node) {
        return this[node.type](node);
    };

    Parser.prototype.acceptNode = function acceptNode(node) {
        return this[node.type](node);
    };

    Parser.prototype.currentElement = function currentElement() {
        return this.elementStack[this.elementStack.length - 1];
    };

    Parser.prototype.sourceForNode = function sourceForNode(node, endNode) {
        var firstLine = node.loc.start.line - 1;
        var currentLine = firstLine - 1;
        var firstColumn = node.loc.start.column;
        var string = [];
        var line = void 0;
        var lastLine = void 0;
        var lastColumn = void 0;
        if (endNode) {
            lastLine = endNode.loc.end.line - 1;
            lastColumn = endNode.loc.end.column;
        } else {
            lastLine = node.loc.end.line - 1;
            lastColumn = node.loc.end.column;
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                } else {
                    string.push(line.slice(firstColumn));
                }
            } else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            } else {
                string.push(line);
            }
        }
        return string.join('\n');
    };

    _createClass(Parser, [{
        key: 'currentAttr',
        get: function get() {
            return this.currentAttribute;
        }
    }, {
        key: 'currentTag',
        get: function get() {
            var node = this.currentNode;
            false && assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');

            return node;
        }
    }, {
        key: 'currentStartTag',
        get: function get() {
            var node = this.currentNode;
            false && assert(node && node.type === 'StartTag', 'expected start tag');

            return node;
        }
    }, {
        key: 'currentEndTag',
        get: function get() {
            var node = this.currentNode;
            false && assert(node && node.type === 'EndTag', 'expected end tag');

            return node;
        }
    }, {
        key: 'currentComment',
        get: function get() {
            var node = this.currentNode;
            false && assert(node && node.type === 'CommentStatement', 'expected a comment');

            return node;
        }
    }, {
        key: 'currentData',
        get: function get() {
            var node = this.currentNode;
            false && assert(node && node.type === 'TextNode', 'expected a text node');

            return node;
        }
    }]);

    return Parser;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,