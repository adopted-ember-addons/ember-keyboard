import { tuple } from '@glimmer/util';
// ensure stays in sync with typing
// ParentNode and ChildKey types are derived from VisitorKeysMap
var visitorKeys = {
    Program: tuple('body'),
    Template: tuple('body'),
    Block: tuple('body'),
    MustacheStatement: tuple('path', 'params', 'hash'),
    BlockStatement: tuple('path', 'params', 'hash', 'program', 'inverse'),
    ElementModifierStatement: tuple('path', 'params', 'hash'),
    PartialStatement: tuple('name', 'params', 'hash'),
    CommentStatement: tuple(),
    MustacheCommentStatement: tuple(),
    ElementNode: tuple('attributes', 'modifiers', 'children', 'comments'),
    AttrNode: tuple('value'),
    TextNode: tuple(),
    ConcatStatement: tuple('parts'),
    SubExpression: tuple('path', 'params', 'hash'),
    PathExpression: tuple(),
    StringLiteral: tuple(),
    BooleanLiteral: tuple(),
    NumberLiteral: tuple(),
    NullLiteral: tuple(),
    UndefinedLiteral: tuple(),
    Hash: tuple('pairs'),
    HashPair: tuple('value')
};
export default visitorKeys;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHlwZXMvdmlzaXRvci1rZXlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQUEsS0FBQSxRQUFBLGVBQUE7QUFHQTtBQUNBO0FBQ0EsSUFBTSxjQUFjO0FBQ2xCLGFBQVMsTUFEUyxNQUNULENBRFM7QUFFbEIsY0FBVSxNQUZRLE1BRVIsQ0FGUTtBQUdsQixXQUFPLE1BSFcsTUFHWCxDQUhXO0FBS2xCLHVCQUFtQixNQUFBLE1BQUEsRUFBQSxRQUFBLEVBTEQsTUFLQyxDQUxEO0FBTWxCLG9CQUFnQixNQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLFNBQUEsRUFORSxTQU1GLENBTkU7QUFPbEIsOEJBQTBCLE1BQUEsTUFBQSxFQUFBLFFBQUEsRUFQUixNQU9RLENBUFI7QUFRbEIsc0JBQWtCLE1BQUEsTUFBQSxFQUFBLFFBQUEsRUFSQSxNQVFBLENBUkE7QUFTbEIsc0JBVGtCLE9BQUE7QUFVbEIsOEJBVmtCLE9BQUE7QUFXbEIsaUJBQWEsTUFBQSxZQUFBLEVBQUEsV0FBQSxFQUFBLFVBQUEsRUFYSyxVQVdMLENBWEs7QUFZbEIsY0FBVSxNQVpRLE9BWVIsQ0FaUTtBQWFsQixjQWJrQixPQUFBO0FBZWxCLHFCQUFpQixNQWZDLE9BZUQsQ0FmQztBQWdCbEIsbUJBQWUsTUFBQSxNQUFBLEVBQUEsUUFBQSxFQWhCRyxNQWdCSCxDQWhCRztBQWlCbEIsb0JBakJrQixPQUFBO0FBbUJsQixtQkFuQmtCLE9BQUE7QUFvQmxCLG9CQXBCa0IsT0FBQTtBQXFCbEIsbUJBckJrQixPQUFBO0FBc0JsQixpQkF0QmtCLE9BQUE7QUF1QmxCLHNCQXZCa0IsT0FBQTtBQXlCbEIsVUFBTSxNQXpCWSxPQXlCWixDQXpCWTtBQTBCbEIsY0FBVSxNQUFBLE9BQUE7QUExQlEsQ0FBcEI7QUFrQ0EsZUFBQSxXQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHVwbGUgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCAqIGFzIEFTVCBmcm9tICcuLi90eXBlcy9ub2Rlcyc7XG5cbi8vIGVuc3VyZSBzdGF5cyBpbiBzeW5jIHdpdGggdHlwaW5nXG4vLyBQYXJlbnROb2RlIGFuZCBDaGlsZEtleSB0eXBlcyBhcmUgZGVyaXZlZCBmcm9tIFZpc2l0b3JLZXlzTWFwXG5jb25zdCB2aXNpdG9yS2V5cyA9IHtcbiAgUHJvZ3JhbTogdHVwbGUoJ2JvZHknKSxcbiAgVGVtcGxhdGU6IHR1cGxlKCdib2R5JyksXG4gIEJsb2NrOiB0dXBsZSgnYm9keScpLFxuXG4gIE11c3RhY2hlU3RhdGVtZW50OiB0dXBsZSgncGF0aCcsICdwYXJhbXMnLCAnaGFzaCcpLFxuICBCbG9ja1N0YXRlbWVudDogdHVwbGUoJ3BhdGgnLCAncGFyYW1zJywgJ2hhc2gnLCAncHJvZ3JhbScsICdpbnZlcnNlJyksXG4gIEVsZW1lbnRNb2RpZmllclN0YXRlbWVudDogdHVwbGUoJ3BhdGgnLCAncGFyYW1zJywgJ2hhc2gnKSxcbiAgUGFydGlhbFN0YXRlbWVudDogdHVwbGUoJ25hbWUnLCAncGFyYW1zJywgJ2hhc2gnKSxcbiAgQ29tbWVudFN0YXRlbWVudDogdHVwbGUoKSxcbiAgTXVzdGFjaGVDb21tZW50U3RhdGVtZW50OiB0dXBsZSgpLFxuICBFbGVtZW50Tm9kZTogdHVwbGUoJ2F0dHJpYnV0ZXMnLCAnbW9kaWZpZXJzJywgJ2NoaWxkcmVuJywgJ2NvbW1lbnRzJyksXG4gIEF0dHJOb2RlOiB0dXBsZSgndmFsdWUnKSxcbiAgVGV4dE5vZGU6IHR1cGxlKCksXG5cbiAgQ29uY2F0U3RhdGVtZW50OiB0dXBsZSgncGFydHMnKSxcbiAgU3ViRXhwcmVzc2lvbjogdHVwbGUoJ3BhdGgnLCAncGFyYW1zJywgJ2hhc2gnKSxcbiAgUGF0aEV4cHJlc3Npb246IHR1cGxlKCksXG5cbiAgU3RyaW5nTGl0ZXJhbDogdHVwbGUoKSxcbiAgQm9vbGVhbkxpdGVyYWw6IHR1cGxlKCksXG4gIE51bWJlckxpdGVyYWw6IHR1cGxlKCksXG4gIE51bGxMaXRlcmFsOiB0dXBsZSgpLFxuICBVbmRlZmluZWRMaXRlcmFsOiB0dXBsZSgpLFxuXG4gIEhhc2g6IHR1cGxlKCdwYWlycycpLFxuICBIYXNoUGFpcjogdHVwbGUoJ3ZhbHVlJyksXG59O1xuXG50eXBlIFZpc2l0b3JLZXlzTWFwID0gdHlwZW9mIHZpc2l0b3JLZXlzO1xuXG5leHBvcnQgdHlwZSBWaXNpdG9yS2V5cyA9IHsgW1AgaW4ga2V5b2YgVmlzaXRvcktleXNNYXBdOiBWaXNpdG9yS2V5c01hcFtQXVtudW1iZXJdIH07XG5leHBvcnQgdHlwZSBWaXNpdG9yS2V5PE4gZXh0ZW5kcyBBU1QuTm9kZT4gPSBWaXNpdG9yS2V5c1tOWyd0eXBlJ11dICYga2V5b2YgTjtcblxuZXhwb3J0IGRlZmF1bHQgdmlzaXRvcktleXM7XG4iXSwic291cmNlUm9vdCI6IiJ9