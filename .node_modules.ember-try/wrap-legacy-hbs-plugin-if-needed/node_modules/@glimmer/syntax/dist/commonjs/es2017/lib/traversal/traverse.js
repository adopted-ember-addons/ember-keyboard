'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = traverse;

var _visitorKeys = require('../types/visitor-keys');

var _visitorKeys2 = _interopRequireDefault(_visitorKeys);

var _errors = require('./errors');

var _util = require('@glimmer/util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getEnterFunction(handler) {
    if (typeof handler === 'function') {
        return handler;
    } else {
        return handler.enter;
    }
}
function getExitFunction(handler) {
    if (typeof handler === 'function') {
        return undefined;
    } else {
        return handler.exit;
    }
}
function getKeyHandler(handler, key) {
    let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    let keyHandler = keyVisitor[key];
    if (keyHandler !== undefined) {
        return keyHandler;
    }
    return keyVisitor.All;
}
function getNodeHandler(visitor, nodeType) {
    if (nodeType === 'Template' || nodeType === 'Block') {
        if (visitor.Program) {
            if (false) {
                false && !false && (0, _util.deprecate)(`TODO`);
            }
            return visitor.Program;
        }
    }
    let handler = visitor[nodeType];
    if (handler !== undefined) {
        return handler;
    }
    return visitor.All;
}
function visitNode(visitor, node) {
    let handler = getNodeHandler(visitor, node.type);
    let enter;
    let exit;
    if (handler !== undefined) {
        enter = getEnterFunction(handler);
        exit = getExitFunction(handler);
    }
    let result;
    if (enter !== undefined) {
        result = enter(node);
    }
    if (result !== undefined && result !== null) {
        if (JSON.stringify(node) === JSON.stringify(result)) {
            result = undefined;
        } else if (Array.isArray(result)) {
            visitArray(visitor, result);
            return result;
        } else {
            return visitNode(visitor, result) || result;
        }
    }
    if (result === undefined) {
        let keys = _visitorKeys2.default[node.type];
        for (let i = 0; i < keys.length; i++) {
            let key = keys[i];
            // we know if it has child keys we can widen to a ParentNode
            visitKey(visitor, handler, node, key);
        }
        if (exit !== undefined) {
            result = exit(node);
        }
    }
    return result;
}
function get(node, key) {
    return node[key];
}
function set(node, key, value) {
    node[key] = value;
}
function visitKey(visitor, handler, node, key) {
    let value = get(node, key);
    if (!value) {
        return;
    }
    let keyEnter;
    let keyExit;
    if (handler !== undefined) {
        let keyHandler = getKeyHandler(handler, key);
        if (keyHandler !== undefined) {
            keyEnter = getEnterFunction(keyHandler);
            keyExit = getExitFunction(keyHandler);
        }
    }
    if (keyEnter !== undefined) {
        if (keyEnter(node, key) !== undefined) {
            throw (0, _errors.cannotReplaceOrRemoveInKeyHandlerYet)(node, key);
        }
    }
    if (Array.isArray(value)) {
        visitArray(visitor, value);
    } else {
        let result = visitNode(visitor, value);
        if (result !== undefined) {
            // TODO: dynamically check the results by having a table of
            // expected node types in value space, not just type space
            assignKey(node, key, value, result);
        }
    }
    if (keyExit !== undefined) {
        if (keyExit(node, key) !== undefined) {
            throw (0, _errors.cannotReplaceOrRemoveInKeyHandlerYet)(node, key);
        }
    }
}
function visitArray(visitor, array) {
    for (let i = 0; i < array.length; i++) {
        let result = visitNode(visitor, array[i]);
        if (result !== undefined) {
            i += spliceArray(array, i, result) - 1;
        }
    }
}
function assignKey(node, key, value, result) {
    if (result === null) {
        throw (0, _errors.cannotRemoveNode)(value, node, key);
    } else if (Array.isArray(result)) {
        if (result.length === 1) {
            set(node, key, result[0]);
        } else {
            if (result.length === 0) {
                throw (0, _errors.cannotRemoveNode)(value, node, key);
            } else {
                throw (0, _errors.cannotReplaceNode)(value, node, key);
            }
        }
    } else {
        set(node, key, result);
    }
}
function spliceArray(array, index, result) {
    if (result === null) {
        array.splice(index, 1);
        return 0;
    } else if (Array.isArray(result)) {
        array.splice(index, 1, ...result);
        return result.length;
    } else {
        array.splice(index, 1, result);
        return 1;
    }
}
function traverse(node, visitor) {
    visitNode(visitor, node);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL3RyYXZlcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O2tCQXFPYyxROzs7Ozs7QUFwT2Q7O0FBTUE7Ozs7QUFVQSxTQUFBLGdCQUFBLENBQUEsT0FBQSxFQUNnRDtBQUU5QyxRQUFJLE9BQUEsT0FBQSxLQUFKLFVBQUEsRUFBbUM7QUFDakMsZUFBQSxPQUFBO0FBREYsS0FBQSxNQUVPO0FBQ0wsZUFBTyxRQUFQLEtBQUE7QUFDRDtBQUNGO0FBTUQsU0FBQSxlQUFBLENBQUEsT0FBQSxFQUNnRDtBQUU5QyxRQUFJLE9BQUEsT0FBQSxLQUFKLFVBQUEsRUFBbUM7QUFDakMsZUFBQSxTQUFBO0FBREYsS0FBQSxNQUVPO0FBQ0wsZUFBTyxRQUFQLElBQUE7QUFDRDtBQUNGO0FBRUQsU0FBQSxhQUFBLENBQUEsT0FBQSxFQUFBLEdBQUEsRUFFUTtBQUVOLFFBQUksYUFBYSxPQUFBLE9BQUEsS0FBQSxVQUFBLEdBQWdDLFFBQWhDLElBQUEsR0FBakIsU0FBQTtBQUNBLFFBQUksZUFBSixTQUFBLEVBQThCO0FBRTlCLFFBQUksYUFBYSxXQUFqQixHQUFpQixDQUFqQjtBQUNBLFFBQUksZUFBSixTQUFBLEVBQThCO0FBQzVCLGVBQUEsVUFBQTtBQUNEO0FBQ0QsV0FBTyxXQUFQLEdBQUE7QUFDRDtBQU9ELFNBQUEsY0FBQSxDQUFBLE9BQUEsRUFBQSxRQUFBLEVBRXFCO0FBRW5CLFFBQUksYUFBQSxVQUFBLElBQTJCLGFBQS9CLE9BQUEsRUFBcUQ7QUFDbkQsWUFBSSxRQUFKLE9BQUEsRUFBcUI7QUFDbkIsZ0JBQUEsS0FBQSxFQUFhO0FBQUEseUJBQUEsQ0FBQSxLQUFBLElBQ1gscUJBRFcsTUFDWCxDQURXO0FBRVo7QUFFRCxtQkFBTyxRQUFQLE9BQUE7QUFDRDtBQUNGO0FBRUQsUUFBSSxVQUFVLFFBQWQsUUFBYyxDQUFkO0FBQ0EsUUFBSSxZQUFKLFNBQUEsRUFBMkI7QUFDekIsZUFBQSxPQUFBO0FBQ0Q7QUFDRCxXQUFPLFFBQVAsR0FBQTtBQUNEO0FBRUQsU0FBQSxTQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsRUFFUztBQUVQLFFBQUksVUFBNEIsZUFBQSxPQUFBLEVBQXdCLEtBQXhELElBQWdDLENBQWhDO0FBQ0EsUUFBQSxLQUFBO0FBQ0EsUUFBQSxJQUFBO0FBRUEsUUFBSSxZQUFKLFNBQUEsRUFBMkI7QUFDekIsZ0JBQVEsaUJBQVIsT0FBUSxDQUFSO0FBQ0EsZUFBTyxnQkFBUCxPQUFPLENBQVA7QUFDRDtBQUVELFFBQUEsTUFBQTtBQUNBLFFBQUksVUFBSixTQUFBLEVBQXlCO0FBQ3ZCLGlCQUFTLE1BQVQsSUFBUyxDQUFUO0FBQ0Q7QUFFRCxRQUFJLFdBQUEsU0FBQSxJQUF3QixXQUE1QixJQUFBLEVBQTZDO0FBQzNDLFlBQUksS0FBQSxTQUFBLENBQUEsSUFBQSxNQUF5QixLQUFBLFNBQUEsQ0FBN0IsTUFBNkIsQ0FBN0IsRUFBcUQ7QUFDbkQscUJBQUEsU0FBQTtBQURGLFNBQUEsTUFFTyxJQUFJLE1BQUEsT0FBQSxDQUFKLE1BQUksQ0FBSixFQUEyQjtBQUNoQyx1QkFBQSxPQUFBLEVBQUEsTUFBQTtBQUNBLG1CQUFBLE1BQUE7QUFGSyxTQUFBLE1BR0E7QUFDTCxtQkFBTyxVQUFBLE9BQUEsRUFBQSxNQUFBLEtBQVAsTUFBQTtBQUNEO0FBQ0Y7QUFFRCxRQUFJLFdBQUosU0FBQSxFQUEwQjtBQUN4QixZQUFJLE9BQU8sc0JBQVksS0FBdkIsSUFBVyxDQUFYO0FBRUEsYUFBSyxJQUFJLElBQVQsQ0FBQSxFQUFnQixJQUFJLEtBQXBCLE1BQUEsRUFBQSxHQUFBLEVBQXNDO0FBQ3BDLGdCQUFJLE1BQU0sS0FBVixDQUFVLENBQVY7QUFDQTtBQUNBLHFCQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUE7QUFDRDtBQUVELFlBQUksU0FBSixTQUFBLEVBQXdCO0FBQ3RCLHFCQUFTLEtBQVQsSUFBUyxDQUFUO0FBQ0Q7QUFDRjtBQUVELFdBQUEsTUFBQTtBQUNEO0FBRUQsU0FBQSxHQUFBLENBQUEsSUFBQSxFQUFBLEdBQUEsRUFFdUM7QUFFckMsV0FBUSxLQUFSLEdBQVEsQ0FBUjtBQUNEO0FBRUQsU0FBQSxHQUFBLENBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxLQUFBLEVBQWdGO0FBQzlFLFNBQUEsR0FBQSxJQUFBLEtBQUE7QUFDRDtBQUVELFNBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFJdUM7QUFFckMsUUFBSSxRQUFRLElBQUEsSUFBQSxFQUFaLEdBQVksQ0FBWjtBQUNBLFFBQUksQ0FBSixLQUFBLEVBQVk7QUFDVjtBQUNEO0FBRUQsUUFBQSxRQUFBO0FBQ0EsUUFBQSxPQUFBO0FBRUEsUUFBSSxZQUFKLFNBQUEsRUFBMkI7QUFDekIsWUFBSSxhQUFhLGNBQUEsT0FBQSxFQUFqQixHQUFpQixDQUFqQjtBQUNBLFlBQUksZUFBSixTQUFBLEVBQThCO0FBQzVCLHVCQUFXLGlCQUFYLFVBQVcsQ0FBWDtBQUNBLHNCQUFVLGdCQUFWLFVBQVUsQ0FBVjtBQUNEO0FBQ0Y7QUFFRCxRQUFJLGFBQUosU0FBQSxFQUE0QjtBQUMxQixZQUFJLFNBQUEsSUFBQSxFQUFBLEdBQUEsTUFBSixTQUFBLEVBQXVDO0FBQ3JDLGtCQUFNLGtEQUFBLElBQUEsRUFBTixHQUFNLENBQU47QUFDRDtBQUNGO0FBRUQsUUFBSSxNQUFBLE9BQUEsQ0FBSixLQUFJLENBQUosRUFBMEI7QUFDeEIsbUJBQUEsT0FBQSxFQUFBLEtBQUE7QUFERixLQUFBLE1BRU87QUFDTCxZQUFJLFNBQVMsVUFBQSxPQUFBLEVBQWIsS0FBYSxDQUFiO0FBQ0EsWUFBSSxXQUFKLFNBQUEsRUFBMEI7QUFDeEI7QUFDQTtBQUNBLHNCQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUE7QUFDRDtBQUNGO0FBRUQsUUFBSSxZQUFKLFNBQUEsRUFBMkI7QUFDekIsWUFBSSxRQUFBLElBQUEsRUFBQSxHQUFBLE1BQUosU0FBQSxFQUFzQztBQUNwQyxrQkFBTSxrREFBQSxJQUFBLEVBQU4sR0FBTSxDQUFOO0FBQ0Q7QUFDRjtBQUNGO0FBRUQsU0FBQSxVQUFBLENBQUEsT0FBQSxFQUFBLEtBQUEsRUFBMkQ7QUFDekQsU0FBSyxJQUFJLElBQVQsQ0FBQSxFQUFnQixJQUFJLE1BQXBCLE1BQUEsRUFBQSxHQUFBLEVBQXVDO0FBQ3JDLFlBQUksU0FBUyxVQUFBLE9BQUEsRUFBbUIsTUFBaEMsQ0FBZ0MsQ0FBbkIsQ0FBYjtBQUNBLFlBQUksV0FBSixTQUFBLEVBQTBCO0FBQ3hCLGlCQUFLLFlBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBLElBQUwsQ0FBQTtBQUNEO0FBQ0Y7QUFDRjtBQUVELFNBQUEsU0FBQSxDQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFJOEI7QUFFNUIsUUFBSSxXQUFKLElBQUEsRUFBcUI7QUFDbkIsY0FBTSw4QkFBQSxLQUFBLEVBQUEsSUFBQSxFQUFOLEdBQU0sQ0FBTjtBQURGLEtBQUEsTUFFTyxJQUFJLE1BQUEsT0FBQSxDQUFKLE1BQUksQ0FBSixFQUEyQjtBQUNoQyxZQUFJLE9BQUEsTUFBQSxLQUFKLENBQUEsRUFBeUI7QUFDdkIsZ0JBQUEsSUFBQSxFQUFBLEdBQUEsRUFBZSxPQUFmLENBQWUsQ0FBZjtBQURGLFNBQUEsTUFFTztBQUNMLGdCQUFJLE9BQUEsTUFBQSxLQUFKLENBQUEsRUFBeUI7QUFDdkIsc0JBQU0sOEJBQUEsS0FBQSxFQUFBLElBQUEsRUFBTixHQUFNLENBQU47QUFERixhQUFBLE1BRU87QUFDTCxzQkFBTSwrQkFBQSxLQUFBLEVBQUEsSUFBQSxFQUFOLEdBQU0sQ0FBTjtBQUNEO0FBQ0Y7QUFUSSxLQUFBLE1BVUE7QUFDTCxZQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsTUFBQTtBQUNEO0FBQ0Y7QUFFRCxTQUFBLFdBQUEsQ0FBQSxLQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBMkY7QUFDekYsUUFBSSxXQUFKLElBQUEsRUFBcUI7QUFDbkIsY0FBQSxNQUFBLENBQUEsS0FBQSxFQUFBLENBQUE7QUFDQSxlQUFBLENBQUE7QUFGRixLQUFBLE1BR08sSUFBSSxNQUFBLE9BQUEsQ0FBSixNQUFJLENBQUosRUFBMkI7QUFDaEMsY0FBQSxNQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsRUFBdUIsR0FBdkIsTUFBQTtBQUNBLGVBQU8sT0FBUCxNQUFBO0FBRkssS0FBQSxNQUdBO0FBQ0wsY0FBQSxNQUFBLENBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxNQUFBO0FBQ0EsZUFBQSxDQUFBO0FBQ0Q7QUFDRjtBQUVhLFNBQUEsUUFBQSxDQUFBLElBQUEsRUFBQSxPQUFBLEVBQXVEO0FBQ25FLGNBQUEsT0FBQSxFQUFBLElBQUE7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2aXNpdG9yS2V5cywgeyBWaXNpdG9yS2V5cywgVmlzaXRvcktleSB9IGZyb20gJy4uL3R5cGVzL3Zpc2l0b3Ita2V5cyc7XG5pbXBvcnQge1xuICBjYW5ub3RSZW1vdmVOb2RlLFxuICBjYW5ub3RSZXBsYWNlTm9kZSxcbiAgY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0LFxufSBmcm9tICcuL2Vycm9ycyc7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0IHsgZGVwcmVjYXRlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBERVZNT0RFIH0gZnJvbSAnQGdsaW1tZXIvbG9jYWwtZGVidWctZmxhZ3MnO1xuaW1wb3J0IHsgTm9kZUhhbmRsZXIsIE5vZGVWaXNpdG9yLCBLZXlIYW5kbGVyLCBOb2RlVHJhdmVyc2FsLCBLZXlUcmF2ZXJzYWwgfSBmcm9tICcuL3Zpc2l0b3InO1xuXG5mdW5jdGlvbiBnZXRFbnRlckZ1bmN0aW9uPE4gZXh0ZW5kcyBBU1QuTm9kZT4oXG4gIGhhbmRsZXI6IE5vZGVUcmF2ZXJzYWw8Tj5cbik6IE5vZGVIYW5kbGVyPE4+IHwgdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0RW50ZXJGdW5jdGlvbjxOIGV4dGVuZHMgQVNULk5vZGUsIEsgZXh0ZW5kcyBWaXNpdG9yS2V5PE4+PihcbiAgaGFuZGxlcjogS2V5VHJhdmVyc2FsPE4sIEs+XG4pOiBLZXlIYW5kbGVyPE4sIEs+IHwgdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0RW50ZXJGdW5jdGlvbjxOIGV4dGVuZHMgQVNULk5vZGUsIEsgZXh0ZW5kcyBWaXNpdG9yS2V5PE4+PihcbiAgaGFuZGxlcjogTm9kZVRyYXZlcnNhbDxOPiB8IEtleVRyYXZlcnNhbDxOLCBLPlxuKTogTm9kZUhhbmRsZXI8Tj4gfCBLZXlIYW5kbGVyPE4sIEs+IHwgdW5kZWZpbmVkIHtcbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGhhbmRsZXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGhhbmRsZXIuZW50ZXIgYXMgTm9kZUhhbmRsZXI8Tj4gfCBLZXlIYW5kbGVyPE4sIEs+O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEV4aXRGdW5jdGlvbjxOIGV4dGVuZHMgQVNULk5vZGU+KGhhbmRsZXI6IE5vZGVUcmF2ZXJzYWw8Tj4pOiBOb2RlSGFuZGxlcjxOPiB8IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGdldEV4aXRGdW5jdGlvbjxOIGV4dGVuZHMgQVNULk5vZGUsIEsgZXh0ZW5kcyBWaXNpdG9yS2V5PE4+PihcbiAgaGFuZGxlcjogS2V5VHJhdmVyc2FsPE4sIEs+XG4pOiBLZXlIYW5kbGVyPE4sIEs+IHwgdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0RXhpdEZ1bmN0aW9uPE4gZXh0ZW5kcyBBU1QuTm9kZSwgSyBleHRlbmRzIFZpc2l0b3JLZXk8Tj4+KFxuICBoYW5kbGVyOiBOb2RlVHJhdmVyc2FsPE4+IHwgS2V5VHJhdmVyc2FsPE4sIEs+XG4pOiBOb2RlSGFuZGxlcjxOPiB8IEtleUhhbmRsZXI8TiwgSz4gfCB1bmRlZmluZWQge1xuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBoYW5kbGVyLmV4aXQgYXMgTm9kZUhhbmRsZXI8Tj4gfCBLZXlIYW5kbGVyPE4sIEs+O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEtleUhhbmRsZXI8TiBleHRlbmRzIEFTVC5Ob2RlLCBLIGV4dGVuZHMgVmlzaXRvcktleTxOPj4oXG4gIGhhbmRsZXI6IE5vZGVUcmF2ZXJzYWw8Tj4sXG4gIGtleTogS1xuKTogS2V5VHJhdmVyc2FsPE4sIEs+IHwgS2V5VHJhdmVyc2FsPE4sIFZpc2l0b3JLZXk8Tj4+IHwgdW5kZWZpbmVkIHtcbiAgbGV0IGtleVZpc2l0b3IgPSB0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJyA/IGhhbmRsZXIua2V5cyA6IHVuZGVmaW5lZDtcbiAgaWYgKGtleVZpc2l0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gIGxldCBrZXlIYW5kbGVyID0ga2V5VmlzaXRvcltrZXldO1xuICBpZiAoa2V5SGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGtleUhhbmRsZXIgYXMgS2V5VHJhdmVyc2FsPE4sIEs+O1xuICB9XG4gIHJldHVybiBrZXlWaXNpdG9yLkFsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9kZUhhbmRsZXI8TiBleHRlbmRzIEFTVC5Ob2RlPihcbiAgdmlzaXRvcjogTm9kZVZpc2l0b3IsXG4gIG5vZGVUeXBlOiBOWyd0eXBlJ11cbik6IE5vZGVUcmF2ZXJzYWw8Tj47XG5mdW5jdGlvbiBnZXROb2RlSGFuZGxlcih2aXNpdG9yOiBOb2RlVmlzaXRvciwgbm9kZVR5cGU6ICdBbGwnKTogTm9kZVRyYXZlcnNhbDxBU1QuTm9kZT47XG5mdW5jdGlvbiBnZXROb2RlSGFuZGxlcjxOIGV4dGVuZHMgQVNULk5vZGU+KFxuICB2aXNpdG9yOiBOb2RlVmlzaXRvcixcbiAgbm9kZVR5cGU6IE5bJ3R5cGUnXVxuKTogTm9kZVRyYXZlcnNhbDxOPiB8IE5vZGVUcmF2ZXJzYWw8QVNULk5vZGU+IHwgdW5kZWZpbmVkIHtcbiAgaWYgKG5vZGVUeXBlID09PSAnVGVtcGxhdGUnIHx8IG5vZGVUeXBlID09PSAnQmxvY2snKSB7XG4gICAgaWYgKHZpc2l0b3IuUHJvZ3JhbSkge1xuICAgICAgaWYgKERFVk1PREUpIHtcbiAgICAgICAgZGVwcmVjYXRlKGBUT0RPYCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2aXNpdG9yLlByb2dyYW0gYXMgYW55O1xuICAgIH1cbiAgfVxuXG4gIGxldCBoYW5kbGVyID0gdmlzaXRvcltub2RlVHlwZV07XG4gIGlmIChoYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFuZGxlciBhcyBOb2RlVHJhdmVyc2FsPE4+O1xuICB9XG4gIHJldHVybiB2aXNpdG9yLkFsbDtcbn1cblxuZnVuY3Rpb24gdmlzaXROb2RlPE4gZXh0ZW5kcyBBU1QuTm9kZT4oXG4gIHZpc2l0b3I6IE5vZGVWaXNpdG9yLFxuICBub2RlOiBOXG4pOiBBU1QuTm9kZSB8IEFTVC5Ob2RlW10gfCB1bmRlZmluZWQgfCBudWxsIHwgdm9pZCB7XG4gIGxldCBoYW5kbGVyOiBOb2RlVHJhdmVyc2FsPE4+ID0gZ2V0Tm9kZUhhbmRsZXIodmlzaXRvciwgbm9kZS50eXBlKTtcbiAgbGV0IGVudGVyO1xuICBsZXQgZXhpdDtcblxuICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW50ZXIgPSBnZXRFbnRlckZ1bmN0aW9uKGhhbmRsZXIpO1xuICAgIGV4aXQgPSBnZXRFeGl0RnVuY3Rpb24oaGFuZGxlcik7XG4gIH1cblxuICBsZXQgcmVzdWx0OiBBU1QuTm9kZSB8IEFTVC5Ob2RlW10gfCB1bmRlZmluZWQgfCBudWxsIHwgdm9pZDtcbiAgaWYgKGVudGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXN1bHQgPSBlbnRlcihub2RlKTtcbiAgfVxuXG4gIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQgIT09IG51bGwpIHtcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkobm9kZSkgPT09IEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgdmlzaXRBcnJheSh2aXNpdG9yLCByZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZpc2l0Tm9kZSh2aXNpdG9yLCByZXN1bHQpIHx8IHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICBsZXQga2V5cyA9IHZpc2l0b3JLZXlzW25vZGUudHlwZV07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBrZXkgPSBrZXlzW2ldIGFzIFZpc2l0b3JLZXlzW05bJ3R5cGUnXV0gJiBrZXlvZiBOO1xuICAgICAgLy8gd2Uga25vdyBpZiBpdCBoYXMgY2hpbGQga2V5cyB3ZSBjYW4gd2lkZW4gdG8gYSBQYXJlbnROb2RlXG4gICAgICB2aXNpdEtleSh2aXNpdG9yLCBoYW5kbGVyLCBub2RlIGFzIE4sIGtleSk7XG4gICAgfVxuXG4gICAgaWYgKGV4aXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0ID0gZXhpdChub2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBnZXQ8TiBleHRlbmRzIEFTVC5Ob2RlPihcbiAgbm9kZTogTixcbiAga2V5OiBWaXNpdG9yS2V5c1tOWyd0eXBlJ11dICYga2V5b2YgTlxuKTogQVNULk5vZGUgfCBBU1QuTm9kZVtdIHtcbiAgcmV0dXJuIChub2RlW2tleV0gYXMgdW5rbm93bikgYXMgQVNULk5vZGUgfCBBU1QuTm9kZVtdO1xufVxuXG5mdW5jdGlvbiBzZXQ8TiBleHRlbmRzIEFTVC5Ob2RlLCBLIGV4dGVuZHMga2V5b2YgTj4obm9kZTogTiwga2V5OiBLLCB2YWx1ZTogTltLXSk6IHZvaWQge1xuICBub2RlW2tleV0gPSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gdmlzaXRLZXk8TiBleHRlbmRzIEFTVC5Ob2RlPihcbiAgdmlzaXRvcjogTm9kZVZpc2l0b3IsXG4gIGhhbmRsZXI6IE5vZGVUcmF2ZXJzYWw8Tj4sXG4gIG5vZGU6IE4sXG4gIGtleTogVmlzaXRvcktleXNbTlsndHlwZSddXSAmIGtleW9mIE5cbikge1xuICBsZXQgdmFsdWUgPSBnZXQobm9kZSwga2V5KTtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBrZXlFbnRlcjtcbiAgbGV0IGtleUV4aXQ7XG5cbiAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBrZXlIYW5kbGVyID0gZ2V0S2V5SGFuZGxlcihoYW5kbGVyLCBrZXkpO1xuICAgIGlmIChrZXlIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleUVudGVyID0gZ2V0RW50ZXJGdW5jdGlvbihrZXlIYW5kbGVyKTtcbiAgICAgIGtleUV4aXQgPSBnZXRFeGl0RnVuY3Rpb24oa2V5SGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleUVudGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoa2V5RW50ZXIobm9kZSwga2V5KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBjYW5ub3RSZXBsYWNlT3JSZW1vdmVJbktleUhhbmRsZXJZZXQobm9kZSwga2V5KTtcbiAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2aXNpdEFycmF5KHZpc2l0b3IsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcmVzdWx0ID0gdmlzaXROb2RlKHZpc2l0b3IsIHZhbHVlKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFRPRE86IGR5bmFtaWNhbGx5IGNoZWNrIHRoZSByZXN1bHRzIGJ5IGhhdmluZyBhIHRhYmxlIG9mXG4gICAgICAvLyBleHBlY3RlZCBub2RlIHR5cGVzIGluIHZhbHVlIHNwYWNlLCBub3QganVzdCB0eXBlIHNwYWNlXG4gICAgICBhc3NpZ25LZXkobm9kZSwga2V5LCB2YWx1ZSwgcmVzdWx0IGFzIGFueSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleUV4aXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChrZXlFeGl0KG5vZGUsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0KG5vZGUsIGtleSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZpc2l0QXJyYXkodmlzaXRvcjogTm9kZVZpc2l0b3IsIGFycmF5OiBBU1QuTm9kZVtdKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcmVzdWx0ID0gdmlzaXROb2RlKHZpc2l0b3IsIGFycmF5W2ldKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGkgKz0gc3BsaWNlQXJyYXkoYXJyYXksIGksIHJlc3VsdCkgLSAxO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NpZ25LZXk8TiBleHRlbmRzIEFTVC5Ob2RlLCBLIGV4dGVuZHMgVmlzaXRvcktleTxOPj4oXG4gIG5vZGU6IE4sXG4gIGtleTogSyxcbiAgdmFsdWU6IEFTVC5Ob2RlLFxuICByZXN1bHQ6IE5bS10gfCBbTltLXV0gfCBudWxsXG4pIHtcbiAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgIHRocm93IGNhbm5vdFJlbW92ZU5vZGUodmFsdWUsIG5vZGUsIGtleSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDEpIHtcbiAgICAgIHNldChub2RlLCBrZXksIHJlc3VsdFswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IGNhbm5vdFJlbW92ZU5vZGUodmFsdWUsIG5vZGUsIGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBjYW5ub3RSZXBsYWNlTm9kZSh2YWx1ZSwgbm9kZSwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc2V0KG5vZGUsIGtleSwgcmVzdWx0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzcGxpY2VBcnJheShhcnJheTogQVNULk5vZGVbXSwgaW5kZXg6IG51bWJlciwgcmVzdWx0OiBBU1QuTm9kZSB8IEFTVC5Ob2RlW10gfCBudWxsKSB7XG4gIGlmIChyZXN1bHQgPT09IG51bGwpIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAwO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSwgLi4ucmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEsIHJlc3VsdCk7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhdmVyc2Uobm9kZTogQVNULk5vZGUsIHZpc2l0b3I6IE5vZGVWaXNpdG9yKSB7XG4gIHZpc2l0Tm9kZSh2aXNpdG9yLCBub2RlKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=