import { Strategy, Context, InstrumentationSchema } from './strategies/strategy';
import Dependencies = require('./dependencies');
declare namespace Processor {
    interface Options {
        persist?: boolean | undefined;
    }
}
declare class Processor implements Strategy {
    processor: Strategy;
    persistent: boolean;
    constructor(options: Processor.Options);
    setStrategy(stringProcessor: Strategy): void;
    init(ctx: Context): void;
    processString(ctx: Context, contents: string, relativePath: string, forceInvalidation: boolean, instrumentation: InstrumentationSchema): string | Record<"output", string> | Promise<string | Record<"output", string>>;
    /**
     * Create the initial dependencies.
     * @param options options is used to pass the custom fs operations implementations
     */
    initialDependencies(rootFS: Dependencies.FSFacade, inputEncoding: string): Dependencies;
    /**
     * Seals the dependencies and captures the dependency state.
     * May cache the dependency information for the next process.
     * @param dependencies {Parameters<typeof defaultProcessor['sealDependencies']>[0]} The dependencies to seal.
     * @returns {void}
     */
    sealDependencies(dependencies: Dependencies): void;
}
export = Processor;
//# sourceMappingURL=processor.d.ts.map