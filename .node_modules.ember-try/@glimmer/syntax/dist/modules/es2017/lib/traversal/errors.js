const TraversalError = function () {
  TraversalError.prototype = Object.create(Error.prototype);
  TraversalError.prototype.constructor = TraversalError;

  function TraversalError(message, node, parent, key) {
    let error = Error.call(this, message);
    this.key = key;
    this.message = message;
    this.node = node;
    this.parent = parent;
    this.stack = error.stack;
  }

  return TraversalError;
}();

export default TraversalError;
export function cannotRemoveNode(node, parent, key) {
  return new TraversalError('Cannot remove a node unless it is part of an array', node, parent, key);
}
export function cannotReplaceNode(node, parent, key) {
  return new TraversalError('Cannot replace a node with multiple nodes unless it is part of an array', node, parent, key);
}
export function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
  return new TraversalError('Replacing and removing in key handlers is not yet supported.', node, null, key);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL2Vycm9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFlQSxNQUFNLGNBQWMsR0FBK0IsWUFBQTtBQUNqRCxFQUFBLGNBQWMsQ0FBQyxTQUFmLEdBQTJCLE1BQU0sQ0FBQyxNQUFQLENBQWMsS0FBSyxDQUFDLFNBQXBCLENBQTNCO0FBQ0EsRUFBQSxjQUFjLENBQUMsU0FBZixDQUF5QixXQUF6QixHQUF1QyxjQUF2Qzs7QUFFQSxXQUFTLGNBQVQsQ0FFRSxPQUZGLEVBR0UsSUFIRixFQUlFLE1BSkYsRUFLRSxHQUxGLEVBS2E7QUFFWCxRQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBTixDQUFXLElBQVgsRUFBaUIsT0FBakIsQ0FBWjtBQUVBLFNBQUssR0FBTCxHQUFXLEdBQVg7QUFDQSxTQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsU0FBSyxJQUFMLEdBQVksSUFBWjtBQUNBLFNBQUssTUFBTCxHQUFjLE1BQWQ7QUFDQSxTQUFLLEtBQUwsR0FBYSxLQUFLLENBQUMsS0FBbkI7QUFDRDs7QUFFRCxTQUFPLGNBQVA7QUFDRCxDQXJCaUQsRUFBbEQ7O0FBdUJBLGVBQWUsY0FBZjtBQUVBLE9BQU0sU0FBVSxnQkFBVixDQUEyQixJQUEzQixFQUEyQyxNQUEzQyxFQUE2RCxHQUE3RCxFQUF3RTtBQUM1RSxTQUFPLElBQUksY0FBSixDQUNMLG9EQURLLEVBRUwsSUFGSyxFQUdMLE1BSEssRUFJTCxHQUpLLENBQVA7QUFNRDtBQUVELE9BQU0sU0FBVSxpQkFBVixDQUE0QixJQUE1QixFQUE0QyxNQUE1QyxFQUE4RCxHQUE5RCxFQUF5RTtBQUM3RSxTQUFPLElBQUksY0FBSixDQUNMLHlFQURLLEVBRUwsSUFGSyxFQUdMLE1BSEssRUFJTCxHQUpLLENBQVA7QUFNRDtBQUVELE9BQU0sU0FBVSxvQ0FBVixDQUErQyxJQUEvQyxFQUErRCxHQUEvRCxFQUEwRTtBQUM5RSxTQUFPLElBQUksY0FBSixDQUNMLDhEQURLLEVBRUwsSUFGSyxFQUdMLElBSEssRUFJTCxHQUpLLENBQVA7QUFNRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tICcuLi90eXBlcy9ub2Rlcyc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmF2ZXJzYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3I6IFRyYXZlcnNhbEVycm9yQ29uc3RydWN0b3I7XG4gIGtleTogc3RyaW5nO1xuICBub2RlOiBBU1QuTm9kZTtcbiAgcGFyZW50OiBPcHRpb248QVNULk5vZGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYXZlcnNhbEVycm9yQ29uc3RydWN0b3Ige1xuICBuZXcgKG1lc3NhZ2U6IHN0cmluZywgbm9kZTogQVNULk5vZGUsIHBhcmVudDogT3B0aW9uPEFTVC5Ob2RlPiwga2V5OiBzdHJpbmcpOiBUcmF2ZXJzYWxFcnJvcjtcbiAgcmVhZG9ubHkgcHJvdG90eXBlOiBUcmF2ZXJzYWxFcnJvcjtcbn1cblxuY29uc3QgVHJhdmVyc2FsRXJyb3I6IFRyYXZlcnNhbEVycm9yQ29uc3RydWN0b3IgPSAoZnVuY3Rpb24gKCkge1xuICBUcmF2ZXJzYWxFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gIFRyYXZlcnNhbEVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRyYXZlcnNhbEVycm9yO1xuXG4gIGZ1bmN0aW9uIFRyYXZlcnNhbEVycm9yKFxuICAgIHRoaXM6IFRyYXZlcnNhbEVycm9yLFxuICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICBub2RlOiBBU1QuTm9kZSxcbiAgICBwYXJlbnQ6IE9wdGlvbjxBU1QuTm9kZT4sXG4gICAga2V5OiBzdHJpbmdcbiAgKSB7XG4gICAgbGV0IGVycm9yID0gRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gIH1cblxuICByZXR1cm4gVHJhdmVyc2FsRXJyb3IgYXMgYW55O1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgVHJhdmVyc2FsRXJyb3I7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5ub3RSZW1vdmVOb2RlKG5vZGU6IEFTVC5Ob2RlLCBwYXJlbnQ6IEFTVC5Ob2RlLCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgICdDYW5ub3QgcmVtb3ZlIGEgbm9kZSB1bmxlc3MgaXQgaXMgcGFydCBvZiBhbiBhcnJheScsXG4gICAgbm9kZSxcbiAgICBwYXJlbnQsXG4gICAga2V5XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5ub3RSZXBsYWNlTm9kZShub2RlOiBBU1QuTm9kZSwgcGFyZW50OiBBU1QuTm9kZSwga2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBUcmF2ZXJzYWxFcnJvcihcbiAgICAnQ2Fubm90IHJlcGxhY2UgYSBub2RlIHdpdGggbXVsdGlwbGUgbm9kZXMgdW5sZXNzIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXknLFxuICAgIG5vZGUsXG4gICAgcGFyZW50LFxuICAgIGtleVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0KG5vZGU6IEFTVC5Ob2RlLCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgICdSZXBsYWNpbmcgYW5kIHJlbW92aW5nIGluIGtleSBoYW5kbGVycyBpcyBub3QgeWV0IHN1cHBvcnRlZC4nLFxuICAgIG5vZGUsXG4gICAgbnVsbCxcbiAgICBrZXlcbiAgKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=