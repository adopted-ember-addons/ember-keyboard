var Walker = /*#__PURE__*/function () {
  function Walker(order) {
    this.order = order;
    this.stack = [];
  }

  var _proto = Walker.prototype;

  _proto.visit = function visit(node, callback) {
    if (!node) {
      return;
    }

    this.stack.push(node);

    if (this.order === 'post') {
      this.children(node, callback);
      callback(node, this);
    } else {
      callback(node, this);
      this.children(node, callback);
    }

    this.stack.pop();
  };

  _proto.children = function children(node, callback) {
    var type;

    if (node.type === 'Block' || node.type === 'Template' && visitors.Program) {
      type = 'Program';
    } else {
      type = node.type;
    }

    var visitor = visitors[type];

    if (visitor) {
      visitor(this, node, callback);
    }
  };

  return Walker;
}();

export { Walker as default };
var visitors = {
  Program: function Program(walker, node, callback) {
    for (var i = 0; i < node.body.length; i++) {
      walker.visit(node.body[i], callback);
    }
  },
  Template: function Template(walker, node, callback) {
    for (var i = 0; i < node.body.length; i++) {
      walker.visit(node.body[i], callback);
    }
  },
  Block: function Block(walker, node, callback) {
    for (var i = 0; i < node.body.length; i++) {
      walker.visit(node.body[i], callback);
    }
  },
  ElementNode: function ElementNode(walker, node, callback) {
    for (var i = 0; i < node.children.length; i++) {
      walker.visit(node.children[i], callback);
    }
  },
  BlockStatement: function BlockStatement(walker, node, callback) {
    walker.visit(node.program, callback);
    walker.visit(node.inverse || null, callback);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL3dhbGtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiSUFLYyxNO0FBRVosa0JBQUEsS0FBQSxFQUE4QjtBQUFYLFNBQUEsS0FBQSxHQUFBLEtBQUE7QUFEWixTQUFBLEtBQUEsR0FBQSxFQUFBO0FBQzJCOzs7O1NBRWxDLEssR0FBQSxlQUFLLElBQUwsRUFBSyxRQUFMLEVBQW9FO0FBQ2xFLFFBQUksQ0FBSixJQUFBLEVBQVc7QUFDVDtBQUNEOztBQUVELFNBQUEsS0FBQSxDQUFBLElBQUEsQ0FBQSxJQUFBOztBQUVBLFFBQUksS0FBQSxLQUFBLEtBQUosTUFBQSxFQUEyQjtBQUN6QixXQUFBLFFBQUEsQ0FBQSxJQUFBLEVBQUEsUUFBQTtBQUNBLE1BQUEsUUFBUSxDQUFBLElBQUEsRUFBUixJQUFRLENBQVI7QUFGRixLQUFBLE1BR087QUFDTCxNQUFBLFFBQVEsQ0FBQSxJQUFBLEVBQVIsSUFBUSxDQUFSO0FBQ0EsV0FBQSxRQUFBLENBQUEsSUFBQSxFQUFBLFFBQUE7QUFDRDs7QUFFRCxTQUFBLEtBQUEsQ0FBQSxHQUFBO0FBQ0QsRzs7U0FFRCxRLEdBQUEsa0JBQVEsSUFBUixFQUFRLFFBQVIsRUFBaUM7QUFDL0IsUUFBQSxJQUFBOztBQUNBLFFBQUksSUFBSSxDQUFKLElBQUEsS0FBQSxPQUFBLElBQTBCLElBQUksQ0FBSixJQUFBLEtBQUEsVUFBQSxJQUE0QixRQUFRLENBQWxFLE9BQUEsRUFBNkU7QUFDM0UsTUFBQSxJQUFJLEdBQUosU0FBQTtBQURGLEtBQUEsTUFFTztBQUNMLE1BQUEsSUFBSSxHQUFHLElBQUksQ0FBWCxJQUFBO0FBQ0Q7O0FBRUQsUUFBSSxPQUFPLEdBQUksUUFBZ0IsQ0FBL0IsSUFBK0IsQ0FBL0I7O0FBQ0EsUUFBQSxPQUFBLEVBQWE7QUFDWCxNQUFBLE9BQU8sQ0FBQSxJQUFBLEVBQUEsSUFBQSxFQUFQLFFBQU8sQ0FBUDtBQUNEO0FBQ0YsRzs7Ozs7U0FsQ1csTTtBQXFDZCxJQUFJLFFBQVEsR0FBRztBQUNiLEVBQUEsT0FEYSxtQkFDTixNQURNLEVBQ04sSUFETSxFQUNOLFFBRE0sRUFDOEQ7QUFDekUsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUosSUFBQSxDQUFwQixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsTUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixJQUFBLENBQWIsQ0FBYSxDQUFiLEVBQUEsUUFBQTtBQUNEO0FBSlUsR0FBQTtBQU9iLEVBQUEsUUFQYSxvQkFPTCxNQVBLLEVBT0wsSUFQSyxFQU9MLFFBUEssRUFPZ0U7QUFDM0UsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUosSUFBQSxDQUFwQixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsTUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixJQUFBLENBQWIsQ0FBYSxDQUFiLEVBQUEsUUFBQTtBQUNEO0FBVlUsR0FBQTtBQWFiLEVBQUEsS0FiYSxpQkFhUixNQWJRLEVBYVIsSUFiUSxFQWFSLFFBYlEsRUFhMEQ7QUFDckUsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUosSUFBQSxDQUFwQixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsTUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixJQUFBLENBQWIsQ0FBYSxDQUFiLEVBQUEsUUFBQTtBQUNEO0FBaEJVLEdBQUE7QUFtQmIsRUFBQSxXQW5CYSx1QkFtQkYsTUFuQkUsRUFtQkYsSUFuQkUsRUFtQkYsUUFuQkUsRUFtQnNFO0FBQ2pGLFNBQUssSUFBSSxDQUFDLEdBQVYsQ0FBQSxFQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFKLFFBQUEsQ0FBcEIsTUFBQSxFQUEwQyxDQUExQyxFQUFBLEVBQStDO0FBQzdDLE1BQUEsTUFBTSxDQUFOLEtBQUEsQ0FBYSxJQUFJLENBQUosUUFBQSxDQUFiLENBQWEsQ0FBYixFQUFBLFFBQUE7QUFDRDtBQXRCVSxHQUFBO0FBeUJiLEVBQUEsY0F6QmEsMEJBeUJDLE1BekJELEVBeUJDLElBekJELEVBeUJDLFFBekJELEVBeUI2RTtBQUN4RixJQUFBLE1BQU0sQ0FBTixLQUFBLENBQWEsSUFBSSxDQUFqQixPQUFBLEVBQUEsUUFBQTtBQUNBLElBQUEsTUFBTSxDQUFOLEtBQUEsQ0FBYSxJQUFJLENBQUosT0FBQSxJQUFiLElBQUEsRUFBQSxRQUFBO0FBQ0Q7QUE1QlksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0ICogYXMgQVNUIGZyb20gJy4uL3R5cGVzL25vZGVzJztcblxuZXhwb3J0IHR5cGUgTm9kZUNhbGxiYWNrPE4gZXh0ZW5kcyBBU1QuTm9kZT4gPSAobm9kZTogTiwgd2Fsa2VyOiBXYWxrZXIpID0+IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhbGtlciB7XG4gIHB1YmxpYyBzdGFjazogYW55W10gPSBbXTtcbiAgY29uc3RydWN0b3IocHVibGljIG9yZGVyPzogYW55KSB7fVxuXG4gIHZpc2l0PE4gZXh0ZW5kcyBBU1QuTm9kZT4obm9kZTogT3B0aW9uPE4+LCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPE4+KSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGFjay5wdXNoKG5vZGUpO1xuXG4gICAgaWYgKHRoaXMub3JkZXIgPT09ICdwb3N0Jykge1xuICAgICAgdGhpcy5jaGlsZHJlbihub2RlLCBjYWxsYmFjayk7XG4gICAgICBjYWxsYmFjayhub2RlLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sobm9kZSwgdGhpcyk7XG4gICAgICB0aGlzLmNoaWxkcmVuKG5vZGUsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICB9XG5cbiAgY2hpbGRyZW4obm9kZTogYW55LCBjYWxsYmFjazogYW55KSB7XG4gICAgbGV0IHR5cGU7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Jsb2NrJyB8fCAobm9kZS50eXBlID09PSAnVGVtcGxhdGUnICYmIHZpc2l0b3JzLlByb2dyYW0pKSB7XG4gICAgICB0eXBlID0gJ1Byb2dyYW0nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gbm9kZS50eXBlO1xuICAgIH1cblxuICAgIGxldCB2aXNpdG9yID0gKHZpc2l0b3JzIGFzIGFueSlbdHlwZV07XG4gICAgaWYgKHZpc2l0b3IpIHtcbiAgICAgIHZpc2l0b3IodGhpcywgbm9kZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgdmlzaXRvcnMgPSB7XG4gIFByb2dyYW0od2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5Qcm9ncmFtLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Ob2RlPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5ib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YWxrZXIudmlzaXQobm9kZS5ib2R5W2ldLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIFRlbXBsYXRlKHdhbGtlcjogV2Fsa2VyLCBub2RlOiBBU1QuVGVtcGxhdGUsIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULk5vZGU+KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdhbGtlci52aXNpdChub2RlLmJvZHlbaV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgQmxvY2sod2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5CbG9jaywgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxBU1QuTm9kZT4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgd2Fsa2VyLnZpc2l0KG5vZGUuYm9keVtpXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBFbGVtZW50Tm9kZSh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULkVsZW1lbnROb2RlLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Ob2RlPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgd2Fsa2VyLnZpc2l0KG5vZGUuY2hpbGRyZW5baV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgQmxvY2tTdGF0ZW1lbnQod2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5CbG9ja1N0YXRlbWVudCwgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxBU1QuQmxvY2s+KSB7XG4gICAgd2Fsa2VyLnZpc2l0KG5vZGUucHJvZ3JhbSwgY2FsbGJhY2spO1xuICAgIHdhbGtlci52aXNpdChub2RlLmludmVyc2UgfHwgbnVsbCwgY2FsbGJhY2spO1xuICB9LFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=