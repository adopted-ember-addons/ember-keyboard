function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

import { EventedTokenizer, EntityParser, HTML5NamedCharRefs as namedCharRefs } from 'simple-html-tokenizer';
import { assert } from '@glimmer/util';
export var Parser = /*#__PURE__*/function () {
  function Parser(source, entityParser, mode) {
    if (entityParser === void 0) {
      entityParser = new EntityParser(namedCharRefs);
    }

    if (mode === void 0) {
      mode = 'precompile';
    }

    this.elementStack = [];
    this.currentAttribute = null;
    this.currentNode = null;
    this.source = source.split(/(?:\r\n?|\n)/g);
    this.tokenizer = new EventedTokenizer(this, entityParser, mode);
  }

  var _proto = Parser.prototype;

  _proto.acceptTemplate = function acceptTemplate(node) {
    return this[node.type](node);
  };

  _proto.acceptNode = function acceptNode(node) {
    return this[node.type](node);
  };

  _proto.currentElement = function currentElement() {
    return this.elementStack[this.elementStack.length - 1];
  };

  _proto.sourceForNode = function sourceForNode(node, endNode) {
    var firstLine = node.loc.start.line - 1;
    var currentLine = firstLine - 1;
    var firstColumn = node.loc.start.column;
    var string = [];
    var line;
    var lastLine;
    var lastColumn;

    if (endNode) {
      lastLine = endNode.loc.end.line - 1;
      lastColumn = endNode.loc.end.column;
    } else {
      lastLine = node.loc.end.line - 1;
      lastColumn = node.loc.end.column;
    }

    while (currentLine < lastLine) {
      currentLine++;
      line = this.source[currentLine];

      if (currentLine === firstLine) {
        if (firstLine === lastLine) {
          string.push(line.slice(firstColumn, lastColumn));
        } else {
          string.push(line.slice(firstColumn));
        }
      } else if (currentLine === lastLine) {
        string.push(line.slice(0, lastColumn));
      } else {
        string.push(line);
      }
    }

    return string.join('\n');
  };

  _createClass(Parser, [{
    key: "currentAttr",
    get: function get() {
      return this.currentAttribute;
    }
  }, {
    key: "currentTag",
    get: function get() {
      var node = this.currentNode;
      false && assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');
      return node;
    }
  }, {
    key: "currentStartTag",
    get: function get() {
      var node = this.currentNode;
      false && assert(node && node.type === 'StartTag', 'expected start tag');
      return node;
    }
  }, {
    key: "currentEndTag",
    get: function get() {
      var node = this.currentNode;
      false && assert(node && node.type === 'EndTag', 'expected end tag');
      return node;
    }
  }, {
    key: "currentComment",
    get: function get() {
      var node = this.currentNode;
      false && assert(node && node.type === 'CommentStatement', 'expected a comment');
      return node;
    }
  }, {
    key: "currentData",
    get: function get() {
      var node = this.currentNode;
      false && assert(node && node.type === 'TextNode', 'expected a text node');
      return node;
    }
  }]);

  return Parser;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFBLGdCQUFBLEVBQUEsWUFBQSxFQUdFLGtCQUFrQixJQUhwQixhQUFBLFFBQUEsdUJBQUE7QUFRQSxTQUFBLE1BQUEsUUFBQSxlQUFBO0FBd0JBLFdBQU0sTUFBTjtBQVNFLGtCQUFBLE1BQUEsRUFFRSxZQUZGLEVBR0UsSUFIRixFQUcrQztBQUFBLFFBRDdDLFlBQzZDO0FBRDdDLE1BQUEsWUFDNkMsR0FEOUIsSUFBQSxZQUFBLENBRmpCLGFBRWlCLENBQzhCO0FBQUE7O0FBQUEsUUFBN0MsSUFBNkM7QUFBN0MsTUFBQSxJQUE2QyxHQUgvQyxZQUcrQztBQUFBOztBQVhyQyxTQUFBLFlBQUEsR0FBQSxFQUFBO0FBRUgsU0FBQSxnQkFBQSxHQUFBLElBQUE7QUFDQSxTQUFBLFdBQUEsR0FBQSxJQUFBO0FBVUwsU0FBQSxNQUFBLEdBQWMsTUFBTSxDQUFOLEtBQUEsQ0FBZCxlQUFjLENBQWQ7QUFDQSxTQUFBLFNBQUEsR0FBaUIsSUFBQSxnQkFBQSxDQUFBLElBQUEsRUFBQSxZQUFBLEVBQWpCLElBQWlCLENBQWpCO0FBQ0Q7O0FBaEJIOztBQUFBLFNBMkZFLGNBM0ZGLEdBMkZFLHdCQUFjLElBQWQsRUFBZ0M7QUFDOUIsV0FBUSxLQUFhLElBQUksQ0FBakIsSUFBQSxFQUFSLElBQVEsQ0FBUjtBQUNELEdBN0ZIOztBQUFBLFNBaUdFLFVBakdGLEdBaUdFLG9CQUFVLElBQVYsRUFBeUI7QUFDdkIsV0FBUSxLQUFhLElBQUksQ0FBakIsSUFBQSxFQUFSLElBQVEsQ0FBUjtBQUNELEdBbkdIOztBQUFBLFNBcUdFLGNBckdGLEdBcUdFLDBCQUFjO0FBQ1osV0FBTyxLQUFBLFlBQUEsQ0FBa0IsS0FBQSxZQUFBLENBQUEsTUFBQSxHQUF6QixDQUFPLENBQVA7QUFDRCxHQXZHSDs7QUFBQSxTQXlHRSxhQXpH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WCxXQUFBO0FBRGEsZUFFYixNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBSixJQUFBLEtBQVQsVUFBQSxFQUZPLHNCQUVQLENBRk87QUFHYixhQUFBLElBQUE7QUFDRDtBQXpGSDs7QUFBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRXZlbnRlZFRva2VuaXplcixcbiAgRW50aXR5UGFyc2VyLFxuICBIVE1MNU5hbWVkQ2hhclJlZnMgYXMgbmFtZWRDaGFyUmVmcyxcbn0gZnJvbSAnc2ltcGxlLWh0bWwtdG9rZW5pemVyJztcbmltcG9ydCAqIGFzIEFTVCBmcm9tICcuL3R5cGVzL25vZGVzJztcbmltcG9ydCAqIGFzIEhCUyBmcm9tICcuL3R5cGVzL2hhbmRsZWJhcnMtYXN0JztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBleHBlY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuZXhwb3J0IHR5cGUgRWxlbWVudCA9IEFTVC5UZW1wbGF0ZSB8IEFTVC5CbG9jayB8IEFTVC5FbGVtZW50Tm9kZTtcblxuZXhwb3J0IGludGVyZmFjZSBUYWc8VCBleHRlbmRzICdTdGFydFRhZycgfCAnRW5kVGFnJz4ge1xuICB0eXBlOiBUO1xuICBuYW1lOiBzdHJpbmc7XG4gIGF0dHJpYnV0ZXM6IGFueVtdO1xuICBtb2RpZmllcnM6IGFueVtdO1xuICBjb21tZW50czogYW55W107XG4gIHNlbGZDbG9zaW5nOiBib29sZWFuO1xuICBsb2M6IEFTVC5Tb3VyY2VMb2NhdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdHRyaWJ1dGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIHBhcnRzOiAoQVNULk11c3RhY2hlU3RhdGVtZW50IHwgQVNULlRleHROb2RlKVtdO1xuICBpc1F1b3RlZDogYm9vbGVhbjtcbiAgaXNEeW5hbWljOiBib29sZWFuO1xuICBzdGFydDogQVNULlBvc2l0aW9uO1xuICB2YWx1ZVN0YXJ0TGluZTogbnVtYmVyO1xuICB2YWx1ZVN0YXJ0Q29sdW1uOiBudW1iZXI7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQYXJzZXIge1xuICBwcm90ZWN0ZWQgZWxlbWVudFN0YWNrOiBFbGVtZW50W10gPSBbXTtcbiAgcHJpdmF0ZSBzb3VyY2U6IHN0cmluZ1tdO1xuICBwdWJsaWMgY3VycmVudEF0dHJpYnV0ZTogT3B0aW9uPEF0dHJpYnV0ZT4gPSBudWxsO1xuICBwdWJsaWMgY3VycmVudE5vZGU6IE9wdGlvbjxcbiAgICBBU1QuQ29tbWVudFN0YXRlbWVudCB8IEFTVC5UZXh0Tm9kZSB8IFRhZzwnU3RhcnRUYWcnIHwgJ0VuZFRhZyc+XG4gID4gPSBudWxsO1xuICBwdWJsaWMgdG9rZW5pemVyOiBFdmVudGVkVG9rZW5pemVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNvdXJjZTogc3RyaW5nLFxuICAgIGVudGl0eVBhcnNlciA9IG5ldyBFbnRpdHlQYXJzZXIobmFtZWRDaGFyUmVmcyksXG4gICAgbW9kZTogJ3ByZWNvbXBpbGUnIHwgJ2NvZGVtb2QnID0gJ3ByZWNvbXBpbGUnXG4gICkge1xuICAgIHRoaXMuc291cmNlID0gc291cmNlLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gICAgdGhpcy50b2tlbml6ZXIgPSBuZXcgRXZlbnRlZFRva2VuaXplcih0aGlzLCBlbnRpdHlQYXJzZXIsIG1vZGUpO1xuICB9XG5cbiAgYWJzdHJhY3QgUHJvZ3JhbShub2RlOiBIQlMuUHJvZ3JhbSk6IEhCUy5PdXRwdXQ8J1Byb2dyYW0nPjtcbiAgYWJzdHJhY3QgTXVzdGFjaGVTdGF0ZW1lbnQobm9kZTogSEJTLk11c3RhY2hlU3RhdGVtZW50KTogSEJTLk91dHB1dDwnTXVzdGFjaGVTdGF0ZW1lbnQnPjtcbiAgYWJzdHJhY3QgRGVjb3JhdG9yKG5vZGU6IEhCUy5EZWNvcmF0b3IpOiBIQlMuT3V0cHV0PCdEZWNvcmF0b3InPjtcbiAgYWJzdHJhY3QgQmxvY2tTdGF0ZW1lbnQobm9kZTogSEJTLkJsb2NrU3RhdGVtZW50KTogSEJTLk91dHB1dDwnQmxvY2tTdGF0ZW1lbnQnPjtcbiAgYWJzdHJhY3QgRGVjb3JhdG9yQmxvY2sobm9kZTogSEJTLkRlY29yYXRvckJsb2NrKTogSEJTLk91dHB1dDwnRGVjb3JhdG9yQmxvY2snPjtcbiAgYWJzdHJhY3QgUGFydGlhbFN0YXRlbWVudChub2RlOiBIQlMuUGFydGlhbFN0YXRlbWVudCk6IEhCUy5PdXRwdXQ8J1BhcnRpYWxTdGF0ZW1lbnQnPjtcbiAgYWJzdHJhY3QgUGFydGlhbEJsb2NrU3RhdGVtZW50KFxuICAgIG5vZGU6IEhCUy5QYXJ0aWFsQmxvY2tTdGF0ZW1lbnRcbiAgKTogSEJTLk91dHB1dDwnUGFydGlhbEJsb2NrU3RhdGVtZW50Jz47XG4gIGFic3RyYWN0IENvbnRlbnRTdGF0ZW1lbnQobm9kZTogSEJTLkNvbnRlbnRTdGF0ZW1lbnQpOiBIQlMuT3V0cHV0PCdDb250ZW50U3RhdGVtZW50Jz47XG4gIGFic3RyYWN0IENvbW1lbnRTdGF0ZW1lbnQobm9kZTogSEJTLkNvbW1lbnRTdGF0ZW1lbnQpOiBIQlMuT3V0cHV0PCdDb21tZW50U3RhdGVtZW50Jz47XG4gIGFic3RyYWN0IFN1YkV4cHJlc3Npb24obm9kZTogSEJTLlN1YkV4cHJlc3Npb24pOiBIQlMuT3V0cHV0PCdTdWJFeHByZXNzaW9uJz47XG4gIGFic3RyYWN0IFBhdGhFeHByZXNzaW9uKG5vZGU6IEhCUy5QYXRoRXhwcmVzc2lvbik6IEhCUy5PdXRwdXQ8J1BhdGhFeHByZXNzaW9uJz47XG4gIGFic3RyYWN0IFN0cmluZ0xpdGVyYWwobm9kZTogSEJTLlN0cmluZ0xpdGVyYWwpOiBIQlMuT3V0cHV0PCdTdHJpbmdMaXRlcmFsJz47XG4gIGFic3RyYWN0IEJvb2xlYW5MaXRlcmFsKG5vZGU6IEhCUy5Cb29sZWFuTGl0ZXJhbCk6IEhCUy5PdXRwdXQ8J0Jvb2xlYW5MaXRlcmFsJz47XG4gIGFic3RyYWN0IE51bWJlckxpdGVyYWwobm9kZTogSEJTLk51bWJlckxpdGVyYWwpOiBIQlMuT3V0cHV0PCdOdW1iZXJMaXRlcmFsJz47XG4gIGFic3RyYWN0IFVuZGVmaW5lZExpdGVyYWwobm9kZTogSEJTLlVuZGVmaW5lZExpdGVyYWwpOiBIQlMuT3V0cHV0PCdVbmRlZmluZWRMaXRlcmFsJz47XG4gIGFic3RyYWN0IE51bGxMaXRlcmFsKG5vZGU6IEhCUy5OdWxsTGl0ZXJhbCk6IEhCUy5PdXRwdXQ8J051bGxMaXRlcmFsJz47XG5cbiAgYWJzdHJhY3QgcmVzZXQoKTogdm9pZDtcbiAgYWJzdHJhY3QgZmluaXNoRGF0YSgpOiB2b2lkO1xuICBhYnN0cmFjdCB0YWdPcGVuKCk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luRGF0YSgpOiB2b2lkO1xuICBhYnN0cmFjdCBhcHBlbmRUb0RhdGEoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5TdGFydFRhZygpOiB2b2lkO1xuICBhYnN0cmFjdCBhcHBlbmRUb1RhZ05hbWUoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5BdHRyaWJ1dGUoKTogdm9pZDtcbiAgYWJzdHJhY3QgYXBwZW5kVG9BdHRyaWJ1dGVOYW1lKGNoYXI6IHN0cmluZyk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luQXR0cmlidXRlVmFsdWUocXVvdGVkOiBib29sZWFuKTogdm9pZDtcbiAgYWJzdHJhY3QgYXBwZW5kVG9BdHRyaWJ1dGVWYWx1ZShjaGFyOiBzdHJpbmcpOiB2b2lkO1xuICBhYnN0cmFjdCBmaW5pc2hBdHRyaWJ1dGVWYWx1ZSgpOiB2b2lkO1xuICBhYnN0cmFjdCBtYXJrVGFnQXNTZWxmQ2xvc2luZygpOiB2b2lkO1xuICBhYnN0cmFjdCBiZWdpbkVuZFRhZygpOiB2b2lkO1xuICBhYnN0cmFjdCBmaW5pc2hUYWcoKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5Db21tZW50KCk6IHZvaWQ7XG4gIGFic3RyYWN0IGFwcGVuZFRvQ29tbWVudERhdGEoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgZmluaXNoQ29tbWVudCgpOiB2b2lkO1xuICBhYnN0cmFjdCByZXBvcnRTeW50YXhFcnJvcihlcnJvcjogc3RyaW5nKTogdm9pZDtcblxuICBnZXQgY3VycmVudEF0dHIoKTogQXR0cmlidXRlIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuY3VycmVudEF0dHJpYnV0ZSwgJ2V4cGVjdGVkIGF0dHJpYnV0ZScpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUYWcoKTogVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiAobm9kZS50eXBlID09PSAnU3RhcnRUYWcnIHx8IG5vZGUudHlwZSA9PT0gJ0VuZFRhZycpLCAnZXhwZWN0ZWQgdGFnJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudFN0YXJ0VGFnKCk6IFRhZzwnU3RhcnRUYWcnPiB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1N0YXJ0VGFnJywgJ2V4cGVjdGVkIHN0YXJ0IHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnU3RhcnRUYWcnPjtcbiAgfVxuXG4gIGdldCBjdXJyZW50RW5kVGFnKCk6IFRhZzwnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdFbmRUYWcnLCAnZXhwZWN0ZWQgZW5kIHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudENvbW1lbnQoKTogQVNULkNvbW1lbnRTdGF0ZW1lbnQge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdDb21tZW50U3RhdGVtZW50JywgJ2V4cGVjdGVkIGEgY29tbWVudCcpO1xuICAgIHJldHVybiBub2RlIGFzIEFTVC5Db21tZW50U3RhdGVtZW50O1xuICB9XG5cbiAgZ2V0IGN1cnJlbnREYXRhKCk6IEFTVC5UZXh0Tm9kZSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1RleHROb2RlJywgJ2V4cGVjdGVkIGEgdGV4dCBub2RlJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgQVNULlRleHROb2RlO1xuICB9XG5cbiAgYWNjZXB0VGVtcGxhdGUobm9kZTogSEJTLlByb2dyYW0pOiBBU1QuVGVtcGxhdGUge1xuICAgIHJldHVybiAodGhpcyBhcyBhbnkpW25vZGUudHlwZV0obm9kZSkgYXMgQVNULlRlbXBsYXRlO1xuICB9XG5cbiAgYWNjZXB0Tm9kZShub2RlOiBIQlMuUHJvZ3JhbSk6IEFTVC5CbG9jayB8IEFTVC5UZW1wbGF0ZTtcbiAgYWNjZXB0Tm9kZTxVIGV4dGVuZHMgSEJTLk5vZGUgfCBBU1QuTm9kZT4obm9kZTogSEJTLk5vZGUpOiBVO1xuICBhY2NlcHROb2RlKG5vZGU6IEhCUy5Ob2RlKTogYW55IHtcbiAgICByZXR1cm4gKHRoaXMgYXMgYW55KVtub2RlLnR5cGVdKG5vZGUpO1xuICB9XG5cbiAgY3VycmVudEVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFN0YWNrW3RoaXMuZWxlbWVudFN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgc291cmNlRm9yTm9kZShub2RlOiBIQlMuTm9kZSwgZW5kTm9kZT86IHsgbG9jOiBIQlMuU291cmNlTG9jYXRpb24gfSk6IHN0cmluZyB7XG4gICAgbGV0IGZpcnN0TGluZSA9IG5vZGUubG9jLnN0YXJ0LmxpbmUgLSAxO1xuICAgIGxldCBjdXJyZW50TGluZSA9IGZpcnN0TGluZSAtIDE7XG4gICAgbGV0IGZpcnN0Q29sdW1uID0gbm9kZS5sb2Muc3RhcnQuY29sdW1uO1xuICAgIGxldCBzdHJpbmcgPSBbXTtcbiAgICBsZXQgbGluZTtcblxuICAgIGxldCBsYXN0TGluZTogbnVtYmVyO1xuICAgIGxldCBsYXN0Q29sdW1uOiBudW1iZXI7XG5cbiAgICBpZiAoZW5kTm9kZSkge1xuICAgICAgbGFzdExpbmUgPSBlbmROb2RlLmxvYy5lbmQubGluZSAtIDE7XG4gICAgICBsYXN0Q29sdW1uID0gZW5kTm9kZS5sb2MuZW5kLmNvbHVtbjtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdExpbmUgPSBub2RlLmxvYy5lbmQubGluZSAtIDE7XG4gICAgICBsYXN0Q29sdW1uID0gbm9kZS5sb2MuZW5kLmNvbHVtbjtcbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudExpbmUgPCBsYXN0TGluZSkge1xuICAgICAgY3VycmVudExpbmUrKztcbiAgICAgIGxpbmUgPSB0aGlzLnNvdXJjZVtjdXJyZW50TGluZV07XG5cbiAgICAgIGlmIChjdXJyZW50TGluZSA9PT0gZmlyc3RMaW5lKSB7XG4gICAgICAgIGlmIChmaXJzdExpbmUgPT09IGxhc3RMaW5lKSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZShmaXJzdENvbHVtbiwgbGFzdENvbHVtbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoZmlyc3RDb2x1bW4pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50TGluZSA9PT0gbGFzdExpbmUpIHtcbiAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZSgwLCBsYXN0Q29sdW1uKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHJpbmcucHVzaChsaW5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5nLmpvaW4oJ1xcbicpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9