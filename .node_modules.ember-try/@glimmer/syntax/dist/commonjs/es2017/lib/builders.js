"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLocSexp = isLocSexp;
exports.isParamsSexp = isParamsSexp;
exports.isHashSexp = isHashSexp;
exports.normalizeModifier = normalizeModifier;
exports.normalizeAttr = normalizeAttr;
exports.normalizeHash = normalizeHash;
exports.normalizeHead = normalizeHead;
exports.normalizeElementOptions = normalizeElementOptions;
exports.default = exports.SYNTHETIC = void 0;

var _util = require("@glimmer/util");

function buildMustache(path, params, hash, raw, loc, strip) {
  if (typeof path === 'string') {
    path = buildHead(path);
  }

  return {
    type: 'MustacheStatement',
    path,
    params: params || [],
    hash: hash || buildHash([]),
    escaped: !raw,
    loc: buildLoc(loc || null),
    strip: strip || {
      open: false,
      close: false
    }
  };
}

function buildBlock(path, params, hash, _defaultBlock, _elseBlock, loc, openStrip, inverseStrip, closeStrip) {
  let defaultBlock;
  let elseBlock;

  if (_defaultBlock.type === 'Template') {
    if (false
    /* LOCAL_DEBUG */
    ) {
        false && !false && (0, _util.deprecate)(`b.program is deprecated. Use b.blockItself instead.`);
      }

    defaultBlock = (0, _util.assign)({}, _defaultBlock, {
      type: 'Block'
    });
  } else {
    defaultBlock = _defaultBlock;
  }

  if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {
    if (false
    /* LOCAL_DEBUG */
    ) {
        false && !false && (0, _util.deprecate)(`b.program is deprecated. Use b.blockItself instead.`);
      }

    elseBlock = (0, _util.assign)({}, _elseBlock, {
      type: 'Block'
    });
  } else {
    elseBlock = _elseBlock;
  }

  return {
    type: 'BlockStatement',
    path: buildHead(path),
    params: params || [],
    hash: hash || buildHash([]),
    program: defaultBlock || null,
    inverse: elseBlock || null,
    loc: buildLoc(loc || null),
    openStrip: openStrip || {
      open: false,
      close: false
    },
    inverseStrip: inverseStrip || {
      open: false,
      close: false
    },
    closeStrip: closeStrip || {
      open: false,
      close: false
    }
  };
}

function buildElementModifier(path, params, hash, loc) {
  return {
    type: 'ElementModifierStatement',
    path: buildHead(path),
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function buildPartial(name, params, hash, indent, loc) {
  return {
    type: 'PartialStatement',
    name: name,
    params: params || [],
    hash: hash || buildHash([]),
    indent: indent || '',
    strip: {
      open: false,
      close: false
    },
    loc: buildLoc(loc || null)
  };
}

function buildComment(value, loc) {
  return {
    type: 'CommentStatement',
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildMustacheComment(value, loc) {
  return {
    type: 'MustacheCommentStatement',
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildConcat(parts, loc) {
  return {
    type: 'ConcatStatement',
    parts: parts || [],
    loc: buildLoc(loc || null)
  };
}

function isLocSexp(value) {
  return Array.isArray(value) && value.length === 2 && value[0] === 'loc';
}

function isParamsSexp(value) {
  return Array.isArray(value) && !isLocSexp(value);
}

function isHashSexp(value) {
  if (typeof value === 'object' && value && !Array.isArray(value)) {
    expectType(value);
    return true;
  } else {
    return false;
  }
}

function expectType(_input) {
  return;
}

function normalizeModifier(sexp) {
  if (typeof sexp === 'string') {
    return buildElementModifier(sexp);
  }

  let path = normalizeHead(sexp[0]);
  let params;
  let hash;
  let loc = null;
  let parts = sexp.slice(1);
  let next = parts.shift();

  _process: {
    if (isParamsSexp(next)) {
      params = next;
    } else {
      break _process;
    }

    next = parts.shift();

    if (isHashSexp(next)) {
      hash = normalizeHash(next);
    } else {
      break _process;
    }
  }

  if (isLocSexp(next)) {
    loc = next[1];
  }

  return {
    type: 'ElementModifierStatement',
    path,
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function normalizeAttr(sexp) {
  let name = sexp[0];
  let value;

  if (typeof sexp[1] === 'string') {
    value = buildText(sexp[1]);
  } else {
    value = sexp[1];
  }

  let loc = sexp[2] ? sexp[2][1] : undefined;
  return buildAttr(name, value, loc);
}

function normalizeHash(hash, loc) {
  let pairs = [];
  Object.keys(hash).forEach(key => {
    pairs.push(buildPair(key, hash[key]));
  });
  return buildHash(pairs, loc);
}

function normalizeHead(path) {
  if (typeof path === 'string') {
    return buildHead(path);
  } else {
    return buildHead(path[1], path[2] && path[2][1]);
  }
}

function normalizeElementOptions(...args) {
  let out = {};

  for (let arg of args) {
    switch (arg[0]) {
      case 'attrs':
        {
          let [, ...rest] = arg;
          out.attrs = rest.map(normalizeAttr);
          break;
        }

      case 'modifiers':
        {
          let [, ...rest] = arg;
          out.modifiers = rest.map(normalizeModifier);
          break;
        }

      case 'body':
        {
          let [, ...rest] = arg;
          out.children = rest;
          break;
        }

      case 'comments':
        {
          let [, ...rest] = arg;
          out.comments = rest;
          break;
        }

      case 'as':
        {
          let [, ...rest] = arg;
          out.blockParams = rest;
          break;
        }

      case 'loc':
        {
          let [, rest] = arg;
          out.loc = rest;
          break;
        }
    }
  }

  return out;
}

function buildElement(tag, options, ...rest) {
  let normalized;

  if (Array.isArray(options)) {
    normalized = normalizeElementOptions(options, ...rest);
  } else {
    normalized = options || {};
  }

  let {
    attrs,
    blockParams,
    modifiers,
    comments,
    children,
    loc
  } = normalized; // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST

  let selfClosing = false;

  if (typeof tag === 'object') {
    selfClosing = tag.selfClosing;
    tag = tag.name;
  } else {
    if (tag.slice(-1) === '/') {
      tag = tag.slice(0, -1);
      selfClosing = true;
    }
  }

  return {
    type: 'ElementNode',
    tag: tag || '',
    selfClosing: selfClosing,
    attributes: attrs || [],
    blockParams: blockParams || [],
    modifiers: modifiers || [],
    comments: comments || [],
    children: children || [],
    loc: buildLoc(loc || null)
  };
}

function buildAttr(name, value, loc) {
  return {
    type: 'AttrNode',
    name: name,
    value: value,
    loc: buildLoc(loc || null)
  };
}

function buildText(chars, loc) {
  return {
    type: 'TextNode',
    chars: chars || '',
    loc: buildLoc(loc || null)
  };
} // Expressions


function buildSexpr(path, params, hash, loc) {
  return {
    type: 'SubExpression',
    path: buildHead(path),
    params: params || [],
    hash: hash || buildHash([]),
    loc: buildLoc(loc || null)
  };
}

function buildHead(original, loc) {
  if (typeof original !== 'string') return original;
  let parts = original.split('.');
  let thisHead = false;

  if (parts[0] === 'this') {
    thisHead = true;
    parts = parts.slice(1);
  }

  return {
    type: 'PathExpression',
    original,
    this: thisHead,
    parts,
    data: false,
    loc: buildLoc(loc || null)
  };
}

function buildLiteral(type, value, loc) {
  return {
    type,
    value,
    original: value,
    loc: buildLoc(loc || null)
  };
} // Miscellaneous


function buildHash(pairs, loc) {
  return {
    type: 'Hash',
    pairs: pairs || [],
    loc: buildLoc(loc || null)
  };
}

function buildPair(key, value, loc) {
  return {
    type: 'HashPair',
    key: key,
    value,
    loc: buildLoc(loc || null)
  };
}

function buildProgram(body, blockParams, loc) {
  return {
    type: 'Template',
    body: body || [],
    blockParams: blockParams || [],
    loc: buildLoc(loc || null)
  };
}

function buildBlockItself(body, blockParams, chained = false, loc) {
  return {
    type: 'Block',
    body: body || [],
    blockParams: blockParams || [],
    chained,
    loc: buildLoc(loc || null)
  };
}

function buildTemplate(body, blockParams, loc) {
  return {
    type: 'Template',
    body: body || [],
    blockParams: blockParams || [],
    loc: buildLoc(loc || null)
  };
}

function buildSource(source) {
  return source || null;
}

function buildPosition(line, column) {
  return {
    line,
    column
  };
}

const SYNTHETIC = {
  source: '(synthetic)',
  start: {
    line: 1,
    column: 0
  },
  end: {
    line: 1,
    column: 0
  }
};
exports.SYNTHETIC = SYNTHETIC;

function buildLoc(...args) {
  if (args.length === 1) {
    let loc = args[0];

    if (loc && typeof loc === 'object') {
      return {
        source: buildSource(loc.source),
        start: buildPosition(loc.start.line, loc.start.column),
        end: buildPosition(loc.end.line, loc.end.column)
      };
    } else {
      return SYNTHETIC;
    }
  } else {
    let [startLine, startColumn, endLine, endColumn, source] = args;
    return {
      source: buildSource(source),
      start: buildPosition(startLine, startColumn),
      end: buildPosition(endLine, endColumn)
    };
  }
}

var _default = {
  mustache: buildMustache,
  block: buildBlock,
  partial: buildPartial,
  comment: buildComment,
  mustacheComment: buildMustacheComment,
  element: buildElement,
  elementModifier: buildElementModifier,
  attr: buildAttr,
  text: buildText,
  sexpr: buildSexpr,
  path: buildHead,
  concat: buildConcat,
  hash: buildHash,
  pair: buildPair,
  literal: buildLiteral,
  program: buildProgram,
  blockItself: buildBlockItself,
  template: buildTemplate,
  loc: buildLoc,
  pos: buildPosition,
  string: literal('StringLiteral'),
  boolean: literal('BooleanLiteral'),
  number: literal('NumberLiteral'),

  undefined() {
    return buildLiteral('UndefinedLiteral', undefined);
  },

  null() {
    return buildLiteral('NullLiteral', null);
  }

};
exports.default = _default;

function literal(type) {
  return function (value) {
    return buildLiteral(type, value);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,