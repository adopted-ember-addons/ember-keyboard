"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Walker {
  constructor(order) {
    this.order = order;
    this.stack = [];
  }

  visit(node, callback) {
    if (!node) {
      return;
    }

    this.stack.push(node);

    if (this.order === 'post') {
      this.children(node, callback);
      callback(node, this);
    } else {
      callback(node, this);
      this.children(node, callback);
    }

    this.stack.pop();
  }

  children(node, callback) {
    let type;

    if (node.type === 'Block' || node.type === 'Template' && visitors.Program) {
      type = 'Program';
    } else {
      type = node.type;
    }

    let visitor = visitors[type];

    if (visitor) {
      visitor(this, node, callback);
    }
  }

}

exports.default = Walker;
let visitors = {
  Program(walker, node, callback) {
    for (let i = 0; i < node.body.length; i++) {
      walker.visit(node.body[i], callback);
    }
  },

  Template(walker, node, callback) {
    for (let i = 0; i < node.body.length; i++) {
      walker.visit(node.body[i], callback);
    }
  },

  Block(walker, node, callback) {
    for (let i = 0; i < node.body.length; i++) {
      walker.visit(node.body[i], callback);
    }
  },

  ElementNode(walker, node, callback) {
    for (let i = 0; i < node.children.length; i++) {
      walker.visit(node.children[i], callback);
    }
  },

  BlockStatement(walker, node, callback) {
    walker.visit(node.program, callback);
    walker.visit(node.inverse || null, callback);
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3N5bnRheC9saWIvdHJhdmVyc2FsL3dhbGtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBS2MsTUFBQSxNQUFBLENBQWE7QUFFekIsRUFBQSxXQUFBLENBQUEsS0FBQSxFQUE4QjtBQUFYLFNBQUEsS0FBQSxHQUFBLEtBQUE7QUFEWixTQUFBLEtBQUEsR0FBQSxFQUFBO0FBQzJCOztBQUVsQyxFQUFBLEtBQUssQ0FBQSxJQUFBLEVBQUEsUUFBQSxFQUErRDtBQUNsRSxRQUFJLENBQUosSUFBQSxFQUFXO0FBQ1Q7QUFDRDs7QUFFRCxTQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsSUFBQTs7QUFFQSxRQUFJLEtBQUEsS0FBQSxLQUFKLE1BQUEsRUFBMkI7QUFDekIsV0FBQSxRQUFBLENBQUEsSUFBQSxFQUFBLFFBQUE7QUFDQSxNQUFBLFFBQVEsQ0FBQSxJQUFBLEVBQVIsSUFBUSxDQUFSO0FBRkYsS0FBQSxNQUdPO0FBQ0wsTUFBQSxRQUFRLENBQUEsSUFBQSxFQUFSLElBQVEsQ0FBUjtBQUNBLFdBQUEsUUFBQSxDQUFBLElBQUEsRUFBQSxRQUFBO0FBQ0Q7O0FBRUQsU0FBQSxLQUFBLENBQUEsR0FBQTtBQUNEOztBQUVELEVBQUEsUUFBUSxDQUFBLElBQUEsRUFBQSxRQUFBLEVBQXlCO0FBQy9CLFFBQUEsSUFBQTs7QUFDQSxRQUFJLElBQUksQ0FBSixJQUFBLEtBQUEsT0FBQSxJQUEwQixJQUFJLENBQUosSUFBQSxLQUFBLFVBQUEsSUFBNEIsUUFBUSxDQUFsRSxPQUFBLEVBQTZFO0FBQzNFLE1BQUEsSUFBSSxHQUFKLFNBQUE7QUFERixLQUFBLE1BRU87QUFDTCxNQUFBLElBQUksR0FBRyxJQUFJLENBQVgsSUFBQTtBQUNEOztBQUVELFFBQUksT0FBTyxHQUFJLFFBQWdCLENBQS9CLElBQStCLENBQS9COztBQUNBLFFBQUEsT0FBQSxFQUFhO0FBQ1gsTUFBQSxPQUFPLENBQUEsSUFBQSxFQUFBLElBQUEsRUFBUCxRQUFPLENBQVA7QUFDRDtBQUNGOztBQWxDd0I7OztBQXFDM0IsSUFBSSxRQUFRLEdBQUc7QUFDYixFQUFBLE9BQU8sQ0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBb0U7QUFDekUsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUosSUFBQSxDQUFwQixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsTUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixJQUFBLENBQWIsQ0FBYSxDQUFiLEVBQUEsUUFBQTtBQUNEO0FBSlUsR0FBQTs7QUFPYixFQUFBLFFBQVEsQ0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBcUU7QUFDM0UsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUosSUFBQSxDQUFwQixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsTUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixJQUFBLENBQWIsQ0FBYSxDQUFiLEVBQUEsUUFBQTtBQUNEO0FBVlUsR0FBQTs7QUFhYixFQUFBLEtBQUssQ0FBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFFBQUEsRUFBa0U7QUFDckUsU0FBSyxJQUFJLENBQUMsR0FBVixDQUFBLEVBQWdCLENBQUMsR0FBRyxJQUFJLENBQUosSUFBQSxDQUFwQixNQUFBLEVBQXNDLENBQXRDLEVBQUEsRUFBMkM7QUFDekMsTUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixJQUFBLENBQWIsQ0FBYSxDQUFiLEVBQUEsUUFBQTtBQUNEO0FBaEJVLEdBQUE7O0FBbUJiLEVBQUEsV0FBVyxDQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsUUFBQSxFQUF3RTtBQUNqRixTQUFLLElBQUksQ0FBQyxHQUFWLENBQUEsRUFBZ0IsQ0FBQyxHQUFHLElBQUksQ0FBSixRQUFBLENBQXBCLE1BQUEsRUFBMEMsQ0FBMUMsRUFBQSxFQUErQztBQUM3QyxNQUFBLE1BQU0sQ0FBTixLQUFBLENBQWEsSUFBSSxDQUFKLFFBQUEsQ0FBYixDQUFhLENBQWIsRUFBQSxRQUFBO0FBQ0Q7QUF0QlUsR0FBQTs7QUF5QmIsRUFBQSxjQUFjLENBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQTRFO0FBQ3hGLElBQUEsTUFBTSxDQUFOLEtBQUEsQ0FBYSxJQUFJLENBQWpCLE9BQUEsRUFBQSxRQUFBO0FBQ0EsSUFBQSxNQUFNLENBQU4sS0FBQSxDQUFhLElBQUksQ0FBSixPQUFBLElBQWIsSUFBQSxFQUFBLFFBQUE7QUFDRDs7QUE1QlksQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0ICogYXMgQVNUIGZyb20gJy4uL3R5cGVzL25vZGVzJztcblxuZXhwb3J0IHR5cGUgTm9kZUNhbGxiYWNrPE4gZXh0ZW5kcyBBU1QuTm9kZT4gPSAobm9kZTogTiwgd2Fsa2VyOiBXYWxrZXIpID0+IHZvaWQ7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdhbGtlciB7XG4gIHB1YmxpYyBzdGFjazogYW55W10gPSBbXTtcbiAgY29uc3RydWN0b3IocHVibGljIG9yZGVyPzogYW55KSB7fVxuXG4gIHZpc2l0PE4gZXh0ZW5kcyBBU1QuTm9kZT4obm9kZTogT3B0aW9uPE4+LCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPE4+KSB7XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGFjay5wdXNoKG5vZGUpO1xuXG4gICAgaWYgKHRoaXMub3JkZXIgPT09ICdwb3N0Jykge1xuICAgICAgdGhpcy5jaGlsZHJlbihub2RlLCBjYWxsYmFjayk7XG4gICAgICBjYWxsYmFjayhub2RlLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sobm9kZSwgdGhpcyk7XG4gICAgICB0aGlzLmNoaWxkcmVuKG5vZGUsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICB9XG5cbiAgY2hpbGRyZW4obm9kZTogYW55LCBjYWxsYmFjazogYW55KSB7XG4gICAgbGV0IHR5cGU7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ0Jsb2NrJyB8fCAobm9kZS50eXBlID09PSAnVGVtcGxhdGUnICYmIHZpc2l0b3JzLlByb2dyYW0pKSB7XG4gICAgICB0eXBlID0gJ1Byb2dyYW0nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gbm9kZS50eXBlO1xuICAgIH1cblxuICAgIGxldCB2aXNpdG9yID0gKHZpc2l0b3JzIGFzIGFueSlbdHlwZV07XG4gICAgaWYgKHZpc2l0b3IpIHtcbiAgICAgIHZpc2l0b3IodGhpcywgbm9kZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfVxufVxuXG5sZXQgdmlzaXRvcnMgPSB7XG4gIFByb2dyYW0od2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5Qcm9ncmFtLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Ob2RlPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5ib2R5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB3YWxrZXIudmlzaXQobm9kZS5ib2R5W2ldLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIFRlbXBsYXRlKHdhbGtlcjogV2Fsa2VyLCBub2RlOiBBU1QuVGVtcGxhdGUsIGNhbGxiYWNrOiBOb2RlQ2FsbGJhY2s8QVNULk5vZGU+KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHdhbGtlci52aXNpdChub2RlLmJvZHlbaV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgQmxvY2sod2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5CbG9jaywgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxBU1QuTm9kZT4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgd2Fsa2VyLnZpc2l0KG5vZGUuYm9keVtpXSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSxcblxuICBFbGVtZW50Tm9kZSh3YWxrZXI6IFdhbGtlciwgbm9kZTogQVNULkVsZW1lbnROb2RlLCBjYWxsYmFjazogTm9kZUNhbGxiYWNrPEFTVC5Ob2RlPikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgd2Fsa2VyLnZpc2l0KG5vZGUuY2hpbGRyZW5baV0sIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0sXG5cbiAgQmxvY2tTdGF0ZW1lbnQod2Fsa2VyOiBXYWxrZXIsIG5vZGU6IEFTVC5CbG9ja1N0YXRlbWVudCwgY2FsbGJhY2s6IE5vZGVDYWxsYmFjazxBU1QuQmxvY2s+KSB7XG4gICAgd2Fsa2VyLnZpc2l0KG5vZGUucHJvZ3JhbSwgY2FsbGJhY2spO1xuICAgIHdhbGtlci52aXNpdChub2RlLmludmVyc2UgfHwgbnVsbCwgY2FsbGJhY2spO1xuICB9LFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=