"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isHandle = isHandle;
exports.isNonPrimitiveHandle = isNonPrimitiveHandle;
exports.constants = constants;
exports.isSmallInt = isSmallInt;
exports.encodeNegative = encodeNegative;
exports.decodeNegative = decodeNegative;
exports.encodePositive = encodePositive;
exports.decodePositive = decodePositive;
exports.encodeHandle = encodeHandle;
exports.decodeHandle = decodeHandle;
exports.encodeImmediate = encodeImmediate;
exports.decodeImmediate = decodeImmediate;

var _assert = require("./assert");

function isHandle(value) {
  return value >= 0;
}

function isNonPrimitiveHandle(value) {
  return value > 3
  /* ENCODED_UNDEFINED_HANDLE */
  ;
}

function constants(...values) {
  return [false, true, null, undefined, ...values];
}

function isSmallInt(value) {
  return value % 1 === 0 && value <= 536870911
  /* MAX_INT */
  && value >= -536870912
  /* MIN_INT */
  ;
}

function encodeNegative(num) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      (0, _assert.debugAssert)(num % 1 === 0 && num >= -536870912
      /* MIN_INT */
      && num < 0, `Could not encode negative: ${num}`);
    }

  return num & -536870913
  /* SIGN_BIT */
  ;
}

function decodeNegative(num) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      (0, _assert.debugAssert)(num % 1 === 0 && num < ~536870911
      /* MAX_INT */
      && num >= -1073741824
      /* MIN_SMI */
      , `Could not decode negative: ${num}`);
    }

  return num | ~-536870913
  /* SIGN_BIT */
  ;
}

function encodePositive(num) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      (0, _assert.debugAssert)(num % 1 === 0 && num >= 0 && num <= 536870911
      /* MAX_INT */
      , `Could not encode positive: ${num}`);
    }

  return ~num;
}

function decodePositive(num) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      (0, _assert.debugAssert)(num % 1 === 0 && num <= 0 && num >= ~536870911
      /* MAX_INT */
      , `Could not decode positive: ${num}`);
    }

  return ~num;
}

function encodeHandle(num) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      (0, _assert.debugAssert)(num % 1 === 0 && num >= 0 && num <= 1073741823
      /* MAX_SMI */
      , `Could not encode handle: ${num}`);
    }

  return num;
}

function decodeHandle(num) {
  if (false
  /* LOCAL_DEBUG */
  ) {
      (0, _assert.debugAssert)(num % 1 === 0 && num <= 1073741823
      /* MAX_SMI */
      && num >= 0, `Could not decode handle: ${num}`);
    }

  return num;
}

function encodeImmediate(num) {
  num |= 0;
  return num < 0 ? encodeNegative(num) : encodePositive(num);
}

function decodeImmediate(num) {
  num |= 0;
  return num > -536870913
  /* SIGN_BIT */
  ? decodePositive(num) : decodeNegative(num);
} // Warm


[1, 2, 3].forEach(x => decodeHandle(encodeHandle(x)));
[1, -1].forEach(x => decodeImmediate(encodeImmediate(x)));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,