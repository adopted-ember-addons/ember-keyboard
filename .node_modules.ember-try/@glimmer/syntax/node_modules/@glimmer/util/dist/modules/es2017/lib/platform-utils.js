export const HAS_NATIVE_SYMBOL = function () {
  if (typeof Symbol !== 'function') {
    return false;
  } // eslint-disable-next-line symbol-description


  return typeof Symbol() === 'symbol';
}();
export function keys(obj) {
  return Object.keys(obj);
}
export function unwrap(val) {
  if (val === null || val === undefined) throw new Error(`Expected value to be present`);
  return val;
}
export function expect(val, message) {
  if (val === null || val === undefined) throw new Error(message);
  return val;
}
export function unreachable(message = 'unreachable') {
  return new Error(message);
}
export function exhausted(value) {
  throw new Error(`Exhausted ${value}`);
}
export const tuple = (...args) => args;
export const symbol = HAS_NATIVE_SYMBOL ? Symbol : key => `__${key}${Math.floor(Math.random() * Date.now())}__`;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL3BsYXRmb3JtLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sTUFBTSxpQkFBaUIsR0FBSSxZQUFBO0FBQ2hDLE1BQUksT0FBTyxNQUFQLEtBQWtCLFVBQXRCLEVBQWtDO0FBQ2hDLFdBQU8sS0FBUDtBQUNELEdBSCtCLENBS2hDOzs7QUFDQSxTQUFPLE9BQU8sTUFBTSxFQUFiLEtBQW9CLFFBQTNCO0FBQ0QsQ0FQZ0MsRUFBMUI7QUFTUCxPQUFNLFNBQVUsSUFBVixDQUFrQixHQUFsQixFQUF3QjtBQUM1QixTQUFPLE1BQU0sQ0FBQyxJQUFQLENBQVksR0FBWixDQUFQO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsTUFBVixDQUFvQixHQUFwQixFQUFpQztBQUNyQyxNQUFJLEdBQUcsS0FBSyxJQUFSLElBQWdCLEdBQUcsS0FBSyxTQUE1QixFQUF1QyxNQUFNLElBQUksS0FBSixDQUFVLDhCQUFWLENBQU47QUFDdkMsU0FBTyxHQUFQO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsTUFBVixDQUFvQixHQUFwQixFQUFtQyxPQUFuQyxFQUFrRDtBQUN0RCxNQUFJLEdBQUcsS0FBSyxJQUFSLElBQWdCLEdBQUcsS0FBSyxTQUE1QixFQUF1QyxNQUFNLElBQUksS0FBSixDQUFVLE9BQVYsQ0FBTjtBQUN2QyxTQUFPLEdBQVA7QUFDRDtBQUVELE9BQU0sU0FBVSxXQUFWLENBQXNCLE9BQU8sR0FBRyxhQUFoQyxFQUE2QztBQUNqRCxTQUFPLElBQUksS0FBSixDQUFVLE9BQVYsQ0FBUDtBQUNEO0FBRUQsT0FBTSxTQUFVLFNBQVYsQ0FBb0IsS0FBcEIsRUFBZ0M7QUFDcEMsUUFBTSxJQUFJLEtBQUosQ0FBVSxhQUFhLEtBQUssRUFBNUIsQ0FBTjtBQUNEO0FBSUQsT0FBTyxNQUFNLEtBQUssR0FBRyxDQUFrQixHQUFHLElBQXJCLEtBQWlDLElBQS9DO0FBRVAsT0FBTyxNQUFNLE1BQU0sR0FBRyxpQkFBaUIsR0FDbkMsTUFEbUMsR0FFbEMsR0FBRCxJQUFpQixLQUFLLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxNQUFMLEtBQWdCLElBQUksQ0FBQyxHQUFMLEVBQTNCLENBQXNDLElBRi9EIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgT3B0aW9uPFQ+ID0gVCB8IG51bGw7XG5leHBvcnQgdHlwZSBNYXliZTxUPiA9IE9wdGlvbjxUPiB8IHVuZGVmaW5lZCB8IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEZhY3Rvcnk8VD4gPSBuZXcgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gVDtcblxuZXhwb3J0IGNvbnN0IEhBU19OQVRJVkVfU1lNQk9MID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgc3ltYm9sLWRlc2NyaXB0aW9uXG4gIHJldHVybiB0eXBlb2YgU3ltYm9sKCkgPT09ICdzeW1ib2wnO1xufSkoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGtleXM8VD4ob2JqOiBUKTogQXJyYXk8a2V5b2YgVD4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKSBhcyBBcnJheTxrZXlvZiBUPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcDxUPih2YWw6IE1heWJlPFQ+KTogVCB7XG4gIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsdWUgdG8gYmUgcHJlc2VudGApO1xuICByZXR1cm4gdmFsIGFzIFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBlY3Q8VD4odmFsOiBNYXliZTxUPiwgbWVzc2FnZTogc3RyaW5nKTogVCB7XG4gIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIHZhbCBhcyBUO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5yZWFjaGFibGUobWVzc2FnZSA9ICd1bnJlYWNoYWJsZScpOiBFcnJvciB7XG4gIHJldHVybiBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGhhdXN0ZWQodmFsdWU6IG5ldmVyKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoYEV4aGF1c3RlZCAke3ZhbHVlfWApO1xufVxuXG5leHBvcnQgdHlwZSBMaXQgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgdW5kZWZpbmVkIHwgbnVsbCB8IHZvaWQgfCB7fTtcblxuZXhwb3J0IGNvbnN0IHR1cGxlID0gPFQgZXh0ZW5kcyBMaXRbXT4oLi4uYXJnczogVCkgPT4gYXJncztcblxuZXhwb3J0IGNvbnN0IHN5bWJvbCA9IEhBU19OQVRJVkVfU1lNQk9MXG4gID8gU3ltYm9sXG4gIDogKGtleTogc3RyaW5nKSA9PiBgX18ke2tleX0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIERhdGUubm93KCkpfV9fYCBhcyBhbnk7XG4iXSwic291cmNlUm9vdCI6IiJ9