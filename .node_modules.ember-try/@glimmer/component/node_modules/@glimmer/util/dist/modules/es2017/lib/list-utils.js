import { DROP, destructor, CHILDREN } from './lifetimes';
export class ListNode {
    constructor(value) {
        this.next = null;
        this.prev = null;
        this.value = value;
    }
}
export class LinkedList {
    constructor() {
        this.clear();
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    clear() {
        this._head = this._tail = null;
    }
    toArray() {
        let out = [];
        this.forEachNode(n => out.push(n));
        return out;
    }
    nextNode(node) {
        return node.next;
    }
    forEachNode(callback) {
        let node = this._head;
        while (node !== null) {
            callback(node);
            node = node.next;
        }
    }
    insertBefore(node, reference = null) {
        if (reference === null) return this.append(node);
        if (reference.prev) reference.prev.next = node;else this._head = node;
        node.prev = reference.prev;
        node.next = reference;
        reference.prev = node;
        return node;
    }
    append(node) {
        let tail = this._tail;
        if (tail) {
            tail.next = node;
            node.prev = tail;
            node.next = null;
        } else {
            this._head = node;
        }
        return this._tail = node;
    }
    remove(node) {
        if (node.prev) node.prev.next = node.next;else this._head = node.next;
        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
        return node;
    }
    [DROP]() {
        this.forEachNode(d => destructor(d)[DROP]());
    }
    get [CHILDREN]() {
        let out = [];
        this.forEachNode(d => out.push(...destructor(d)[CHILDREN]));
        return out;
    }
}
export class ListSlice {
    constructor(head, tail) {
        this._head = head;
        this._tail = tail;
    }
    forEachNode(callback) {
        let node = this._head;
        while (node !== null) {
            callback(node);
            node = this.nextNode(node);
        }
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    toArray() {
        let out = [];
        this.forEachNode(n => out.push(n));
        return out;
    }
    nextNode(node) {
        if (node === this._tail) return null;
        return node.next;
    }
}
export const EMPTY_SLICE = new ListSlice(null, null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxJQUFULEVBQWUsVUFBZixFQUEyQixRQUEzQixRQUEyQyxhQUEzQztBQVFBLE9BQU0sTUFBTyxRQUFQLENBQWU7QUFLbkIsZ0JBQVksS0FBWixFQUFvQjtBQUpiLGFBQUEsSUFBQSxHQUE0QixJQUE1QjtBQUNBLGFBQUEsSUFBQSxHQUE0QixJQUE1QjtBQUlMLGFBQUssS0FBTCxHQUFhLEtBQWI7QUFDRDtBQVBrQjtBQWNyQixPQUFNLE1BQU8sVUFBUCxDQUFpQjtBQUlyQixrQkFBQTtBQUNFLGFBQUssS0FBTDtBQUNEO0FBRUQsV0FBSTtBQUNGLGVBQU8sS0FBSyxLQUFaO0FBQ0Q7QUFFRCxXQUFJO0FBQ0YsZUFBTyxLQUFLLEtBQVo7QUFDRDtBQUVELFlBQUs7QUFDSCxhQUFLLEtBQUwsR0FBYSxLQUFLLEtBQUwsR0FBYSxJQUExQjtBQUNEO0FBRUQsY0FBTztBQUNMLFlBQUksTUFBVyxFQUFmO0FBQ0EsYUFBSyxXQUFMLENBQWlCLEtBQUssSUFBSSxJQUFKLENBQVMsQ0FBVCxDQUF0QjtBQUNBLGVBQU8sR0FBUDtBQUNEO0FBRUQsYUFBUyxJQUFULEVBQWdCO0FBQ2QsZUFBTyxLQUFLLElBQVo7QUFDRDtBQUVELGdCQUFZLFFBQVosRUFBdUM7QUFDckMsWUFBSSxPQUFPLEtBQUssS0FBaEI7QUFFQSxlQUFPLFNBQVMsSUFBaEIsRUFBc0I7QUFDcEIscUJBQVMsSUFBVDtBQUNBLG1CQUFPLEtBQUssSUFBWjtBQUNEO0FBQ0Y7QUFFRCxpQkFBYSxJQUFiLEVBQXNCLFlBQXVCLElBQTdDLEVBQWlEO0FBQy9DLFlBQUksY0FBYyxJQUFsQixFQUF3QixPQUFPLEtBQUssTUFBTCxDQUFZLElBQVosQ0FBUDtBQUV4QixZQUFJLFVBQVUsSUFBZCxFQUFvQixVQUFVLElBQVYsQ0FBZSxJQUFmLEdBQXNCLElBQXRCLENBQXBCLEtBQ0ssS0FBSyxLQUFMLEdBQWEsSUFBYjtBQUVMLGFBQUssSUFBTCxHQUFZLFVBQVUsSUFBdEI7QUFDQSxhQUFLLElBQUwsR0FBWSxTQUFaO0FBQ0Esa0JBQVUsSUFBVixHQUFpQixJQUFqQjtBQUVBLGVBQU8sSUFBUDtBQUNEO0FBRUQsV0FBTyxJQUFQLEVBQWM7QUFDWixZQUFJLE9BQU8sS0FBSyxLQUFoQjtBQUVBLFlBQUksSUFBSixFQUFVO0FBQ1IsaUJBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxpQkFBSyxJQUFMLEdBQVksSUFBWjtBQUNBLGlCQUFLLElBQUwsR0FBWSxJQUFaO0FBQ0QsU0FKRCxNQUlPO0FBQ0wsaUJBQUssS0FBTCxHQUFhLElBQWI7QUFDRDtBQUVELGVBQVEsS0FBSyxLQUFMLEdBQWEsSUFBckI7QUFDRDtBQUVELFdBQU8sSUFBUCxFQUFjO0FBQ1osWUFBSSxLQUFLLElBQVQsRUFBZSxLQUFLLElBQUwsQ0FBVSxJQUFWLEdBQWlCLEtBQUssSUFBdEIsQ0FBZixLQUNLLEtBQUssS0FBTCxHQUFhLEtBQUssSUFBbEI7QUFFTCxZQUFJLEtBQUssSUFBVCxFQUFlLEtBQUssSUFBTCxDQUFVLElBQVYsR0FBaUIsS0FBSyxJQUF0QixDQUFmLEtBQ0ssS0FBSyxLQUFMLEdBQWEsS0FBSyxJQUFsQjtBQUVMLGVBQU8sSUFBUDtBQUNEO0FBRUQsS0FBQyxJQUFELElBQU07QUFDSixhQUFLLFdBQUwsQ0FBaUIsS0FBSyxXQUFXLENBQVgsRUFBYyxJQUFkLEdBQXRCO0FBQ0Q7QUFFRCxTQUFLLFFBQUwsSUFBYztBQUNaLFlBQUksTUFBYyxFQUFsQjtBQUNBLGFBQUssV0FBTCxDQUFpQixLQUFLLElBQUksSUFBSixDQUFTLEdBQUcsV0FBVyxDQUFYLEVBQWMsUUFBZCxDQUFaLENBQXRCO0FBQ0EsZUFBTyxHQUFQO0FBQ0Q7QUFwRm9CO0FBbUd2QixPQUFNLE1BQU8sU0FBUCxDQUFnQjtBQUlwQixnQkFBWSxJQUFaLEVBQTZCLElBQTdCLEVBQTRDO0FBQzFDLGFBQUssS0FBTCxHQUFhLElBQWI7QUFDQSxhQUFLLEtBQUwsR0FBYSxJQUFiO0FBQ0Q7QUFFRCxnQkFBWSxRQUFaLEVBQXVDO0FBQ3JDLFlBQUksT0FBTyxLQUFLLEtBQWhCO0FBRUEsZUFBTyxTQUFTLElBQWhCLEVBQXNCO0FBQ3BCLHFCQUFTLElBQVQ7QUFDQSxtQkFBTyxLQUFLLFFBQUwsQ0FBYyxJQUFkLENBQVA7QUFDRDtBQUNGO0FBRUQsV0FBSTtBQUNGLGVBQU8sS0FBSyxLQUFaO0FBQ0Q7QUFFRCxXQUFJO0FBQ0YsZUFBTyxLQUFLLEtBQVo7QUFDRDtBQUVELGNBQU87QUFDTCxZQUFJLE1BQVcsRUFBZjtBQUNBLGFBQUssV0FBTCxDQUFpQixLQUFLLElBQUksSUFBSixDQUFTLENBQVQsQ0FBdEI7QUFDQSxlQUFPLEdBQVA7QUFDRDtBQUVELGFBQVMsSUFBVCxFQUFnQjtBQUNkLFlBQUksU0FBUyxLQUFLLEtBQWxCLEVBQXlCLE9BQU8sSUFBUDtBQUN6QixlQUFPLEtBQUssSUFBWjtBQUNEO0FBbkNtQjtBQXNDdEIsT0FBTyxNQUFNLGNBQWMsSUFBSSxTQUFKLENBQWMsSUFBZCxFQUFvQixJQUFwQixDQUFwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuaW1wb3J0IHsgRFJPUCwgZGVzdHJ1Y3RvciwgQ0hJTERSRU4gfSBmcm9tICcuL2xpZmV0aW1lcyc7XG5pbXBvcnQgeyBEcm9wIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua2VkTGlzdE5vZGUge1xuICBuZXh0OiBPcHRpb248TGlua2VkTGlzdE5vZGU+O1xuICBwcmV2OiBPcHRpb248TGlua2VkTGlzdE5vZGU+O1xufVxuXG5leHBvcnQgY2xhc3MgTGlzdE5vZGU8VD4gaW1wbGVtZW50cyBMaW5rZWRMaXN0Tm9kZSB7XG4gIHB1YmxpYyBuZXh0OiBPcHRpb248TGlzdE5vZGU8VD4+ID0gbnVsbDtcbiAgcHVibGljIHByZXY6IE9wdGlvbjxMaXN0Tm9kZTxUPj4gPSBudWxsO1xuICBwdWJsaWMgdmFsdWU6IFQ7XG5cbiAgY29uc3RydWN0b3IodmFsdWU6IFQpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cblxuLy8gd2UgYXJlIHVuYWJsZSB0byBleHByZXNzIHRoZSBjb25zdHJhaW50IHRoYXQgVCdzIC5wcmV2IGFuZCAubmV4dCBhcmVcbi8vIHRoZW1zZWx2ZXMgVC4gSG93ZXZlciwgaXQgd2lsbCBhbHdheXMgYmUgdHJ1ZSwgc28gdHJ1c3QgdXMuXG50eXBlIHRydXN0ID0gYW55O1xuXG5leHBvcnQgY2xhc3MgTGlua2VkTGlzdDxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IGltcGxlbWVudHMgU2xpY2U8VD4sIERyb3Age1xuICBwcml2YXRlIF9oZWFkITogT3B0aW9uPFQ+O1xuICBwcml2YXRlIF90YWlsITogT3B0aW9uPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxuXG4gIGhlYWQoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuXG4gIHRhaWwoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX2hlYWQgPSB0aGlzLl90YWlsID0gbnVsbDtcbiAgfVxuXG4gIHRvQXJyYXkoKTogVFtdIHtcbiAgICBsZXQgb3V0OiBUW10gPSBbXTtcbiAgICB0aGlzLmZvckVhY2hOb2RlKG4gPT4gb3V0LnB1c2gobikpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBuZXh0Tm9kZShub2RlOiBUKTogVCB7XG4gICAgcmV0dXJuIG5vZGUubmV4dCBhcyB0cnVzdDtcbiAgfVxuXG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCkge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlIGFzIHRydXN0KTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHQgYXMgdHJ1c3Q7XG4gICAgfVxuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKG5vZGU6IFQsIHJlZmVyZW5jZTogT3B0aW9uPFQ+ID0gbnVsbCk6IFQge1xuICAgIGlmIChyZWZlcmVuY2UgPT09IG51bGwpIHJldHVybiB0aGlzLmFwcGVuZChub2RlKTtcblxuICAgIGlmIChyZWZlcmVuY2UucHJldikgcmVmZXJlbmNlLnByZXYubmV4dCA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9oZWFkID0gbm9kZTtcblxuICAgIG5vZGUucHJldiA9IHJlZmVyZW5jZS5wcmV2O1xuICAgIG5vZGUubmV4dCA9IHJlZmVyZW5jZTtcbiAgICByZWZlcmVuY2UucHJldiA9IG5vZGU7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGFwcGVuZChub2RlOiBUKTogVCB7XG4gICAgbGV0IHRhaWwgPSB0aGlzLl90YWlsO1xuXG4gICAgaWYgKHRhaWwpIHtcbiAgICAgIHRhaWwubmV4dCA9IG5vZGU7XG4gICAgICBub2RlLnByZXYgPSB0YWlsO1xuICAgICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGVhZCA9IG5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLl90YWlsID0gbm9kZSk7XG4gIH1cblxuICByZW1vdmUobm9kZTogVCk6IFQge1xuICAgIGlmIChub2RlLnByZXYpIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgIGVsc2UgdGhpcy5faGVhZCA9IG5vZGUubmV4dCBhcyB0cnVzdDtcblxuICAgIGlmIChub2RlLm5leHQpIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgIGVsc2UgdGhpcy5fdGFpbCA9IG5vZGUucHJldiBhcyB0cnVzdDtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgW0RST1BdKCkge1xuICAgIHRoaXMuZm9yRWFjaE5vZGUoZCA9PiBkZXN0cnVjdG9yKGQpW0RST1BdKCkpO1xuICB9XG5cbiAgZ2V0IFtDSElMRFJFTl0oKTogSXRlcmFibGU8RHJvcD4ge1xuICAgIGxldCBvdXQ6IERyb3BbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaE5vZGUoZCA9PiBvdXQucHVzaCguLi5kZXN0cnVjdG9yKGQpW0NISUxEUkVOXSkpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTbGljZTxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IHtcbiAgaGVhZCgpOiBPcHRpb248VD47XG4gIHRhaWwoKTogT3B0aW9uPFQ+O1xuICBuZXh0Tm9kZShub2RlOiBUKTogT3B0aW9uPFQ+O1xuICBmb3JFYWNoTm9kZShjYWxsYmFjazogKG5vZGU6IFQpID0+IHZvaWQpOiB2b2lkO1xuICB0b0FycmF5KCk6IFRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbG9uZWFibGVMaXN0Tm9kZSBleHRlbmRzIExpbmtlZExpc3ROb2RlIHtcbiAgY2xvbmUoKTogdGhpcztcbn1cblxuZXhwb3J0IGNsYXNzIExpc3RTbGljZTxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IGltcGxlbWVudHMgU2xpY2U8VD4ge1xuICBwcml2YXRlIF9oZWFkOiBPcHRpb248VD47XG4gIHByaXZhdGUgX3RhaWw6IE9wdGlvbjxUPjtcblxuICBjb25zdHJ1Y3RvcihoZWFkOiBPcHRpb248VD4sIHRhaWw6IE9wdGlvbjxUPikge1xuICAgIHRoaXMuX2hlYWQgPSBoZWFkO1xuICAgIHRoaXMuX3RhaWwgPSB0YWlsO1xuICB9XG5cbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLl9oZWFkO1xuXG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUpO1xuICAgICAgbm9kZSA9IHRoaXMubmV4dE5vZGUobm9kZSk7XG4gICAgfVxuICB9XG5cbiAgaGVhZCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl9oZWFkO1xuICB9XG5cbiAgdGFpbCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl90YWlsO1xuICB9XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIGxldCBvdXQ6IFRbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaE5vZGUobiA9PiBvdXQucHVzaChuKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIG5leHROb2RlKG5vZGU6IFQpOiBPcHRpb248VD4ge1xuICAgIGlmIChub2RlID09PSB0aGlzLl90YWlsKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gbm9kZS5uZXh0IGFzIFQ7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVNUFRZX1NMSUNFID0gbmV3IExpc3RTbGljZShudWxsLCBudWxsKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=