import { dirty, update, createUpdatableTag, CONSTANT_TAG, isConstTag } from './validators';
const TRACKED_TAGS = new WeakMap();
function isObject(u) {
    return typeof u === 'object' && u !== null;
}
export function dirtyTag(obj, key) {
    if (isObject(obj)) {
        let tag = tagFor(obj, key);
        if (tag === undefined) {
            updateTag(obj, key, createUpdatableTag());
        } else if (isConstTag(tag)) {
            throw new Error(`BUG: Can't update a constant tag`);
        } else {
            dirty(tag);
        }
    } else {
        throw new Error(`BUG: Can't update a tag for a primitive`);
    }
}
export function tagFor(obj, key) {
    if (isObject(obj)) {
        let tags = TRACKED_TAGS.get(obj);
        if (tags === undefined) {
            tags = new Map();
            TRACKED_TAGS.set(obj, tags);
        } else if (tags.has(key)) {
            return tags.get(key);
        }
        let tag = createUpdatableTag();
        tags.set(key, tag);
        return tag;
    } else {
        return CONSTANT_TAG;
    }
}
export function updateTag(obj, key, newTag) {
    if (isObject(obj)) {
        let tag = tagFor(obj, key);
        if (isConstTag(tag)) {
            throw new Error(`BUG: Can't update a constant tag`);
        } else {
            update(tag, newTag);
        }
        return tag;
    } else {
        throw new Error(`BUG: Can't update a tag for a primitive`);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUNFLEtBREYsRUFFRSxNQUZGLEVBR0Usa0JBSEYsRUFLRSxZQUxGLEVBTUUsVUFORixRQVFPLGNBUlA7QUFXQSxNQUFNLGVBQWUsSUFBSSxPQUFKLEVBQXJCO0FBRUEsU0FBUyxRQUFULENBQXFCLENBQXJCLEVBQXlCO0FBQ3ZCLFdBQU8sT0FBTyxDQUFQLEtBQWEsUUFBYixJQUF5QixNQUFNLElBQXRDO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsUUFBVixDQUFzQixHQUF0QixFQUE4QixHQUE5QixFQUEwQztBQUM5QyxRQUFJLFNBQVMsR0FBVCxDQUFKLEVBQW1CO0FBQ2pCLFlBQUksTUFBTSxPQUFPLEdBQVAsRUFBWSxHQUFaLENBQVY7QUFFQSxZQUFJLFFBQVEsU0FBWixFQUF1QjtBQUNyQixzQkFBVSxHQUFWLEVBQWUsR0FBZixFQUFvQixvQkFBcEI7QUFDRCxTQUZELE1BRU8sSUFBSSxXQUFXLEdBQVgsQ0FBSixFQUFxQjtBQUMxQixrQkFBTSxJQUFJLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0QsU0FGTSxNQUVBO0FBQ0wsa0JBQU0sR0FBTjtBQUNEO0FBQ0YsS0FWRCxNQVVPO0FBQ0wsY0FBTSxJQUFJLEtBQUosQ0FBVSx5Q0FBVixDQUFOO0FBQ0Q7QUFDRjtBQUlELE9BQU0sU0FBVSxNQUFWLENBQW9CLEdBQXBCLEVBQTRCLEdBQTVCLEVBQXdDO0FBQzVDLFFBQUksU0FBUyxHQUFULENBQUosRUFBbUI7QUFDakIsWUFBSSxPQUFPLGFBQWEsR0FBYixDQUFpQixHQUFqQixDQUFYO0FBRUEsWUFBSSxTQUFTLFNBQWIsRUFBd0I7QUFDdEIsbUJBQU8sSUFBSSxHQUFKLEVBQVA7QUFDQSx5QkFBYSxHQUFiLENBQWlCLEdBQWpCLEVBQXNCLElBQXRCO0FBQ0QsU0FIRCxNQUdPLElBQUksS0FBSyxHQUFMLENBQVMsR0FBVCxDQUFKLEVBQW1CO0FBQ3hCLG1CQUFPLEtBQUssR0FBTCxDQUFTLEdBQVQsQ0FBUDtBQUNEO0FBRUQsWUFBSSxNQUFNLG9CQUFWO0FBQ0EsYUFBSyxHQUFMLENBQVMsR0FBVCxFQUFjLEdBQWQ7QUFDQSxlQUFPLEdBQVA7QUFDRCxLQWJELE1BYU87QUFDTCxlQUFPLFlBQVA7QUFDRDtBQUNGO0FBRUQsT0FBTSxTQUFVLFNBQVYsQ0FBdUIsR0FBdkIsRUFBK0IsR0FBL0IsRUFBNkMsTUFBN0MsRUFBaUU7QUFDckUsUUFBSSxTQUFTLEdBQVQsQ0FBSixFQUFtQjtBQUNqQixZQUFJLE1BQU0sT0FBTyxHQUFQLEVBQVksR0FBWixDQUFWO0FBRUEsWUFBSSxXQUFXLEdBQVgsQ0FBSixFQUFxQjtBQUNuQixrQkFBTSxJQUFJLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0QsU0FGRCxNQUVPO0FBQ0wsbUJBQU8sR0FBUCxFQUFZLE1BQVo7QUFDRDtBQUVELGVBQU8sR0FBUDtBQUNELEtBVkQsTUFVTztBQUNMLGNBQU0sSUFBSSxLQUFKLENBQVUseUNBQVYsQ0FBTjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBkaXJ0eSxcbiAgdXBkYXRlLFxuICBjcmVhdGVVcGRhdGFibGVUYWcsXG4gIFVwZGF0YWJsZVRhZyxcbiAgQ09OU1RBTlRfVEFHLFxuICBpc0NvbnN0VGFnLFxuICBDb25zdGFudFRhZyxcbn0gZnJvbSAnLi92YWxpZGF0b3JzJztcblxudHlwZSBUYWdzID0gTWFwPFByb3BlcnR5S2V5LCBVcGRhdGFibGVUYWc+O1xuY29uc3QgVFJBQ0tFRF9UQUdTID0gbmV3IFdlYWtNYXA8b2JqZWN0LCBUYWdzPigpO1xuXG5mdW5jdGlvbiBpc09iamVjdDxUPih1OiBUKTogdSBpcyBvYmplY3QgJiBUIHtcbiAgcmV0dXJuIHR5cGVvZiB1ID09PSAnb2JqZWN0JyAmJiB1ICE9PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlydHlUYWc8VD4ob2JqOiBULCBrZXk6IGtleW9mIFQpOiB2b2lkIHtcbiAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICBsZXQgdGFnID0gdGFnRm9yKG9iaiwga2V5KTtcblxuICAgIGlmICh0YWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdXBkYXRlVGFnKG9iaiwga2V5LCBjcmVhdGVVcGRhdGFibGVUYWcoKSk7XG4gICAgfSBlbHNlIGlmIChpc0NvbnN0VGFnKHRhZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiBDYW4ndCB1cGRhdGUgYSBjb25zdGFudCB0YWdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGlydHkodGFnKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCVUc6IENhbid0IHVwZGF0ZSBhIHRhZyBmb3IgYSBwcmltaXRpdmVgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFnRm9yPFQgZXh0ZW5kcyBvYmplY3Q+KG9iajogVCwga2V5OiBrZXlvZiBUKTogVXBkYXRhYmxlVGFnO1xuZXhwb3J0IGZ1bmN0aW9uIHRhZ0ZvcjxUPihvYmo6IFQsIGtleTogc3RyaW5nKTogQ29uc3RhbnRUYWc7XG5leHBvcnQgZnVuY3Rpb24gdGFnRm9yPFQ+KG9iajogVCwga2V5OiBrZXlvZiBUKTogVXBkYXRhYmxlVGFnIHwgQ29uc3RhbnRUYWcge1xuICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgIGxldCB0YWdzID0gVFJBQ0tFRF9UQUdTLmdldChvYmopO1xuXG4gICAgaWYgKHRhZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFncyA9IG5ldyBNYXAoKTtcbiAgICAgIFRSQUNLRURfVEFHUy5zZXQob2JqLCB0YWdzKTtcbiAgICB9IGVsc2UgaWYgKHRhZ3MuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiB0YWdzLmdldChrZXkpITtcbiAgICB9XG5cbiAgICBsZXQgdGFnID0gY3JlYXRlVXBkYXRhYmxlVGFnKCk7XG4gICAgdGFncy5zZXQoa2V5LCB0YWcpO1xuICAgIHJldHVybiB0YWc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENPTlNUQU5UX1RBRztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVGFnPFQ+KG9iajogVCwga2V5OiBrZXlvZiBULCBuZXdUYWc6IFVwZGF0YWJsZVRhZyk6IFVwZGF0YWJsZVRhZyB7XG4gIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgbGV0IHRhZyA9IHRhZ0ZvcihvYmosIGtleSk7XG5cbiAgICBpZiAoaXNDb25zdFRhZyh0YWcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEJVRzogQ2FuJ3QgdXBkYXRlIGEgY29uc3RhbnQgdGFnYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZSh0YWcsIG5ld1RhZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZztcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJVRzogQ2FuJ3QgdXBkYXRlIGEgdGFnIGZvciBhIHByaW1pdGl2ZWApO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9