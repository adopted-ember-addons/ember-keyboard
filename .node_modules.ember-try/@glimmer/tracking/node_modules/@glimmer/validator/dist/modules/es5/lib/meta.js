import { dirty, update, createUpdatableTag, CONSTANT_TAG, isConstTag } from './validators';
var TRACKED_TAGS = new WeakMap();
function isObject(u) {
    return typeof u === 'object' && u !== null;
}
export function dirtyTag(obj, key) {
    if (isObject(obj)) {
        var tag = tagFor(obj, key);
        if (tag === undefined) {
            updateTag(obj, key, createUpdatableTag());
        } else if (isConstTag(tag)) {
            throw new Error('BUG: Can\'t update a constant tag');
        } else {
            dirty(tag);
        }
    } else {
        throw new Error('BUG: Can\'t update a tag for a primitive');
    }
}
export function tagFor(obj, key) {
    if (isObject(obj)) {
        var tags = TRACKED_TAGS.get(obj);
        if (tags === undefined) {
            tags = new Map();
            TRACKED_TAGS.set(obj, tags);
        } else if (tags.has(key)) {
            return tags.get(key);
        }
        var tag = createUpdatableTag();
        tags.set(key, tag);
        return tag;
    } else {
        return CONSTANT_TAG;
    }
}
export function updateTag(obj, key, newTag) {
    if (isObject(obj)) {
        var tag = tagFor(obj, key);
        if (isConstTag(tag)) {
            throw new Error('BUG: Can\'t update a constant tag');
        } else {
            update(tag, newTag);
        }
        return tag;
    } else {
        throw new Error('BUG: Can\'t update a tag for a primitive');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFBLEtBQUEsRUFBQSxNQUFBLEVBQUEsa0JBQUEsRUFBQSxZQUFBLEVBQUEsVUFBQSxRQUFBLGNBQUE7QUFXQSxJQUFNLGVBQWUsSUFBckIsT0FBcUIsRUFBckI7QUFFQSxTQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQXlCO0FBQ3ZCLFdBQU8sT0FBQSxDQUFBLEtBQUEsUUFBQSxJQUF5QixNQUFoQyxJQUFBO0FBQ0Q7QUFFRCxPQUFNLFNBQUEsUUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQTBDO0FBQzlDLFFBQUksU0FBSixHQUFJLENBQUosRUFBbUI7QUFDakIsWUFBSSxNQUFNLE9BQUEsR0FBQSxFQUFWLEdBQVUsQ0FBVjtBQUVBLFlBQUksUUFBSixTQUFBLEVBQXVCO0FBQ3JCLHNCQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsb0JBQUE7QUFERixTQUFBLE1BRU8sSUFBSSxXQUFKLEdBQUksQ0FBSixFQUFxQjtBQUMxQixrQkFBTSxJQUFOLEtBQU0scUNBQU47QUFESyxTQUFBLE1BRUE7QUFDTCxrQkFBQSxHQUFBO0FBQ0Q7QUFUSCxLQUFBLE1BVU87QUFDTCxjQUFNLElBQU4sS0FBTSw0Q0FBTjtBQUNEO0FBQ0Y7QUFJRCxPQUFNLFNBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxHQUFBLEVBQXdDO0FBQzVDLFFBQUksU0FBSixHQUFJLENBQUosRUFBbUI7QUFDakIsWUFBSSxPQUFPLGFBQUEsR0FBQSxDQUFYLEdBQVcsQ0FBWDtBQUVBLFlBQUksU0FBSixTQUFBLEVBQXdCO0FBQ3RCLG1CQUFPLElBQVAsR0FBTyxFQUFQO0FBQ0EseUJBQUEsR0FBQSxDQUFBLEdBQUEsRUFBQSxJQUFBO0FBRkYsU0FBQSxNQUdPLElBQUksS0FBQSxHQUFBLENBQUosR0FBSSxDQUFKLEVBQW1CO0FBQ3hCLG1CQUFPLEtBQUEsR0FBQSxDQUFQLEdBQU8sQ0FBUDtBQUNEO0FBRUQsWUFBSSxNQUFKLG9CQUFBO0FBQ0EsYUFBQSxHQUFBLENBQUEsR0FBQSxFQUFBLEdBQUE7QUFDQSxlQUFBLEdBQUE7QUFaRixLQUFBLE1BYU87QUFDTCxlQUFBLFlBQUE7QUFDRDtBQUNGO0FBRUQsT0FBTSxTQUFBLFNBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE1BQUEsRUFBaUU7QUFDckUsUUFBSSxTQUFKLEdBQUksQ0FBSixFQUFtQjtBQUNqQixZQUFJLE1BQU0sT0FBQSxHQUFBLEVBQVYsR0FBVSxDQUFWO0FBRUEsWUFBSSxXQUFKLEdBQUksQ0FBSixFQUFxQjtBQUNuQixrQkFBTSxJQUFOLEtBQU0scUNBQU47QUFERixTQUFBLE1BRU87QUFDTCxtQkFBQSxHQUFBLEVBQUEsTUFBQTtBQUNEO0FBRUQsZUFBQSxHQUFBO0FBVEYsS0FBQSxNQVVPO0FBQ0wsY0FBTSxJQUFOLEtBQU0sNENBQU47QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgZGlydHksXG4gIHVwZGF0ZSxcbiAgY3JlYXRlVXBkYXRhYmxlVGFnLFxuICBVcGRhdGFibGVUYWcsXG4gIENPTlNUQU5UX1RBRyxcbiAgaXNDb25zdFRhZyxcbiAgQ29uc3RhbnRUYWcsXG59IGZyb20gJy4vdmFsaWRhdG9ycyc7XG5cbnR5cGUgVGFncyA9IE1hcDxQcm9wZXJ0eUtleSwgVXBkYXRhYmxlVGFnPjtcbmNvbnN0IFRSQUNLRURfVEFHUyA9IG5ldyBXZWFrTWFwPG9iamVjdCwgVGFncz4oKTtcblxuZnVuY3Rpb24gaXNPYmplY3Q8VD4odTogVCk6IHUgaXMgb2JqZWN0ICYgVCB7XG4gIHJldHVybiB0eXBlb2YgdSA9PT0gJ29iamVjdCcgJiYgdSAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpcnR5VGFnPFQ+KG9iajogVCwga2V5OiBrZXlvZiBUKTogdm9pZCB7XG4gIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgbGV0IHRhZyA9IHRhZ0ZvcihvYmosIGtleSk7XG5cbiAgICBpZiAodGFnID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHVwZGF0ZVRhZyhvYmosIGtleSwgY3JlYXRlVXBkYXRhYmxlVGFnKCkpO1xuICAgIH0gZWxzZSBpZiAoaXNDb25zdFRhZyh0YWcpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEJVRzogQ2FuJ3QgdXBkYXRlIGEgY29uc3RhbnQgdGFnYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5KHRhZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiBDYW4ndCB1cGRhdGUgYSB0YWcgZm9yIGEgcHJpbWl0aXZlYCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ0ZvcjxUIGV4dGVuZHMgb2JqZWN0PihvYmo6IFQsIGtleToga2V5b2YgVCk6IFVwZGF0YWJsZVRhZztcbmV4cG9ydCBmdW5jdGlvbiB0YWdGb3I8VD4ob2JqOiBULCBrZXk6IHN0cmluZyk6IENvbnN0YW50VGFnO1xuZXhwb3J0IGZ1bmN0aW9uIHRhZ0ZvcjxUPihvYmo6IFQsIGtleToga2V5b2YgVCk6IFVwZGF0YWJsZVRhZyB8IENvbnN0YW50VGFnIHtcbiAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICBsZXQgdGFncyA9IFRSQUNLRURfVEFHUy5nZXQob2JqKTtcblxuICAgIGlmICh0YWdzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhZ3MgPSBuZXcgTWFwKCk7XG4gICAgICBUUkFDS0VEX1RBR1Muc2V0KG9iaiwgdGFncyk7XG4gICAgfSBlbHNlIGlmICh0YWdzLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gdGFncy5nZXQoa2V5KSE7XG4gICAgfVxuXG4gICAgbGV0IHRhZyA9IGNyZWF0ZVVwZGF0YWJsZVRhZygpO1xuICAgIHRhZ3Muc2V0KGtleSwgdGFnKTtcbiAgICByZXR1cm4gdGFnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBDT05TVEFOVF9UQUc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRhZzxUPihvYmo6IFQsIGtleToga2V5b2YgVCwgbmV3VGFnOiBVcGRhdGFibGVUYWcpOiBVcGRhdGFibGVUYWcge1xuICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgIGxldCB0YWcgPSB0YWdGb3Iob2JqLCBrZXkpO1xuXG4gICAgaWYgKGlzQ29uc3RUYWcodGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCVUc6IENhbid0IHVwZGF0ZSBhIGNvbnN0YW50IHRhZ2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICB1cGRhdGUodGFnLCBuZXdUYWcpO1xuICAgIH1cblxuICAgIHJldHVybiB0YWc7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCVUc6IENhbid0IHVwZGF0ZSBhIHRhZyBmb3IgYSBwcmltaXRpdmVgKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==