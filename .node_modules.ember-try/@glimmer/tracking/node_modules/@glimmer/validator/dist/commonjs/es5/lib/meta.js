'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.dirtyTag = dirtyTag;
exports.tagFor = tagFor;
exports.updateTag = updateTag;

var _validators = require('./validators');

var TRACKED_TAGS = new WeakMap();
function isObject(u) {
    return typeof u === 'object' && u !== null;
}
function dirtyTag(obj, key) {
    if (isObject(obj)) {
        var tag = tagFor(obj, key);
        if (tag === undefined) {
            updateTag(obj, key, (0, _validators.createUpdatableTag)());
        } else if ((0, _validators.isConstTag)(tag)) {
            throw new Error('BUG: Can\'t update a constant tag');
        } else {
            (0, _validators.dirty)(tag);
        }
    } else {
        throw new Error('BUG: Can\'t update a tag for a primitive');
    }
}
function tagFor(obj, key) {
    if (isObject(obj)) {
        var tags = TRACKED_TAGS.get(obj);
        if (tags === undefined) {
            tags = new Map();
            TRACKED_TAGS.set(obj, tags);
        } else if (tags.has(key)) {
            return tags.get(key);
        }
        var tag = (0, _validators.createUpdatableTag)();
        tags.set(key, tag);
        return tag;
    } else {
        return _validators.CONSTANT_TAG;
    }
}
function updateTag(obj, key, newTag) {
    if (isObject(obj)) {
        var tag = tagFor(obj, key);
        if ((0, _validators.isConstTag)(tag)) {
            throw new Error('BUG: Can\'t update a constant tag');
        } else {
            (0, _validators.update)(tag, newTag);
        }
        return tag;
    } else {
        throw new Error('BUG: Can\'t update a tag for a primitive');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQWlCTSxRLEdBQUEsUTtRQWtCQSxNLEdBQUEsTTtRQW1CQSxTLEdBQUEsUzs7OztBQTNDTixJQUFNLGVBQWUsSUFBckIsT0FBcUIsRUFBckI7QUFFQSxTQUFBLFFBQUEsQ0FBQSxDQUFBLEVBQXlCO0FBQ3ZCLFdBQU8sT0FBQSxDQUFBLEtBQUEsUUFBQSxJQUF5QixNQUFoQyxJQUFBO0FBQ0Q7QUFFSyxTQUFBLFFBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUEwQztBQUM5QyxRQUFJLFNBQUosR0FBSSxDQUFKLEVBQW1CO0FBQ2pCLFlBQUksTUFBTSxPQUFBLEdBQUEsRUFBVixHQUFVLENBQVY7QUFFQSxZQUFJLFFBQUosU0FBQSxFQUF1QjtBQUNyQixzQkFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLHFDQUFBO0FBREYsU0FBQSxNQUVPLElBQUksNEJBQUosR0FBSSxDQUFKLEVBQXFCO0FBQzFCLGtCQUFNLElBQU4sS0FBTSxDQUFOLG1DQUFNLENBQU47QUFESyxTQUFBLE1BRUE7QUFDTCxtQ0FBQSxHQUFBO0FBQ0Q7QUFUSCxLQUFBLE1BVU87QUFDTCxjQUFNLElBQU4sS0FBTSxDQUFOLDBDQUFNLENBQU47QUFDRDtBQUNGO0FBSUssU0FBQSxNQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBd0M7QUFDNUMsUUFBSSxTQUFKLEdBQUksQ0FBSixFQUFtQjtBQUNqQixZQUFJLE9BQU8sYUFBQSxHQUFBLENBQVgsR0FBVyxDQUFYO0FBRUEsWUFBSSxTQUFKLFNBQUEsRUFBd0I7QUFDdEIsbUJBQU8sSUFBUCxHQUFPLEVBQVA7QUFDQSx5QkFBQSxHQUFBLENBQUEsR0FBQSxFQUFBLElBQUE7QUFGRixTQUFBLE1BR08sSUFBSSxLQUFBLEdBQUEsQ0FBSixHQUFJLENBQUosRUFBbUI7QUFDeEIsbUJBQU8sS0FBQSxHQUFBLENBQVAsR0FBTyxDQUFQO0FBQ0Q7QUFFRCxZQUFJLE1BQUoscUNBQUE7QUFDQSxhQUFBLEdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQTtBQUNBLGVBQUEsR0FBQTtBQVpGLEtBQUEsTUFhTztBQUNMLGVBQUEsd0JBQUE7QUFDRDtBQUNGO0FBRUssU0FBQSxTQUFBLENBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQWlFO0FBQ3JFLFFBQUksU0FBSixHQUFJLENBQUosRUFBbUI7QUFDakIsWUFBSSxNQUFNLE9BQUEsR0FBQSxFQUFWLEdBQVUsQ0FBVjtBQUVBLFlBQUksNEJBQUosR0FBSSxDQUFKLEVBQXFCO0FBQ25CLGtCQUFNLElBQU4sS0FBTSxDQUFOLG1DQUFNLENBQU47QUFERixTQUFBLE1BRU87QUFDTCxvQ0FBQSxHQUFBLEVBQUEsTUFBQTtBQUNEO0FBRUQsZUFBQSxHQUFBO0FBVEYsS0FBQSxNQVVPO0FBQ0wsY0FBTSxJQUFOLEtBQU0sQ0FBTiwwQ0FBTSxDQUFOO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGRpcnR5LFxuICB1cGRhdGUsXG4gIGNyZWF0ZVVwZGF0YWJsZVRhZyxcbiAgVXBkYXRhYmxlVGFnLFxuICBDT05TVEFOVF9UQUcsXG4gIGlzQ29uc3RUYWcsXG4gIENvbnN0YW50VGFnLFxufSBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuXG50eXBlIFRhZ3MgPSBNYXA8UHJvcGVydHlLZXksIFVwZGF0YWJsZVRhZz47XG5jb25zdCBUUkFDS0VEX1RBR1MgPSBuZXcgV2Vha01hcDxvYmplY3QsIFRhZ3M+KCk7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0PFQ+KHU6IFQpOiB1IGlzIG9iamVjdCAmIFQge1xuICByZXR1cm4gdHlwZW9mIHUgPT09ICdvYmplY3QnICYmIHUgIT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXJ0eVRhZzxUPihvYmo6IFQsIGtleToga2V5b2YgVCk6IHZvaWQge1xuICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgIGxldCB0YWcgPSB0YWdGb3Iob2JqLCBrZXkpO1xuXG4gICAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB1cGRhdGVUYWcob2JqLCBrZXksIGNyZWF0ZVVwZGF0YWJsZVRhZygpKTtcbiAgICB9IGVsc2UgaWYgKGlzQ29uc3RUYWcodGFnKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBCVUc6IENhbid0IHVwZGF0ZSBhIGNvbnN0YW50IHRhZ2ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJ0eSh0YWcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEJVRzogQ2FuJ3QgdXBkYXRlIGEgdGFnIGZvciBhIHByaW1pdGl2ZWApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWdGb3I8VCBleHRlbmRzIG9iamVjdD4ob2JqOiBULCBrZXk6IGtleW9mIFQpOiBVcGRhdGFibGVUYWc7XG5leHBvcnQgZnVuY3Rpb24gdGFnRm9yPFQ+KG9iajogVCwga2V5OiBzdHJpbmcpOiBDb25zdGFudFRhZztcbmV4cG9ydCBmdW5jdGlvbiB0YWdGb3I8VD4ob2JqOiBULCBrZXk6IGtleW9mIFQpOiBVcGRhdGFibGVUYWcgfCBDb25zdGFudFRhZyB7XG4gIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgbGV0IHRhZ3MgPSBUUkFDS0VEX1RBR1MuZ2V0KG9iaik7XG5cbiAgICBpZiAodGFncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YWdzID0gbmV3IE1hcCgpO1xuICAgICAgVFJBQ0tFRF9UQUdTLnNldChvYmosIHRhZ3MpO1xuICAgIH0gZWxzZSBpZiAodGFncy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIHRhZ3MuZ2V0KGtleSkhO1xuICAgIH1cblxuICAgIGxldCB0YWcgPSBjcmVhdGVVcGRhdGFibGVUYWcoKTtcbiAgICB0YWdzLnNldChrZXksIHRhZyk7XG4gICAgcmV0dXJuIHRhZztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQ09OU1RBTlRfVEFHO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVUYWc8VD4ob2JqOiBULCBrZXk6IGtleW9mIFQsIG5ld1RhZzogVXBkYXRhYmxlVGFnKTogVXBkYXRhYmxlVGFnIHtcbiAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICBsZXQgdGFnID0gdGFnRm9yKG9iaiwga2V5KTtcblxuICAgIGlmIChpc0NvbnN0VGFnKHRhZykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiBDYW4ndCB1cGRhdGUgYSBjb25zdGFudCB0YWdgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlKHRhZywgbmV3VGFnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFnO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgQlVHOiBDYW4ndCB1cGRhdGUgYSB0YWcgZm9yIGEgcHJpbWl0aXZlYCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=