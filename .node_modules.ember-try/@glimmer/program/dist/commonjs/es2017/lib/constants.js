"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
const UNRESOLVED = {};
const WELL_KNOWN_EMPTY_ARRAY_POSITION = exports.WELL_KNOWN_EMPTY_ARRAY_POSITION = 0;
const WELL_KNOW_EMPTY_ARRAY = Object.freeze([]);
class WriteOnlyConstants {
    constructor() {
        // `0` means NULL
        this.strings = [];
        this.arrays = [WELL_KNOW_EMPTY_ARRAY];
        this.tables = [];
        this.handles = [];
        this.resolved = [];
        this.numbers = [];
        this.others = [];
    }
    other(other) {
        return this.others.push(other) - 1;
    }
    string(value) {
        let index = this.strings.indexOf(value);
        if (index > -1) {
            return index;
        }
        return this.strings.push(value) - 1;
    }
    stringArray(strings) {
        let _strings = new Array(strings.length);
        for (let i = 0; i < strings.length; i++) {
            _strings[i] = this.string(strings[i]);
        }
        return this.array(_strings);
    }
    array(values) {
        if (values.length === 0) {
            return WELL_KNOWN_EMPTY_ARRAY_POSITION;
        }
        let index = this.arrays.indexOf(values);
        if (index > -1) {
            return index;
        }
        return this.arrays.push(values) - 1;
    }
    templateMeta(value) {
        let str = JSON.stringify(value);
        let index = this.strings.indexOf(str);
        if (index > -1) {
            return index;
        }
        return this.strings.push(str) - 1;
    }
    number(number) {
        let index = this.numbers.indexOf(number);
        if (index > -1) {
            return index;
        }
        return this.numbers.push(number) - 1;
    }
    toPool() {
        return {
            strings: this.strings,
            arrays: this.arrays,
            handles: this.handles,
            numbers: this.numbers
        };
    }
}
exports.WriteOnlyConstants = WriteOnlyConstants;
class RuntimeConstantsImpl {
    constructor(pool) {
        this.strings = pool.strings;
        this.arrays = pool.arrays;
        this.handles = pool.handles;
        this.numbers = pool.numbers;
        this.others = [];
    }
    getString(value) {
        return this.strings[value];
    }
    getNumber(value) {
        return this.numbers[value];
    }
    getStringArray(value) {
        let names = this.getArray(value);
        let _names = new Array(names.length);
        for (let i = 0; i < names.length; i++) {
            let n = names[i];
            _names[i] = this.getString(n);
        }
        return _names;
    }
    getArray(value) {
        return this.arrays[value];
    }
    getTemplateMeta(s) {
        return JSON.parse(this.strings[s]);
    }
    getOther(value) {
        return this.others[value];
    }
}
exports.RuntimeConstantsImpl = RuntimeConstantsImpl;
class Constants extends WriteOnlyConstants {
    constructor(pool) {
        super();
        if (pool) {
            this.strings = pool.strings;
            this.arrays = pool.arrays;
            this.handles = pool.handles;
            this.resolved = this.handles.map(() => UNRESOLVED);
            this.numbers = pool.numbers;
        }
        this.others = [];
    }
    getNumber(value) {
        return this.numbers[value];
    }
    getString(value) {
        return this.strings[value];
    }
    getStringArray(value) {
        let names = this.getArray(value);
        let _names = new Array(names.length);
        for (let i = 0; i < names.length; i++) {
            let n = names[i];
            _names[i] = this.getString(n);
        }
        return _names;
    }
    getArray(value) {
        return this.arrays[value];
    }
    getTemplateMeta(s) {
        return JSON.parse(this.strings[s]);
    }
    getOther(value) {
        return this.others[value];
    }
}
exports.Constants = Constants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,