import { ensureGuid } from './guid';
export function dict() {
    return Object.create(null);
}
export function isDict(u) {
    return u !== null && u !== undefined;
}
export function isObject(u) {
    return typeof u === 'object' && u !== null;
}
export class DictSet {
    constructor() {
        this.dict = dict();
    }
    add(obj) {
        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
        return this;
    }
    delete(obj) {
        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
    }
}
export class StackImpl {
    constructor() {
        this.stack = [];
        this.current = null;
    }
    get size() {
        return this.stack.length;
    }
    push(item) {
        this.current = item;
        this.stack.push(item);
    }
    pop() {
        let item = this.stack.pop();
        let len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
    }
    nth(from) {
        let len = this.stack.length;
        return len < from ? null : this.stack[len - from];
    }
    isEmpty() {
        return this.stack.length === 0;
    }
    toArray() {
        return this.stack;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2NvbGxlY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQWtCLFVBQWxCLFFBQW9DLFFBQXBDO0FBU0EsT0FBTSxTQUFVLElBQVYsR0FBYztBQUNsQixXQUFPLE9BQU8sTUFBUCxDQUFjLElBQWQsQ0FBUDtBQUNEO0FBRUQsT0FBTSxTQUFVLE1BQVYsQ0FBb0IsQ0FBcEIsRUFBd0I7QUFDNUIsV0FBTyxNQUFNLElBQU4sSUFBYyxNQUFNLFNBQTNCO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsUUFBVixDQUFzQixDQUF0QixFQUEwQjtBQUM5QixXQUFPLE9BQU8sQ0FBUCxLQUFhLFFBQWIsSUFBeUIsTUFBTSxJQUF0QztBQUNEO0FBSUQsT0FBTSxNQUFPLE9BQVAsQ0FBYztBQUdsQixrQkFBQTtBQUNFLGFBQUssSUFBTCxHQUFZLE1BQVo7QUFDRDtBQUVELFFBQUksR0FBSixFQUFVO0FBQ1IsWUFBSSxPQUFPLEdBQVAsS0FBZSxRQUFuQixFQUE2QixLQUFLLElBQUwsQ0FBVSxHQUFWLElBQXdCLEdBQXhCLENBQTdCLEtBQ0ssS0FBSyxJQUFMLENBQVUsV0FBVyxHQUFYLENBQVYsSUFBb0MsR0FBcEM7QUFDTCxlQUFPLElBQVA7QUFDRDtBQUVELFdBQU8sR0FBUCxFQUFhO0FBQ1gsWUFBSSxPQUFPLEdBQVAsS0FBZSxRQUFuQixFQUE2QixPQUFPLEtBQUssSUFBTCxDQUFVLEdBQVYsQ0FBUCxDQUE3QixLQUNLLElBQUssSUFBWSxLQUFqQixFQUF3QixPQUFPLEtBQUssSUFBTCxDQUFXLElBQVksS0FBdkIsQ0FBUDtBQUM5QjtBQWhCaUI7QUFtQnBCLE9BQU0sTUFBTyxTQUFQLENBQWdCO0FBQXRCLGtCQUFBO0FBQ1UsYUFBQSxLQUFBLEdBQWEsRUFBYjtBQUNELGFBQUEsT0FBQSxHQUFxQixJQUFyQjtBQStCUjtBQTdCQyxRQUFXLElBQVgsR0FBZTtBQUNiLGVBQU8sS0FBSyxLQUFMLENBQVcsTUFBbEI7QUFDRDtBQUVELFNBQUssSUFBTCxFQUFZO0FBQ1YsYUFBSyxPQUFMLEdBQWUsSUFBZjtBQUNBLGFBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0IsSUFBaEI7QUFDRDtBQUVELFVBQUc7QUFDRCxZQUFJLE9BQU8sS0FBSyxLQUFMLENBQVcsR0FBWCxFQUFYO0FBQ0EsWUFBSSxNQUFNLEtBQUssS0FBTCxDQUFXLE1BQXJCO0FBQ0EsYUFBSyxPQUFMLEdBQWUsUUFBUSxDQUFSLEdBQVksSUFBWixHQUFtQixLQUFLLEtBQUwsQ0FBVyxNQUFNLENBQWpCLENBQWxDO0FBRUEsZUFBTyxTQUFTLFNBQVQsR0FBcUIsSUFBckIsR0FBNEIsSUFBbkM7QUFDRDtBQUVELFFBQUksSUFBSixFQUFnQjtBQUNkLFlBQUksTUFBTSxLQUFLLEtBQUwsQ0FBVyxNQUFyQjtBQUNBLGVBQU8sTUFBTSxJQUFOLEdBQWEsSUFBYixHQUFvQixLQUFLLEtBQUwsQ0FBVyxNQUFNLElBQWpCLENBQTNCO0FBQ0Q7QUFFRCxjQUFPO0FBQ0wsZUFBTyxLQUFLLEtBQUwsQ0FBVyxNQUFYLEtBQXNCLENBQTdCO0FBQ0Q7QUFFRCxjQUFPO0FBQ0wsZUFBTyxLQUFLLEtBQVo7QUFDRDtBQWhDbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuaW1wb3J0IHsgRGljdCwgU3RhY2sgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXQ8VD4ge1xuICBhZGQodmFsdWU6IFQpOiBTZXQ8VD47XG4gIGRlbGV0ZSh2YWx1ZTogVCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWN0PFQgPSB1bmtub3duPigpOiBEaWN0PFQ+IHtcbiAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RpY3Q8VD4odTogVCk6IHUgaXMgRGljdCAmIFQge1xuICByZXR1cm4gdSAhPT0gbnVsbCAmJiB1ICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdDxUPih1OiBUKTogdSBpcyBvYmplY3QgJiBUIHtcbiAgcmV0dXJuIHR5cGVvZiB1ID09PSAnb2JqZWN0JyAmJiB1ICE9PSBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBTZXRNZW1iZXIgPSBIYXNHdWlkIHwgc3RyaW5nO1xuXG5leHBvcnQgY2xhc3MgRGljdFNldDxUIGV4dGVuZHMgU2V0TWVtYmVyPiBpbXBsZW1lbnRzIFNldDxUPiB7XG4gIHByaXZhdGUgZGljdDogRGljdDxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRpY3QgPSBkaWN0PFQ+KCk7XG4gIH1cblxuICBhZGQob2JqOiBUKTogU2V0PFQ+IHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHRoaXMuZGljdFtvYmogYXMgYW55XSA9IG9iajtcbiAgICBlbHNlIHRoaXMuZGljdFtlbnN1cmVHdWlkKG9iaiBhcyBhbnkpXSA9IG9iajtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlbGV0ZShvYmo6IFQpIHtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIGRlbGV0ZSB0aGlzLmRpY3Rbb2JqIGFzIGFueV07XG4gICAgZWxzZSBpZiAoKG9iaiBhcyBhbnkpLl9ndWlkKSBkZWxldGUgdGhpcy5kaWN0WyhvYmogYXMgYW55KS5fZ3VpZF07XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0YWNrSW1wbDxUPiBpbXBsZW1lbnRzIFN0YWNrPFQ+IHtcbiAgcHJpdmF0ZSBzdGFjazogVFtdID0gW107XG4gIHB1YmxpYyBjdXJyZW50OiBPcHRpb248VD4gPSBudWxsO1xuXG4gIHB1YmxpYyBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGg7XG4gIH1cblxuICBwdXNoKGl0ZW06IFQpIHtcbiAgICB0aGlzLmN1cnJlbnQgPSBpdGVtO1xuICAgIHRoaXMuc3RhY2sucHVzaChpdGVtKTtcbiAgfVxuXG4gIHBvcCgpOiBPcHRpb248VD4ge1xuICAgIGxldCBpdGVtID0gdGhpcy5zdGFjay5wb3AoKTtcbiAgICBsZXQgbGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgdGhpcy5jdXJyZW50ID0gbGVuID09PSAwID8gbnVsbCA6IHRoaXMuc3RhY2tbbGVuIC0gMV07XG5cbiAgICByZXR1cm4gaXRlbSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGl0ZW07XG4gIH1cblxuICBudGgoZnJvbTogbnVtYmVyKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgbGVuID0gdGhpcy5zdGFjay5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbiA8IGZyb20gPyBudWxsIDogdGhpcy5zdGFja1tsZW4gLSBmcm9tXTtcbiAgfVxuXG4gIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2subGVuZ3RoID09PSAwO1xuICB9XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9