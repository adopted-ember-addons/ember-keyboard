import { isDestroyable, isStringDestroyable, DESTROY } from './destroy';

export const LINKED = new WeakMap();
export const DROP = 'DROP [94d46cf3-3974-435d-b278-3e60d1155290]';
export const CHILDREN = 'CHILDREN [7142e52a-8600-4e01-a773-42055b96630d]';
export const DESTRUCTORS = new WeakMap();
export function isDrop(value) {
    if (value === null || typeof value !== 'object') return false;
    return DROP in value;
}
export function associate(parent, child) {
    associateDestructor(parent, destructor(child));
}
export function associateDestructor(parent, child) {
    let associated = LINKED.get(parent);
    if (!associated) {
        associated = new Set();
        LINKED.set(parent, associated);
    }
    associated.add(child);
}
export function takeAssociated(parent) {
    let linked = LINKED.get(parent);
    if (linked && linked.size > 0) {
        LINKED.delete(parent);
        return linked;
    } else {
        return null;
    }
}
export function destroyAssociated(parent) {
    let associated = LINKED.get(parent);
    if (associated) {
        associated.forEach(item => {
            item[DROP]();
            associated.delete(item);
        });
    }
}
export function destructor(value) {
    let d = DESTRUCTORS.get(value);
    if (!d) {
        if (isDestroyable(value)) {
            d = new DestroyableDestructor(value);
        } else if (isStringDestroyable(value)) {
            d = new StringDestroyableDestructor(value);
        } else {
            d = new SimpleDestructor(value);
        }
        DESTRUCTORS.set(value, d);
    }
    return d;
}
export function snapshot(values) {
    return new SnapshotDestructor(values);
}
class SnapshotDestructor {
    constructor(destructors) {
        this.destructors = destructors;
    }
    [DROP]() {
        this.destructors.forEach(item => item[DROP]());
    }
    get [CHILDREN]() {
        return this.destructors;
    }
    toString() {
        return 'SnapshotDestructor';
    }
}
class DestroyableDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        this.inner[DESTROY]();
        destroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'DestroyableDestructor';
    }
}
class StringDestroyableDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        this.inner.destroy();
        destroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'StringDestroyableDestructor';
    }
}
class SimpleDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        destroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'SimpleDestructor';
    }
}
export class ListContentsDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        this.inner.forEachNode(d => destructor(d)[DROP]());
    }
    get [CHILDREN]() {
        let out = [];
        this.inner.forEachNode(d => out.push(...destructor(d)[CHILDREN]));
        return out;
    }
    toString() {
        return 'ListContentsDestructor';
    }
}
export function debugDropTree(inner) {
    let hasDrop = isDrop(inner);
    let rawChildren = LINKED.get(inner) || null;
    let children = null;
    if (rawChildren) {
        children = [];
        for (let child of rawChildren) {
            children.push(debugDropTree(child));
        }
    }
    let obj = Object.create(null);
    obj.inner = inner;
    if (children) {
        obj.children = children;
    }
    obj.hasDrop = hasDrop;
    return obj;
}
export function printDropTree(inner) {
    printDrop(destructor(inner));
}
export function printDrop(inner) {
    console.group(String(inner));
    console.log(inner);
    let children = inner[CHILDREN] || null;
    if (children) {
        for (let child of children) {
            printDrop(child);
        }
    }
    console.groupEnd();
}
if (false && typeof window !== 'undefined') {
    window.PRINT_DROP = printDropTree;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpZmV0aW1lcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTLGFBQVQsRUFBd0IsbUJBQXhCLEVBQTZDLE9BQTdDLFFBQTRELFdBQTVEOztBQVlBLE9BQU8sTUFBTSxTQUFxQyxJQUFJLE9BQUosRUFBM0M7QUFDUCxPQUFPLE1BQU0sT0FBbUIsNkNBQXpCO0FBQ1AsT0FBTyxNQUFNLFdBQTJCLGlEQUFqQztBQUNQLE9BQU8sTUFBTSxjQUFjLElBQUksT0FBSixFQUFwQjtBQUVQLE9BQU0sU0FBVSxNQUFWLENBQWlCLEtBQWpCLEVBQStCO0FBQ25DLFFBQUksVUFBVSxJQUFWLElBQWtCLE9BQU8sS0FBUCxLQUFpQixRQUF2QyxFQUFpRCxPQUFPLEtBQVA7QUFDakQsV0FBTyxRQUFTLEtBQWhCO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsU0FBVixDQUFvQixNQUFwQixFQUFvQyxLQUFwQyxFQUFpRDtBQUNyRCx3QkFBb0IsTUFBcEIsRUFBNEIsV0FBVyxLQUFYLENBQTVCO0FBQ0Q7QUFFRCxPQUFNLFNBQVUsbUJBQVYsQ0FBOEIsTUFBOUIsRUFBOEMsS0FBOUMsRUFBeUQ7QUFDN0QsUUFBSSxhQUFhLE9BQU8sR0FBUCxDQUFXLE1BQVgsQ0FBakI7QUFFQSxRQUFJLENBQUMsVUFBTCxFQUFpQjtBQUNmLHFCQUFhLElBQUksR0FBSixFQUFiO0FBQ0EsZUFBTyxHQUFQLENBQVcsTUFBWCxFQUFtQixVQUFuQjtBQUNEO0FBRUQsZUFBVyxHQUFYLENBQWUsS0FBZjtBQUNEO0FBRUQsT0FBTSxTQUFVLGNBQVYsQ0FBeUIsTUFBekIsRUFBdUM7QUFDM0MsUUFBSSxTQUFTLE9BQU8sR0FBUCxDQUFXLE1BQVgsQ0FBYjtBQUVBLFFBQUksVUFBVSxPQUFPLElBQVAsR0FBYyxDQUE1QixFQUErQjtBQUM3QixlQUFPLE1BQVAsQ0FBYyxNQUFkO0FBQ0EsZUFBTyxNQUFQO0FBQ0QsS0FIRCxN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LEVBQWM7QUFDWixhQUFLLElBQUksS0FBVCxJQUFrQixRQUFsQixFQUE0QjtBQUMxQixzQkFBVSxLQUFWO0FBQ0Q7QUFDRjtBQUVELFlBQVEsUUFBUjtBQUNEO0FBRUQsSUFBSSxTQUFXLE9BQU8sTUFBUCxLQUFrQixXQUFqQyxFQUE4QztBQUMzQyxXQUFlLFVBQWYsR0FBNEIsYUFBNUI7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRGVzdHJveWFibGUsIGlzU3RyaW5nRGVzdHJveWFibGUsIERFU1RST1kgfSBmcm9tICcuL2Rlc3Ryb3knO1xuaW1wb3J0IHtcbiAgT3B0aW9uLFxuICBTeW1ib2xEZXN0cm95YWJsZSxcbiAgRGVzdHJveWFibGUsXG4gIERyb3AsXG4gIERyb3BTeW1ib2wsXG4gIENoaWxkcmVuU3ltYm9sLFxufSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IExpbmtlZExpc3QsIExpbmtlZExpc3ROb2RlIH0gZnJvbSAnLi9saXN0LXV0aWxzJztcbmltcG9ydCB7IERFVk1PREUgfSBmcm9tICdAZ2xpbW1lci9sb2NhbC1kZWJ1Zy1mbGFncyc7XG5cbmV4cG9ydCBjb25zdCBMSU5LRUQ6IFdlYWtNYXA8b2JqZWN0LCBTZXQ8RHJvcD4+ID0gbmV3IFdlYWtNYXAoKTtcbmV4cG9ydCBjb25zdCBEUk9QOiBEcm9wU3ltYm9sID0gJ0RST1AgWzk0ZDQ2Y2YzLTM5NzQtNDM1ZC1iMjc4LTNlNjBkMTE1NTI5MF0nO1xuZXhwb3J0IGNvbnN0IENISUxEUkVOOiBDaGlsZHJlblN5bWJvbCA9ICdDSElMRFJFTiBbNzE0MmU1MmEtODYwMC00ZTAxLWE3NzMtNDIwNTViOTY2MzBkXSc7XG5leHBvcnQgY29uc3QgREVTVFJVQ1RPUlMgPSBuZXcgV2Vha01hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEcm9wKHZhbHVlOiB1bmtub3duKTogdmFsdWUgaXMgRHJvcCB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBEUk9QIGluICh2YWx1ZSBhcyBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzb2NpYXRlKHBhcmVudDogb2JqZWN0LCBjaGlsZDogb2JqZWN0KSB7XG4gIGFzc29jaWF0ZURlc3RydWN0b3IocGFyZW50LCBkZXN0cnVjdG9yKGNoaWxkKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NvY2lhdGVEZXN0cnVjdG9yKHBhcmVudDogb2JqZWN0LCBjaGlsZDogRHJvcCk6IHZvaWQge1xuICBsZXQgYXNzb2NpYXRlZCA9IExJTktFRC5nZXQocGFyZW50KTtcblxuICBpZiAoIWFzc29jaWF0ZWQpIHtcbiAgICBhc3NvY2lhdGVkID0gbmV3IFNldCgpO1xuICAgIExJTktFRC5zZXQocGFyZW50LCBhc3NvY2lhdGVkKTtcbiAgfVxuXG4gIGFzc29jaWF0ZWQuYWRkKGNoaWxkKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VBc3NvY2lhdGVkKHBhcmVudDogb2JqZWN0KTogT3B0aW9uPFNldDxEcm9wPj4ge1xuICBsZXQgbGlua2VkID0gTElOS0VELmdldChwYXJlbnQpO1xuXG4gIGlmIChsaW5rZWQgJiYgbGlua2VkLnNpemUgPiAwKSB7XG4gICAgTElOS0VELmRlbGV0ZShwYXJlbnQpO1xuICAgIHJldHVybiBsaW5rZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlc3Ryb3lBc3NvY2lhdGVkKHBhcmVudDogb2JqZWN0KSB7XG4gIGxldCBhc3NvY2lhdGVkID0gTElOS0VELmdldChwYXJlbnQpO1xuXG4gIGlmIChhc3NvY2lhdGVkKSB7XG4gICAgYXNzb2NpYXRlZC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgaXRlbVtEUk9QXSgpO1xuICAgICAgYXNzb2NpYXRlZCEuZGVsZXRlKGl0ZW0pO1xuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXN0cnVjdG9yKHZhbHVlOiBvYmplY3QpOiBEcm9wIHtcbiAgbGV0IGQgPSBERVNUUlVDVE9SUy5nZXQodmFsdWUpO1xuXG4gIGlmICghZCkge1xuICAgIGlmIChpc0Rlc3Ryb3lhYmxlKHZhbHVlKSkge1xuICAgICAgZCA9IG5ldyBEZXN0cm95YWJsZURlc3RydWN0b3IodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoaXNTdHJpbmdEZXN0cm95YWJsZSh2YWx1ZSkpIHtcbiAgICAgIGQgPSBuZXcgU3RyaW5nRGVzdHJveWFibGVEZXN0cnVjdG9yKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZCA9IG5ldyBTaW1wbGVEZXN0cnVjdG9yKHZhbHVlKTtcbiAgICB9XG5cbiAgICBERVNUUlVDVE9SUy5zZXQodmFsdWUsIGQpO1xuICB9XG5cbiAgcmV0dXJuIGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzbmFwc2hvdCh2YWx1ZXM6IFNldDxEcm9wPik6IERyb3Age1xuICByZXR1cm4gbmV3IFNuYXBzaG90RGVzdHJ1Y3Rvcih2YWx1ZXMpO1xufVxuXG5jbGFzcyBTbmFwc2hvdERlc3RydWN0b3IgaW1wbGVtZW50cyBEcm9wIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkZXN0cnVjdG9yczogU2V0PERyb3A+KSB7fVxuXG4gIFtEUk9QXSgpIHtcbiAgICB0aGlzLmRlc3RydWN0b3JzLmZvckVhY2goaXRlbSA9PiBpdGVtW0RST1BdKCkpO1xuICB9XG5cbiAgZ2V0IFtDSElMRFJFTl0oKTogSXRlcmFibGU8RHJvcD4ge1xuICAgIHJldHVybiB0aGlzLmRlc3RydWN0b3JzO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdTbmFwc2hvdERlc3RydWN0b3InO1xuICB9XG59XG5cbmNsYXNzIERlc3Ryb3lhYmxlRGVzdHJ1Y3RvciBpbXBsZW1lbnRzIERyb3Age1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBTeW1ib2xEZXN0cm95YWJsZSkge31cblxuICBbRFJPUF0oKSB7XG4gICAgdGhpcy5pbm5lcltERVNUUk9ZXSgpO1xuICAgIGRlc3Ryb3lBc3NvY2lhdGVkKHRoaXMuaW5uZXIpO1xuICB9XG5cbiAgZ2V0IFtDSElMRFJFTl0oKTogSXRlcmFibGU8RHJvcD4ge1xuICAgIHJldHVybiBMSU5LRUQuZ2V0KHRoaXMuaW5uZXIpIHx8IFtdO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdEZXN0cm95YWJsZURlc3RydWN0b3InO1xuICB9XG59XG5cbmNsYXNzIFN0cmluZ0Rlc3Ryb3lhYmxlRGVzdHJ1Y3RvciBpbXBsZW1lbnRzIERyb3Age1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBEZXN0cm95YWJsZSkge31cblxuICBbRFJPUF0oKSB7XG4gICAgdGhpcy5pbm5lci5kZXN0cm95KCk7XG4gICAgZGVzdHJveUFzc29jaWF0ZWQodGhpcy5pbm5lcik7XG4gIH1cblxuICBnZXQgW0NISUxEUkVOXSgpOiBJdGVyYWJsZTxEcm9wPiB7XG4gICAgcmV0dXJuIExJTktFRC5nZXQodGhpcy5pbm5lcikgfHwgW107XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1N0cmluZ0Rlc3Ryb3lhYmxlRGVzdHJ1Y3Rvcic7XG4gIH1cbn1cblxuY2xhc3MgU2ltcGxlRGVzdHJ1Y3RvciBpbXBsZW1lbnRzIERyb3Age1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBvYmplY3QpIHt9XG5cbiAgW0RST1BdKCkge1xuICAgIGRlc3Ryb3lBc3NvY2lhdGVkKHRoaXMuaW5uZXIpO1xuICB9XG5cbiAgZ2V0IFtDSElMRFJFTl0oKTogSXRlcmFibGU8RHJvcD4ge1xuICAgIHJldHVybiBMSU5LRUQuZ2V0KHRoaXMuaW5uZXIpIHx8IFtdO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdTaW1wbGVEZXN0cnVjdG9yJztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGlzdENvbnRlbnRzRGVzdHJ1Y3RvciBpbXBsZW1lbnRzIERyb3Age1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBMaW5rZWRMaXN0PExpbmtlZExpc3ROb2RlPikge31cblxuICBbRFJPUF0oKSB7XG4gICAgdGhpcy5pbm5lci5mb3JFYWNoTm9kZShkID0+IGRlc3RydWN0b3IoZClbRFJPUF0oKSk7XG4gIH1cblxuICBnZXQgW0NISUxEUkVOXSgpOiBJdGVyYWJsZTxEcm9wPiB7XG4gICAgbGV0IG91dDogRHJvcFtdID0gW107XG4gICAgdGhpcy5pbm5lci5mb3JFYWNoTm9kZShkID0+IG91dC5wdXNoKC4uLmRlc3RydWN0b3IoZClbQ0hJTERSRU5dKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnTGlzdENvbnRlbnRzRGVzdHJ1Y3Rvcic7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWJ1Z05vZGUge1xuICBpbm5lcjogb2JqZWN0O1xuICBjaGlsZHJlbjogRGVidWdOb2RlW10gfCBudWxsO1xuICBoYXNEcm9wOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVidWdEcm9wVHJlZShpbm5lcjogb2JqZWN0KTogRGVidWdOb2RlIHtcbiAgbGV0IGhhc0Ryb3AgPSBpc0Ryb3AoaW5uZXIpO1xuICBsZXQgcmF3Q2hpbGRyZW4gPSBMSU5LRUQuZ2V0KGlubmVyKSB8fCBudWxsO1xuICBsZXQgY2hpbGRyZW46IERlYnVnTm9kZVtdIHwgbnVsbCA9IG51bGw7XG5cbiAgaWYgKHJhd0NoaWxkcmVuKSB7XG4gICAgY2hpbGRyZW4gPSBbXTtcbiAgICBmb3IgKGxldCBjaGlsZCBvZiByYXdDaGlsZHJlbikge1xuICAgICAgY2hpbGRyZW4ucHVzaChkZWJ1Z0Ryb3BUcmVlKGNoaWxkKSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIG9iai5pbm5lciA9IGlubmVyO1xuICBpZiAoY2hpbGRyZW4pIHtcbiAgICBvYmouY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfVxuICBvYmouaGFzRHJvcCA9IGhhc0Ryb3A7XG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludERyb3BUcmVlKGlubmVyOiBvYmplY3QpIHtcbiAgcHJpbnREcm9wKGRlc3RydWN0b3IoaW5uZXIpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50RHJvcChpbm5lcjogRHJvcCkge1xuICBjb25zb2xlLmdyb3VwKFN0cmluZyhpbm5lcikpO1xuXG4gIGNvbnNvbGUubG9nKGlubmVyKTtcblxuICBsZXQgY2hpbGRyZW4gPSBpbm5lcltDSElMRFJFTl0gfHwgbnVsbDtcbiAgaWYgKGNoaWxkcmVuKSB7XG4gICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgIHByaW50RHJvcChjaGlsZCk7XG4gICAgfVxuICB9XG5cbiAgY29uc29sZS5ncm91cEVuZCgpO1xufVxuXG5pZiAoREVWTU9ERSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAod2luZG93IGFzIGFueSkuUFJJTlRfRFJPUCA9IHByaW50RHJvcFRyZWU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9