'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ListContentsDestructor = exports.DESTRUCTORS = exports.CHILDREN = exports.DROP = exports.LINKED = undefined;
exports.isDrop = isDrop;
exports.associate = associate;
exports.associateDestructor = associateDestructor;
exports.takeAssociated = takeAssociated;
exports.destroyAssociated = destroyAssociated;
exports.destructor = destructor;
exports.snapshot = snapshot;
exports.debugDropTree = debugDropTree;
exports.printDropTree = printDropTree;
exports.printDrop = printDrop;

var _destroy = require('./destroy');

const LINKED = exports.LINKED = new WeakMap();
const DROP = exports.DROP = 'DROP [94d46cf3-3974-435d-b278-3e60d1155290]';
const CHILDREN = exports.CHILDREN = 'CHILDREN [7142e52a-8600-4e01-a773-42055b96630d]';
const DESTRUCTORS = exports.DESTRUCTORS = new WeakMap();
function isDrop(value) {
    if (value === null || typeof value !== 'object') return false;
    return DROP in value;
}
function associate(parent, child) {
    associateDestructor(parent, destructor(child));
}
function associateDestructor(parent, child) {
    let associated = LINKED.get(parent);
    if (!associated) {
        associated = new Set();
        LINKED.set(parent, associated);
    }
    associated.add(child);
}
function takeAssociated(parent) {
    let linked = LINKED.get(parent);
    if (linked && linked.size > 0) {
        LINKED.delete(parent);
        return linked;
    } else {
        return null;
    }
}
function destroyAssociated(parent) {
    let associated = LINKED.get(parent);
    if (associated) {
        associated.forEach(item => {
            item[DROP]();
            associated.delete(item);
        });
    }
}
function destructor(value) {
    let d = DESTRUCTORS.get(value);
    if (!d) {
        if ((0, _destroy.isDestroyable)(value)) {
            d = new DestroyableDestructor(value);
        } else if ((0, _destroy.isStringDestroyable)(value)) {
            d = new StringDestroyableDestructor(value);
        } else {
            d = new SimpleDestructor(value);
        }
        DESTRUCTORS.set(value, d);
    }
    return d;
}
function snapshot(values) {
    return new SnapshotDestructor(values);
}
class SnapshotDestructor {
    constructor(destructors) {
        this.destructors = destructors;
    }
    [DROP]() {
        this.destructors.forEach(item => item[DROP]());
    }
    get [CHILDREN]() {
        return this.destructors;
    }
    toString() {
        return 'SnapshotDestructor';
    }
}
class DestroyableDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        this.inner[_destroy.DESTROY]();
        destroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'DestroyableDestructor';
    }
}
class StringDestroyableDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        this.inner.destroy();
        destroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'StringDestroyableDestructor';
    }
}
class SimpleDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        destroyAssociated(this.inner);
    }
    get [CHILDREN]() {
        return LINKED.get(this.inner) || [];
    }
    toString() {
        return 'SimpleDestructor';
    }
}
class ListContentsDestructor {
    constructor(inner) {
        this.inner = inner;
    }
    [DROP]() {
        this.inner.forEachNode(d => destructor(d)[DROP]());
    }
    get [CHILDREN]() {
        let out = [];
        this.inner.forEachNode(d => out.push(...destructor(d)[CHILDREN]));
        return out;
    }
    toString() {
        return 'ListContentsDestructor';
    }
}
exports.ListContentsDestructor = ListContentsDestructor;
function debugDropTree(inner) {
    let hasDrop = isDrop(inner);
    let rawChildren = LINKED.get(inner) || null;
    let children = null;
    if (rawChildren) {
        children = [];
        for (let child of rawChildren) {
            children.push(debugDropTree(child));
        }
    }
    let obj = Object.create(null);
    obj.inner = inner;
    if (children) {
        obj.children = children;
    }
    obj.hasDrop = hasDrop;
    return obj;
}
function printDropTree(inner) {
    printDrop(destructor(inner));
}
function printDrop(inner) {
    console.group(String(inner));
    console.log(inner);
    let children = inner[CHILDREN] || null;
    if (children) {
        for (let child of children) {
            printDrop(child);
        }
    }
    console.groupEnd();
}
if (false && typeof window !== 'undefined') {
    window.PRINT_DROP = printDropTree;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,