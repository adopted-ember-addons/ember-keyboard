'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EMPTY_SLICE = exports.ListSlice = exports.LinkedList = exports.ListNode = undefined;

var _lifetimes = require('./lifetimes');

class ListNode {
    constructor(value) {
        this.next = null;
        this.prev = null;
        this.value = value;
    }
}
exports.ListNode = ListNode;
class LinkedList {
    constructor() {
        this.clear();
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    clear() {
        this._head = this._tail = null;
    }
    toArray() {
        let out = [];
        this.forEachNode(n => out.push(n));
        return out;
    }
    nextNode(node) {
        return node.next;
    }
    forEachNode(callback) {
        let node = this._head;
        while (node !== null) {
            callback(node);
            node = node.next;
        }
    }
    insertBefore(node, reference = null) {
        if (reference === null) return this.append(node);
        if (reference.prev) reference.prev.next = node;else this._head = node;
        node.prev = reference.prev;
        node.next = reference;
        reference.prev = node;
        return node;
    }
    append(node) {
        let tail = this._tail;
        if (tail) {
            tail.next = node;
            node.prev = tail;
            node.next = null;
        } else {
            this._head = node;
        }
        return this._tail = node;
    }
    remove(node) {
        if (node.prev) node.prev.next = node.next;else this._head = node.next;
        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
        return node;
    }
    [_lifetimes.DROP]() {
        this.forEachNode(d => (0, _lifetimes.destructor)(d)[_lifetimes.DROP]());
    }
    get [_lifetimes.CHILDREN]() {
        let out = [];
        this.forEachNode(d => out.push(...(0, _lifetimes.destructor)(d)[_lifetimes.CHILDREN]));
        return out;
    }
}
exports.LinkedList = LinkedList;
class ListSlice {
    constructor(head, tail) {
        this._head = head;
        this._tail = tail;
    }
    forEachNode(callback) {
        let node = this._head;
        while (node !== null) {
            callback(node);
            node = this.nextNode(node);
        }
    }
    head() {
        return this._head;
    }
    tail() {
        return this._tail;
    }
    toArray() {
        let out = [];
        this.forEachNode(n => out.push(n));
        return out;
    }
    nextNode(node) {
        if (node === this._tail) return null;
        return node.next;
    }
}
exports.ListSlice = ListSlice;
const EMPTY_SLICE = exports.EMPTY_SLICE = new ListSlice(null, null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBU00sTUFBQSxRQUFBLENBQWU7QUFLbkIsZ0JBQUEsS0FBQSxFQUFvQjtBQUpiLGFBQUEsSUFBQSxHQUFBLElBQUE7QUFDQSxhQUFBLElBQUEsR0FBQSxJQUFBO0FBSUwsYUFBQSxLQUFBLEdBQUEsS0FBQTtBQUNEO0FBUGtCO1FBQWYsUSxHQUFBLFE7QUFjQSxNQUFBLFVBQUEsQ0FBaUI7QUFJckIsa0JBQUE7QUFDRSxhQUFBLEtBQUE7QUFDRDtBQUVELFdBQUk7QUFDRixlQUFPLEtBQVAsS0FBQTtBQUNEO0FBRUQsV0FBSTtBQUNGLGVBQU8sS0FBUCxLQUFBO0FBQ0Q7QUFFRCxZQUFLO0FBQ0gsYUFBQSxLQUFBLEdBQWEsS0FBQSxLQUFBLEdBQWIsSUFBQTtBQUNEO0FBRUQsY0FBTztBQUNMLFlBQUksTUFBSixFQUFBO0FBQ0EsYUFBQSxXQUFBLENBQWlCLEtBQUssSUFBQSxJQUFBLENBQXRCLENBQXNCLENBQXRCO0FBQ0EsZUFBQSxHQUFBO0FBQ0Q7QUFFRCxhQUFBLElBQUEsRUFBZ0I7QUFDZCxlQUFPLEtBQVAsSUFBQTtBQUNEO0FBRUQsZ0JBQUEsUUFBQSxFQUF1QztBQUNyQyxZQUFJLE9BQU8sS0FBWCxLQUFBO0FBRUEsZUFBTyxTQUFQLElBQUEsRUFBc0I7QUFDcEIscUJBQUEsSUFBQTtBQUNBLG1CQUFPLEtBQVAsSUFBQTtBQUNEO0FBQ0Y7QUFFRCxpQkFBQSxJQUFBLEVBQXNCLFlBQXRCLElBQUEsRUFBaUQ7QUFDL0MsWUFBSSxjQUFKLElBQUEsRUFBd0IsT0FBTyxLQUFBLE1BQUEsQ0FBUCxJQUFPLENBQVA7QUFFeEIsWUFBSSxVQUFKLElBQUEsRUFBb0IsVUFBQSxJQUFBLENBQUEsSUFBQSxHQUFwQixJQUFvQixDQUFwQixLQUNLLEtBQUEsS0FBQSxHQUFBLElBQUE7QUFFTCxhQUFBLElBQUEsR0FBWSxVQUFaLElBQUE7QUFDQSxhQUFBLElBQUEsR0FBQSxTQUFBO0FBQ0Esa0JBQUEsSUFBQSxHQUFBLElBQUE7QUFFQSxlQUFBLElBQUE7QUFDRDtBQUVELFdBQUEsSUFBQSxFQUFjO0FBQ1osWUFBSSxPQUFPLEtBQVgsS0FBQTtBQUVBLFlBQUEsSUFBQSxFQUFVO0FBQ1IsaUJBQUEsSUFBQSxHQUFBLElBQUE7QUFDQSxpQkFBQSxJQUFBLEdBQUEsSUFBQTtBQUNBLGlCQUFBLElBQUEsR0FBQSxJQUFBO0FBSEYsU0FBQSxNQUlPO0FBQ0wsaUJBQUEsS0FBQSxHQUFBLElBQUE7QUFDRDtBQUVELGVBQVEsS0FBQSxLQUFBLEdBQVIsSUFBQTtBQUNEO0FBRUQsV0FBQSxJQUFBLEVBQWM7QUFDWixZQUFJLEtBQUosSUFBQSxFQUFlLEtBQUEsSUFBQSxDQUFBLElBQUEsR0FBaUIsS0FBaEMsSUFBZSxDQUFmLEtBQ0ssS0FBQSxLQUFBLEdBQWEsS0FBYixJQUFBO0FBRUwsWUFBSSxLQUFKLElBQUEsRUFBZSxLQUFBLElBQUEsQ0FBQSxJQUFBLEdBQWlCLEtBQWhDLElBQWUsQ0FBZixLQUNLLEtBQUEsS0FBQSxHQUFhLEtBQWIsSUFBQTtBQUVMLGVBQUEsSUFBQTtBQUNEO0FBRUQsS0FBQSxlQUFBLElBQU07QUFDSixhQUFBLFdBQUEsQ0FBaUIsS0FBSywyQkFBQSxDQUFBLEVBQXRCLGVBQXNCLEdBQXRCO0FBQ0Q7QUFFRCxTQUFBLG1CQUFBLElBQWM7QUFDWixZQUFJLE1BQUosRUFBQTtBQUNBLGFBQUEsV0FBQSxDQUFpQixLQUFLLElBQUEsSUFBQSxDQUFTLEdBQUcsMkJBQUEsQ0FBQSxFQUFsQyxtQkFBa0MsQ0FBWixDQUF0QjtBQUNBLGVBQUEsR0FBQTtBQUNEO0FBcEZvQjtRQUFqQixVLEdBQUEsVTtBQW1HQSxNQUFBLFNBQUEsQ0FBZ0I7QUFJcEIsZ0JBQUEsSUFBQSxFQUFBLElBQUEsRUFBNEM7QUFDMUMsYUFBQSxLQUFBLEdBQUEsSUFBQTtBQUNBLGFBQUEsS0FBQSxHQUFBLElBQUE7QUFDRDtBQUVELGdCQUFBLFFBQUEsRUFBdUM7QUFDckMsWUFBSSxPQUFPLEtBQVgsS0FBQTtBQUVBLGVBQU8sU0FBUCxJQUFBLEVBQXNCO0FBQ3BCLHFCQUFBLElBQUE7QUFDQSxtQkFBTyxLQUFBLFFBQUEsQ0FBUCxJQUFPLENBQVA7QUFDRDtBQUNGO0FBRUQsV0FBSTtBQUNGLGVBQU8sS0FBUCxLQUFBO0FBQ0Q7QUFFRCxXQUFJO0FBQ0YsZUFBTyxLQUFQLEtBQUE7QUFDRDtBQUVELGNBQU87QUFDTCxZQUFJLE1BQUosRUFBQTtBQUNBLGFBQUEsV0FBQSxDQUFpQixLQUFLLElBQUEsSUFBQSxDQUF0QixDQUFzQixDQUF0QjtBQUNBLGVBQUEsR0FBQTtBQUNEO0FBRUQsYUFBQSxJQUFBLEVBQWdCO0FBQ2QsWUFBSSxTQUFTLEtBQWIsS0FBQSxFQUF5QixPQUFBLElBQUE7QUFDekIsZUFBTyxLQUFQLElBQUE7QUFDRDtBQW5DbUI7UUFBaEIsUyxHQUFBLFM7QUFzQ0MsTUFBTSxvQ0FBYyxJQUFBLFNBQUEsQ0FBQSxJQUFBLEVBQXBCLElBQW9CLENBQXBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9wbGF0Zm9ybS11dGlscyc7XG5pbXBvcnQgeyBEUk9QLCBkZXN0cnVjdG9yLCBDSElMRFJFTiB9IGZyb20gJy4vbGlmZXRpbWVzJztcbmltcG9ydCB7IERyb3AgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBMaW5rZWRMaXN0Tm9kZSB7XG4gIG5leHQ6IE9wdGlvbjxMaW5rZWRMaXN0Tm9kZT47XG4gIHByZXY6IE9wdGlvbjxMaW5rZWRMaXN0Tm9kZT47XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0Tm9kZTxUPiBpbXBsZW1lbnRzIExpbmtlZExpc3ROb2RlIHtcbiAgcHVibGljIG5leHQ6IE9wdGlvbjxMaXN0Tm9kZTxUPj4gPSBudWxsO1xuICBwdWJsaWMgcHJldjogT3B0aW9uPExpc3ROb2RlPFQ+PiA9IG51bGw7XG4gIHB1YmxpYyB2YWx1ZTogVDtcblxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxufVxuXG4vLyB3ZSBhcmUgdW5hYmxlIHRvIGV4cHJlc3MgdGhlIGNvbnN0cmFpbnQgdGhhdCBUJ3MgLnByZXYgYW5kIC5uZXh0IGFyZVxuLy8gdGhlbXNlbHZlcyBULiBIb3dldmVyLCBpdCB3aWxsIGFsd2F5cyBiZSB0cnVlLCBzbyB0cnVzdCB1cy5cbnR5cGUgdHJ1c3QgPSBhbnk7XG5cbmV4cG9ydCBjbGFzcyBMaW5rZWRMaXN0PFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4gaW1wbGVtZW50cyBTbGljZTxUPiwgRHJvcCB7XG4gIHByaXZhdGUgX2hlYWQhOiBPcHRpb248VD47XG4gIHByaXZhdGUgX3RhaWwhOiBPcHRpb248VD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGVhcigpO1xuICB9XG5cbiAgaGVhZCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl9oZWFkO1xuICB9XG5cbiAgdGFpbCgpOiBPcHRpb248VD4ge1xuICAgIHJldHVybiB0aGlzLl90YWlsO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5faGVhZCA9IHRoaXMuX3RhaWwgPSBudWxsO1xuICB9XG5cbiAgdG9BcnJheSgpOiBUW10ge1xuICAgIGxldCBvdXQ6IFRbXSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaE5vZGUobiA9PiBvdXQucHVzaChuKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIG5leHROb2RlKG5vZGU6IFQpOiBUIHtcbiAgICByZXR1cm4gbm9kZS5uZXh0IGFzIHRydXN0O1xuICB9XG5cbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLl9oZWFkO1xuXG4gICAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKG5vZGUgYXMgdHJ1c3QpO1xuICAgICAgbm9kZSA9IG5vZGUubmV4dCBhcyB0cnVzdDtcbiAgICB9XG4gIH1cblxuICBpbnNlcnRCZWZvcmUobm9kZTogVCwgcmVmZXJlbmNlOiBPcHRpb248VD4gPSBudWxsKTogVCB7XG4gICAgaWYgKHJlZmVyZW5jZSA9PT0gbnVsbCkgcmV0dXJuIHRoaXMuYXBwZW5kKG5vZGUpO1xuXG4gICAgaWYgKHJlZmVyZW5jZS5wcmV2KSByZWZlcmVuY2UucHJldi5uZXh0ID0gbm9kZTtcbiAgICBlbHNlIHRoaXMuX2hlYWQgPSBub2RlO1xuXG4gICAgbm9kZS5wcmV2ID0gcmVmZXJlbmNlLnByZXY7XG4gICAgbm9kZS5uZXh0ID0gcmVmZXJlbmNlO1xuICAgIHJlZmVyZW5jZS5wcmV2ID0gbm9kZTtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgYXBwZW5kKG5vZGU6IFQpOiBUIHtcbiAgICBsZXQgdGFpbCA9IHRoaXMuX3RhaWw7XG5cbiAgICBpZiAodGFpbCkge1xuICAgICAgdGFpbC5uZXh0ID0gbm9kZTtcbiAgICAgIG5vZGUucHJldiA9IHRhaWw7XG4gICAgICBub2RlLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oZWFkID0gbm9kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX3RhaWwgPSBub2RlKTtcbiAgfVxuXG4gIHJlbW92ZShub2RlOiBUKTogVCB7XG4gICAgaWYgKG5vZGUucHJldikgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHQ7XG4gICAgZWxzZSB0aGlzLl9oZWFkID0gbm9kZS5uZXh0IGFzIHRydXN0O1xuXG4gICAgaWYgKG5vZGUubmV4dCkgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXY7XG4gICAgZWxzZSB0aGlzLl90YWlsID0gbm9kZS5wcmV2IGFzIHRydXN0O1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBbRFJPUF0oKSB7XG4gICAgdGhpcy5mb3JFYWNoTm9kZShkID0+IGRlc3RydWN0b3IoZClbRFJPUF0oKSk7XG4gIH1cblxuICBnZXQgW0NISUxEUkVOXSgpOiBJdGVyYWJsZTxEcm9wPiB7XG4gICAgbGV0IG91dDogRHJvcFtdID0gW107XG4gICAgdGhpcy5mb3JFYWNoTm9kZShkID0+IG91dC5wdXNoKC4uLmRlc3RydWN0b3IoZClbQ0hJTERSRU5dKSk7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNsaWNlPFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4ge1xuICBoZWFkKCk6IE9wdGlvbjxUPjtcbiAgdGFpbCgpOiBPcHRpb248VD47XG4gIG5leHROb2RlKG5vZGU6IFQpOiBPcHRpb248VD47XG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCk6IHZvaWQ7XG4gIHRvQXJyYXkoKTogVFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb25lYWJsZUxpc3ROb2RlIGV4dGVuZHMgTGlua2VkTGlzdE5vZGUge1xuICBjbG9uZSgpOiB0aGlzO1xufVxuXG5leHBvcnQgY2xhc3MgTGlzdFNsaWNlPFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4gaW1wbGVtZW50cyBTbGljZTxUPiB7XG4gIHByaXZhdGUgX2hlYWQ6IE9wdGlvbjxUPjtcbiAgcHJpdmF0ZSBfdGFpbDogT3B0aW9uPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKGhlYWQ6IE9wdGlvbjxUPiwgdGFpbDogT3B0aW9uPFQ+KSB7XG4gICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgdGhpcy5fdGFpbCA9IHRhaWw7XG4gIH1cblxuICBmb3JFYWNoTm9kZShjYWxsYmFjazogKG5vZGU6IFQpID0+IHZvaWQpIHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuX2hlYWQ7XG5cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICBub2RlID0gdGhpcy5uZXh0Tm9kZShub2RlKTtcbiAgICB9XG4gIH1cblxuICBoZWFkKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQ7XG4gIH1cblxuICB0YWlsKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RhaWw7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7XG4gICAgbGV0IG91dDogVFtdID0gW107XG4gICAgdGhpcy5mb3JFYWNoTm9kZShuID0+IG91dC5wdXNoKG4pKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgbmV4dE5vZGUobm9kZTogVCk6IE9wdGlvbjxUPiB7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMuX3RhaWwpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBub2RlLm5leHQgYXMgVDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRU1QVFlfU0xJQ0UgPSBuZXcgTGlzdFNsaWNlKG51bGwsIG51bGwpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==