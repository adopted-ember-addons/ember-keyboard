"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dirtyTagFor = dirtyTagFor;
exports.tagMetaFor = tagMetaFor;
exports.tagFor = tagFor;

var _env = require("@glimmer/env");

var _validators = require("./validators");

var _debug = require("./debug");

var _utils = require("./utils");

function isObjectLike(u) {
  return typeof u === 'object' && u !== null || typeof u === 'function';
}

const TRACKED_TAGS = new WeakMap();

function dirtyTagFor(obj, key, meta) {
  if (_env.DEBUG && !isObjectLike(obj)) {
    throw new Error(`BUG: Can't update a tag for a primitive`);
  }

  let tags = meta === undefined ? TRACKED_TAGS.get(obj) : meta; // No tags have been setup for this object yet, return

  if (tags === undefined) return; // Dirty the tag for the specific property if it exists

  let propertyTag = tags.get(key);

  if (propertyTag !== undefined) {
    if (_env.DEBUG) {
      (0, _utils.unwrap)(_debug.assertTagNotConsumed)(propertyTag, obj, key);
    }

    (0, _validators.DIRTY_TAG)(propertyTag, true);
  }
}

function tagMetaFor(obj) {
  let tags = TRACKED_TAGS.get(obj);

  if (tags === undefined) {
    tags = new Map();
    TRACKED_TAGS.set(obj, tags);
  }

  return tags;
}

function tagFor(obj, key, meta) {
  let tags = meta === undefined ? tagMetaFor(obj) : meta;
  let tag = tags.get(key);

  if (tag === undefined) {
    tag = (0, _validators.createUpdatableTag)();
    tags.set(key, tag);
  }

  return tag;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvbWV0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxTQUFBLFlBQUEsQ0FBQSxDQUFBLEVBQTZCO0FBQzNCLFNBQVEsT0FBQSxDQUFBLEtBQUEsUUFBQSxJQUF5QixDQUFDLEtBQTNCLElBQUMsSUFBd0MsT0FBQSxDQUFBLEtBQWhELFVBQUE7QUFDRDs7QUFNRCxNQUFNLFlBQVksR0FBRyxJQUFyQixPQUFxQixFQUFyQjs7QUFFTSxTQUFBLFdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFHVTtBQUVkLE1BQUksY0FBUyxDQUFDLFlBQVksQ0FBMUIsR0FBMEIsQ0FBMUIsRUFBaUM7QUFDL0IsVUFBTSxJQUFBLEtBQUEsQ0FBTix5Q0FBTSxDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxJQUFJLEdBQUcsSUFBSSxLQUFKLFNBQUEsR0FBcUIsWUFBWSxDQUFaLEdBQUEsQ0FBckIsR0FBcUIsQ0FBckIsR0FORyxJQU1kLENBTmMsQ0FRZDs7QUFDQSxNQUFJLElBQUksS0FBUixTQUFBLEVBVGMsT0FBQSxDQVdkOztBQUNBLE1BQUksV0FBVyxHQUFHLElBQUksQ0FBSixHQUFBLENBQWxCLEdBQWtCLENBQWxCOztBQUVBLE1BQUksV0FBVyxLQUFmLFNBQUEsRUFBK0I7QUFDN0IsUUFBQSxVQUFBLEVBQVc7QUFDVCx5QkFBQSwyQkFBQSxFQUFBLFdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQTtBQUNEOztBQUVELCtCQUFTLFdBQVQsRUFBQSxJQUFBO0FBQ0Q7QUFDRjs7QUFFSyxTQUFBLFVBQUEsQ0FBQSxHQUFBLEVBQWdDO0FBQ3BDLE1BQUksSUFBSSxHQUFHLFlBQVksQ0FBWixHQUFBLENBQVgsR0FBVyxDQUFYOztBQUVBLE1BQUksSUFBSSxLQUFSLFNBQUEsRUFBd0I7QUFDdEIsSUFBQSxJQUFJLEdBQUcsSUFBUCxHQUFPLEVBQVA7QUFFQSxJQUFBLFlBQVksQ0FBWixHQUFBLENBQUEsR0FBQSxFQUFBLElBQUE7QUFDRDs7QUFFRCxTQUFBLElBQUE7QUFDRDs7QUFFSyxTQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFHVTtBQUVkLE1BQUksSUFBSSxHQUFHLElBQUksS0FBSixTQUFBLEdBQXFCLFVBQVUsQ0FBL0IsR0FBK0IsQ0FBL0IsR0FBWCxJQUFBO0FBQ0EsTUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFKLEdBQUEsQ0FBVixHQUFVLENBQVY7O0FBRUEsTUFBSSxHQUFHLEtBQVAsU0FBQSxFQUF1QjtBQUNyQixJQUFBLEdBQUcsR0FBSCxxQ0FBQTtBQUNBLElBQUEsSUFBSSxDQUFKLEdBQUEsQ0FBQSxHQUFBLEVBQUEsR0FBQTtBQUNEOztBQUVELFNBQUEsR0FBQTtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgREVCVUcgfSBmcm9tICdAZ2xpbW1lci9lbnYnO1xuaW1wb3J0IHsgRElSVFlfVEFHLCBjcmVhdGVVcGRhdGFibGVUYWcsIFVwZGF0YWJsZVRhZywgQ29uc3RhbnRUYWcgfSBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgYXNzZXJ0VGFnTm90Q29uc3VtZWQgfSBmcm9tICcuL2RlYnVnJztcbmltcG9ydCB7IEluZGV4YWJsZSwgdW53cmFwIH0gZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZTxUPih1OiBUKTogdSBpcyBJbmRleGFibGUgJiBUIHtcbiAgcmV0dXJuICh0eXBlb2YgdSA9PT0gJ29iamVjdCcgJiYgdSAhPT0gbnVsbCkgfHwgdHlwZW9mIHUgPT09ICdmdW5jdGlvbic7XG59XG5cbi8vLy8vLy8vLy8vXG5cbmV4cG9ydCB0eXBlIFRhZ01ldGEgPSBNYXA8UHJvcGVydHlLZXksIFVwZGF0YWJsZVRhZz47XG5cbmNvbnN0IFRSQUNLRURfVEFHUyA9IG5ldyBXZWFrTWFwPG9iamVjdCwgVGFnTWV0YT4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpcnR5VGFnRm9yPFQgZXh0ZW5kcyBvYmplY3Q+KFxuICBvYmo6IFQsXG4gIGtleToga2V5b2YgVCB8IHN0cmluZyB8IHN5bWJvbCxcbiAgbWV0YT86IFRhZ01ldGFcbik6IHZvaWQge1xuICBpZiAoREVCVUcgJiYgIWlzT2JqZWN0TGlrZShvYmopKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBCVUc6IENhbid0IHVwZGF0ZSBhIHRhZyBmb3IgYSBwcmltaXRpdmVgKTtcbiAgfVxuXG4gIGxldCB0YWdzID0gbWV0YSA9PT0gdW5kZWZpbmVkID8gVFJBQ0tFRF9UQUdTLmdldChvYmopIDogbWV0YTtcblxuICAvLyBObyB0YWdzIGhhdmUgYmVlbiBzZXR1cCBmb3IgdGhpcyBvYmplY3QgeWV0LCByZXR1cm5cbiAgaWYgKHRhZ3MgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gIC8vIERpcnR5IHRoZSB0YWcgZm9yIHRoZSBzcGVjaWZpYyBwcm9wZXJ0eSBpZiBpdCBleGlzdHNcbiAgbGV0IHByb3BlcnR5VGFnID0gdGFncy5nZXQoa2V5KTtcblxuICBpZiAocHJvcGVydHlUYWcgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChERUJVRykge1xuICAgICAgdW53cmFwKGFzc2VydFRhZ05vdENvbnN1bWVkKShwcm9wZXJ0eVRhZywgb2JqLCBrZXkpO1xuICAgIH1cblxuICAgIERJUlRZX1RBRyhwcm9wZXJ0eVRhZywgdHJ1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ01ldGFGb3Iob2JqOiBvYmplY3QpOiBUYWdNZXRhIHtcbiAgbGV0IHRhZ3MgPSBUUkFDS0VEX1RBR1MuZ2V0KG9iaik7XG5cbiAgaWYgKHRhZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgIHRhZ3MgPSBuZXcgTWFwKCk7XG5cbiAgICBUUkFDS0VEX1RBR1Muc2V0KG9iaiwgdGFncyk7XG4gIH1cblxuICByZXR1cm4gdGFncztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ0ZvcjxUIGV4dGVuZHMgb2JqZWN0PihcbiAgb2JqOiBULFxuICBrZXk6IGtleW9mIFQgfCBzdHJpbmcgfCBzeW1ib2wsXG4gIG1ldGE/OiBUYWdNZXRhXG4pOiBVcGRhdGFibGVUYWcgfCBDb25zdGFudFRhZyB7XG4gIGxldCB0YWdzID0gbWV0YSA9PT0gdW5kZWZpbmVkID8gdGFnTWV0YUZvcihvYmopIDogbWV0YTtcbiAgbGV0IHRhZyA9IHRhZ3MuZ2V0KGtleSk7XG5cbiAgaWYgKHRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGFnID0gY3JlYXRlVXBkYXRhYmxlVGFnKCk7XG4gICAgdGFncy5zZXQoa2V5LCB0YWcpO1xuICB9XG5cbiAgcmV0dXJuIHRhZztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=