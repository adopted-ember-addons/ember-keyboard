// eslint-disable-next-line @typescript-eslint/ban-types
export function indexable(input) {
  return input;
} // This is a duplicate utility from @glimmer/util because `@glimmer/validator`
// should not depend on any other @glimmer packages, in order to avoid pulling
// in types and prevent regressions in `@glimmer/tracking` (which has public types).

export const symbol = typeof Symbol !== 'undefined' ? Symbol : // eslint-disable-next-line @typescript-eslint/no-explicit-any
key => `__${key}${Math.floor(Math.random() * Date.now())}__`; // eslint-disable-next-line @typescript-eslint/no-explicit-any

export const symbolFor = typeof Symbol !== 'undefined' ? Symbol.for : key => `__GLIMMER_VALIDATOR_SYMBOL_FOR_${key}`;
export function getGlobal() {
  // eslint-disable-next-line node/no-unsupported-features/es-builtins
  if (typeof globalThis !== 'undefined') return indexable(globalThis);
  if (typeof self !== 'undefined') return indexable(self);
  if (typeof window !== 'undefined') return indexable(window);
  if (typeof global !== 'undefined') return indexable(global);
  throw new Error('unable to locate global object');
}
export function unwrap(val) {
  if (val === null || val === undefined) throw new Error(`Expected value to be present`);
  return val;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUE7QUFDQSxPQUFNLFNBQVUsU0FBVixDQUFzQyxLQUF0QyxFQUE4QztBQUNsRCxTQUFPLEtBQVA7QUFDRCxDLENBRUQ7QUFDQTtBQUNBOztBQUNBLE9BQU8sTUFBTSxNQUFNLEdBQ2pCLE9BQU8sTUFBUCxLQUFrQixXQUFsQixHQUNJLE1BREosR0FFSTtBQUNDLEdBQUQsSUFBaUIsS0FBSyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFJLENBQUMsTUFBTCxLQUFnQixJQUFJLENBQUMsR0FBTCxFQUEzQixDQUFzQyxJQUpqRSxDLENBTVA7O0FBQ0EsT0FBTyxNQUFNLFNBQVMsR0FDcEIsT0FBTyxNQUFQLEtBQWtCLFdBQWxCLEdBQ0ksTUFBTSxDQUFDLEdBRFgsR0FFSyxHQUFELElBQWlCLGtDQUFrQyxHQUFHLEVBSHJEO0FBS1AsT0FBTSxTQUFVLFNBQVYsR0FBbUI7QUFDdkI7QUFDQSxNQUFJLE9BQU8sVUFBUCxLQUFzQixXQUExQixFQUF1QyxPQUFPLFNBQVMsQ0FBQyxVQUFELENBQWhCO0FBQ3ZDLE1BQUksT0FBTyxJQUFQLEtBQWdCLFdBQXBCLEVBQWlDLE9BQU8sU0FBUyxDQUFDLElBQUQsQ0FBaEI7QUFDakMsTUFBSSxPQUFPLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUMsT0FBTyxTQUFTLENBQUMsTUFBRCxDQUFoQjtBQUNuQyxNQUFJLE9BQU8sTUFBUCxLQUFrQixXQUF0QixFQUFtQyxPQUFPLFNBQVMsQ0FBQyxNQUFELENBQWhCO0FBRW5DLFFBQU0sSUFBSSxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNEO0FBRUQsT0FBTSxTQUFVLE1BQVYsQ0FBb0IsR0FBcEIsRUFBNkM7QUFDakQsTUFBSSxHQUFHLEtBQUssSUFBUixJQUFnQixHQUFHLEtBQUssU0FBNUIsRUFBdUMsTUFBTSxJQUFJLEtBQUosQ0FBVSw4QkFBVixDQUFOO0FBQ3ZDLFNBQU8sR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgVW5pb25Ub0ludGVyc2VjdGlvbjxVPiA9IChVIGV4dGVuZHMgdW5rbm93biA/IChrOiBVKSA9PiB2b2lkIDogbmV2ZXIpIGV4dGVuZHMgKFxuICBrOiBpbmZlciBJXG4pID0+IHZvaWRcbiAgPyBJXG4gIDogbmV2ZXI7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgdHlwZSBBbnlLZXkgPSBrZXlvZiBhbnk7XG5leHBvcnQgdHlwZSBJbmRleGFibGUgPSBSZWNvcmQ8QW55S2V5LCB1bmtub3duPjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBpbmRleGFibGU8VCBleHRlbmRzIG9iamVjdD4oaW5wdXQ6IFQpOiBUICYgSW5kZXhhYmxlIHtcbiAgcmV0dXJuIGlucHV0IGFzIFQgJiBJbmRleGFibGU7XG59XG5cbi8vIFRoaXMgaXMgYSBkdXBsaWNhdGUgdXRpbGl0eSBmcm9tIEBnbGltbWVyL3V0aWwgYmVjYXVzZSBgQGdsaW1tZXIvdmFsaWRhdG9yYFxuLy8gc2hvdWxkIG5vdCBkZXBlbmQgb24gYW55IG90aGVyIEBnbGltbWVyIHBhY2thZ2VzLCBpbiBvcmRlciB0byBhdm9pZCBwdWxsaW5nXG4vLyBpbiB0eXBlcyBhbmQgcHJldmVudCByZWdyZXNzaW9ucyBpbiBgQGdsaW1tZXIvdHJhY2tpbmdgICh3aGljaCBoYXMgcHVibGljIHR5cGVzKS5cbmV4cG9ydCBjb25zdCBzeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJ1xuICAgID8gU3ltYm9sXG4gICAgOiAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgKGtleTogc3RyaW5nKSA9PiBgX18ke2tleX0ke01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIERhdGUubm93KCkpfV9fYCBhcyBhbnk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5leHBvcnQgY29uc3Qgc3ltYm9sRm9yOiAoa2V5OiBzdHJpbmcpID0+IGFueSA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnXG4gICAgPyBTeW1ib2wuZm9yXG4gICAgOiAoa2V5OiBzdHJpbmcpID0+IGBfX0dMSU1NRVJfVkFMSURBVE9SX1NZTUJPTF9GT1JfJHtrZXl9YDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbCgpOiBJbmRleGFibGUge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9lcy1idWlsdGluc1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gaW5kZXhhYmxlKGdsb2JhbFRoaXMpO1xuICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gaW5kZXhhYmxlKHNlbGYpO1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBpbmRleGFibGUod2luZG93KTtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gaW5kZXhhYmxlKGdsb2JhbCk7XG5cbiAgdGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVud3JhcDxUPih2YWw6IFQgfCBudWxsIHwgdW5kZWZpbmVkKTogVCB7XG4gIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgdmFsdWUgdG8gYmUgcHJlc2VudGApO1xuICByZXR1cm4gdmFsIGFzIFQ7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9