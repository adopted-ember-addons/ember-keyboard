import { DEBUG } from '@glimmer/env';
import { CONSTANT_TAG, validateTag, valueForTag, isConstTag, combine as _combine } from './validators';
import { markTagAsConsumed, beginTrackingTransaction, endTrackingTransaction, resetTrackingTransaction } from './debug';
import { symbol, unwrap } from './utils';
/**
 * An object that that tracks @tracked properties that were consumed.
 */

var Tracker = /*#__PURE__*/function () {
  function Tracker() {
    this.tags = new Set();
    this.last = null;
  }

  var _proto = Tracker.prototype;

  _proto.add = function add(tag) {
    if (tag === CONSTANT_TAG) return;
    this.tags.add(tag);

    if (DEBUG) {
      unwrap(markTagAsConsumed)(tag);
    }

    this.last = tag;
  };

  _proto.combine = function combine() {
    var tags = this.tags;

    if (tags.size === 0) {
      return CONSTANT_TAG;
    } else if (tags.size === 1) {
      return this.last;
    } else {
      var tagsArr = [];
      tags.forEach(function (tag) {
        return tagsArr.push(tag);
      });
      return _combine(tagsArr);
    }
  };

  return Tracker;
}();
/**
 * Whenever a tracked computed property is entered, the current tracker is
 * saved off and a new tracker is replaced.
 *
 * Any tracked properties consumed are added to the current tracker.
 *
 * When a tracked computed property is exited, the tracker's tags are
 * combined and added to the parent tracker.
 *
 * The consequence is that each tracked computed property has a tag
 * that corresponds to the tracked properties consumed inside of
 * itself, including child tracked computed properties.
 */


var CURRENT_TRACKER = null;
var OPEN_TRACK_FRAMES = [];
export function beginTrackFrame(debuggingContext) {
  OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
  CURRENT_TRACKER = new Tracker();

  if (DEBUG) {
    unwrap(beginTrackingTransaction)(debuggingContext);
  }
}
export function endTrackFrame() {
  var current = CURRENT_TRACKER;

  if (DEBUG) {
    if (OPEN_TRACK_FRAMES.length === 0) {
      throw new Error('attempted to close a tracking frame, but one was not open');
    }

    unwrap(endTrackingTransaction)();
  }

  CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
  return unwrap(current).combine();
}
export function beginUntrackFrame() {
  OPEN_TRACK_FRAMES.push(CURRENT_TRACKER);
  CURRENT_TRACKER = null;
}
export function endUntrackFrame() {
  if (DEBUG && OPEN_TRACK_FRAMES.length === 0) {
    throw new Error('attempted to close a tracking frame, but one was not open');
  }

  CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
} // This function is only for handling errors and resetting to a valid state

export function resetTracking() {
  while (OPEN_TRACK_FRAMES.length > 0) {
    OPEN_TRACK_FRAMES.pop();
  }

  CURRENT_TRACKER = null;

  if (DEBUG) {
    return unwrap(resetTrackingTransaction)();
  }
}
export function isTracking() {
  return CURRENT_TRACKER !== null;
}
export function consumeTag(tag) {
  if (CURRENT_TRACKER !== null) {
    CURRENT_TRACKER.add(tag);
  }
} //////////

var CACHE_KEY = symbol('CACHE_KEY');
var FN = symbol('FN');
var LAST_VALUE = symbol('LAST_VALUE');
var TAG = symbol('TAG');
var SNAPSHOT = symbol('SNAPSHOT');
var DEBUG_LABEL = symbol('DEBUG_LABEL');
export function createCache(fn, debuggingLabel) {
  var _cache;

  if (DEBUG && !(typeof fn === 'function')) {
    throw new Error("createCache() must be passed a function as its first parameter. Called with: " + String(fn));
  }

  var cache = (_cache = {}, _cache[FN] = fn, _cache[LAST_VALUE] = undefined, _cache[TAG] = undefined, _cache[SNAPSHOT] = -1, _cache);

  if (DEBUG) {
    cache[DEBUG_LABEL] = debuggingLabel;
  }

  return cache;
}
export function getValue(cache) {
  assertCache(cache, 'getValue');
  var fn = cache[FN];
  var tag = cache[TAG];
  var snapshot = cache[SNAPSHOT];

  if (tag === undefined || !validateTag(tag, snapshot)) {
    beginTrackFrame();

    try {
      cache[LAST_VALUE] = fn();
    } finally {
      tag = endTrackFrame();
      cache[TAG] = tag;
      cache[SNAPSHOT] = valueForTag(tag);
      consumeTag(tag);
    }
  } else {
    consumeTag(tag);
  }

  return cache[LAST_VALUE];
}
export function isConst(cache) {
  assertCache(cache, 'isConst');
  var tag = cache[TAG];
  assertTag(tag, cache);
  return isConstTag(tag);
}

function assertCache(value, fnName) {
  if (DEBUG && !(typeof value === 'object' && value !== null && FN in value)) {
    throw new Error(fnName + "() can only be used on an instance of a cache created with createCache(). Called with: " + String(value));
  }
} // replace this with `expect` when we can


function assertTag(tag, cache) {
  if (DEBUG && tag === undefined) {
    throw new Error("isConst() can only be used on a cache once getValue() has been called at least once. Called with cache function:\n\n" + String(cache[FN]));
  }
} //////////
// Legacy tracking APIs
// track() shouldn't be necessary at all in the VM once the autotracking
// refactors are merged, and we should generally be moving away from it. It may
// be necessary in Ember for a while longer, but I think we'll be able to drop
// it in favor of cache sooner rather than later.


export function track(callback, debugLabel) {
  beginTrackFrame(debugLabel);
  var tag;

  try {
    callback();
  } finally {
    tag = endTrackFrame();
  }

  return tag;
} // untrack() is currently mainly used to handle places that were previously not
// tracked, and that tracking now would cause backtracking rerender assertions.
// I think once we move everyone forward onto modern APIs, we'll probably be
// able to remove it, but I'm not sure yet.

export function untrack(callback) {
  beginUntrackFrame();

  try {
    return callback();
  } finally {
    endUntrackFrame();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,