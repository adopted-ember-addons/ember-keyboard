import { symbolFor, getGlobal } from './lib/utils';
var GLIMMER_VALIDATOR_REGISTRATION = symbolFor('GLIMMER_VALIDATOR_REGISTRATION');
var globalObj = getGlobal();

if (globalObj[GLIMMER_VALIDATOR_REGISTRATION] === true) {
  throw new Error('The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.');
}

globalObj[GLIMMER_VALIDATOR_REGISTRATION] = true;
export { ALLOW_CYCLES, bump, combine, COMPUTE, CONSTANT_TAG, CONSTANT, createTag, createUpdatableTag, CurrentTag, CURRENT_TAG, DIRTY_TAG as dirtyTag, INITIAL, isConstTag, UPDATE_TAG as updateTag, validateTag, valueForTag, VolatileTag, VOLATILE_TAG, VOLATILE } from './lib/validators';
export { dirtyTagFor, tagFor, tagMetaFor } from './lib/meta';
export { beginTrackFrame, endTrackFrame, beginUntrackFrame, endUntrackFrame, resetTracking, consumeTag, isTracking, track, untrack, createCache, isConst, getValue } from './lib/tracking';
export { trackedData } from './lib/tracked-data';
export { logTrackingStack, setTrackingTransactionEnv, runInTrackingTransaction, beginTrackingTransaction, endTrackingTransaction, deprecateMutationsInTrackingTransaction } from './lib/debug';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3ZhbGlkYXRvci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFBLFNBQUEsRUFBQSxTQUFBLFFBQUEsYUFBQTtBQUVBLElBQU0sOEJBQThCLEdBQUcsU0FBUyxDQUFoRCxnQ0FBZ0QsQ0FBaEQ7QUFFQSxJQUFNLFNBQVMsR0FBRyxTQUFsQixFQUFBOztBQUVBLElBQUksU0FBUyxDQUFULDhCQUFTLENBQVQsS0FBSixJQUFBLEVBQXdEO0FBQ3RELFFBQU0sSUFBQSxLQUFBLENBQU4sc1pBQU0sQ0FBTjtBQUdEOztBQUVELFNBQVMsQ0FBVCw4QkFBUyxDQUFULEdBQUEsSUFBQTtBQUVBLFNBQUEsWUFBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLEVBQUEsU0FBQSxFQUFBLGtCQUFBLEVBQUEsVUFBQSxFQUFBLFdBQUEsRUFhRSxTQUFTLElBYlgsUUFBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBcUJFLFVBQVUsSUFyQlosU0FBQSxFQUFBLFdBQUEsRUFBQSxXQUFBLEVBQUEsV0FBQSxFQUFBLFlBQUEsRUFBQSxRQUFBLFFBQUEsa0JBQUE7QUE2QkEsU0FBQSxXQUFBLEVBQUEsTUFBQSxFQUFBLFVBQUEsUUFBQSxZQUFBO0FBRUEsU0FBQSxlQUFBLEVBQUEsYUFBQSxFQUFBLGlCQUFBLEVBQUEsZUFBQSxFQUFBLGFBQUEsRUFBQSxVQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsV0FBQSxFQUFBLE9BQUEsRUFBQSxRQUFBLFFBQUEsZ0JBQUE7QUFnQkEsU0FBQSxXQUFBLFFBQUEsb0JBQUE7QUFFQSxTQUFBLGdCQUFBLEVBQUEseUJBQUEsRUFBQSx3QkFBQSxFQUFBLHdCQUFBLEVBQUEsc0JBQUEsRUFBQSx1Q0FBQSxRQUFBLGFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzeW1ib2xGb3IsIGdldEdsb2JhbCB9IGZyb20gJy4vbGliL3V0aWxzJztcblxuY29uc3QgR0xJTU1FUl9WQUxJREFUT1JfUkVHSVNUUkFUSU9OID0gc3ltYm9sRm9yKCdHTElNTUVSX1ZBTElEQVRPUl9SRUdJU1RSQVRJT04nKTtcblxuY29uc3QgZ2xvYmFsT2JqID0gZ2V0R2xvYmFsKCk7XG5cbmlmIChnbG9iYWxPYmpbR0xJTU1FUl9WQUxJREFUT1JfUkVHSVNUUkFUSU9OXSA9PT0gdHJ1ZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ1RoZSBgQGdsaW1tZXIvdmFsaWRhdG9yYCBsaWJyYXJ5IGhhcyBiZWVuIGluY2x1ZGVkIHR3aWNlIGluIHRoaXMgYXBwbGljYXRpb24uIEl0IGNvdWxkIGJlIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiB0aGUgcGFja2FnZSwgb3IgdGhlIHNhbWUgdmVyc2lvbiBpbmNsdWRlZCB0d2ljZSBieSBtaXN0YWtlLiBgQGdsaW1tZXIvdmFsaWRhdG9yYCBkZXBlbmRzIG9uIGhhdmluZyBhIHNpbmdsZSBjb3B5IG9mIHRoZSBwYWNrYWdlIGluIHVzZSBhdCBhbnkgdGltZSBpbiBhbiBhcHBsaWNhdGlvbiwgZXZlbiBpZiB0aGV5IGFyZSB0aGUgc2FtZSB2ZXJzaW9uLiBZb3UgbXVzdCBkZWR1cGUgeW91ciBidWlsZCB0byByZW1vdmUgdGhlIGR1cGxpY2F0ZSBwYWNrYWdlcyBpbiBvcmRlciB0byBwcmV2ZW50IHRoaXMgZXJyb3IuJ1xuICApO1xufVxuXG5nbG9iYWxPYmpbR0xJTU1FUl9WQUxJREFUT1JfUkVHSVNUUkFUSU9OXSA9IHRydWU7XG5cbmV4cG9ydCB7XG4gIEFMTE9XX0NZQ0xFUyxcbiAgYnVtcCxcbiAgQ29tYmluYXRvclRhZyxcbiAgY29tYmluZSxcbiAgQ09NUFVURSxcbiAgQ09OU1RBTlRfVEFHLFxuICBDT05TVEFOVCxcbiAgQ29uc3RhbnRUYWcsXG4gIGNyZWF0ZVRhZyxcbiAgY3JlYXRlVXBkYXRhYmxlVGFnLFxuICBDdXJyZW50VGFnLFxuICBDVVJSRU5UX1RBRyxcbiAgRElSVFlfVEFHIGFzIGRpcnR5VGFnLFxuICBEaXJ0eWFibGVUYWcsXG4gIEVudGl0eVRhZyxcbiAgSU5JVElBTCxcbiAgaXNDb25zdFRhZyxcbiAgUmV2aXNpb24sXG4gIFRhZyxcbiAgVXBkYXRhYmxlVGFnLFxuICBVUERBVEVfVEFHIGFzIHVwZGF0ZVRhZyxcbiAgdmFsaWRhdGVUYWcsXG4gIHZhbHVlRm9yVGFnLFxuICBWb2xhdGlsZVRhZyxcbiAgVk9MQVRJTEVfVEFHLFxuICBWT0xBVElMRSxcbn0gZnJvbSAnLi9saWIvdmFsaWRhdG9ycyc7XG5cbmV4cG9ydCB7IGRpcnR5VGFnRm9yLCB0YWdGb3IsIHRhZ01ldGFGb3IsIFRhZ01ldGEgfSBmcm9tICcuL2xpYi9tZXRhJztcblxuZXhwb3J0IHtcbiAgYmVnaW5UcmFja0ZyYW1lLFxuICBlbmRUcmFja0ZyYW1lLFxuICBiZWdpblVudHJhY2tGcmFtZSxcbiAgZW5kVW50cmFja0ZyYW1lLFxuICByZXNldFRyYWNraW5nLFxuICBjb25zdW1lVGFnLFxuICBpc1RyYWNraW5nLFxuICB0cmFjayxcbiAgdW50cmFjayxcbiAgQ2FjaGUsXG4gIGNyZWF0ZUNhY2hlLFxuICBpc0NvbnN0LFxuICBnZXRWYWx1ZSxcbn0gZnJvbSAnLi9saWIvdHJhY2tpbmcnO1xuXG5leHBvcnQgeyB0cmFja2VkRGF0YSB9IGZyb20gJy4vbGliL3RyYWNrZWQtZGF0YSc7XG5cbmV4cG9ydCB7XG4gIGxvZ1RyYWNraW5nU3RhY2ssXG4gIHNldFRyYWNraW5nVHJhbnNhY3Rpb25FbnYsXG4gIHJ1bkluVHJhY2tpbmdUcmFuc2FjdGlvbixcbiAgYmVnaW5UcmFja2luZ1RyYW5zYWN0aW9uLFxuICBlbmRUcmFja2luZ1RyYW5zYWN0aW9uLFxuICBkZXByZWNhdGVNdXRhdGlvbnNJblRyYWNraW5nVHJhbnNhY3Rpb24sXG59IGZyb20gJy4vbGliL2RlYnVnJztcbiJdLCJzb3VyY2VSb290IjoiIn0=