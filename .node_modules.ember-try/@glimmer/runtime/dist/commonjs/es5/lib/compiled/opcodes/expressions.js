'use strict';

var _vm = require('@glimmer/vm');

var _opcodes = require('../../opcodes');

var _references = require('../../references');

var _concat = require('../expressions/concat');

var _util = require('@glimmer/util');

var _assert = require('./assert');

var _symbols = require('../../symbols');

_opcodes.APPEND_OPCODES.add(16 /* Helper */, function (vm, _ref) {
    var handle = _ref.op1;

    var stack = vm.stack;
    var helper = vm.runtime.resolver.resolve(handle);
    var args = stack.pop();
    var value = helper(args, vm);
    vm.loadValue(_vm.$v0, value);
});
_opcodes.APPEND_OPCODES.add(22 /* GetVariable */, function (vm, _ref2) {
    var symbol = _ref2.op1;

    var expr = vm.referenceForSymbol(symbol);
    vm.stack.push(expr);
});
_opcodes.APPEND_OPCODES.add(19 /* SetVariable */, function (vm, _ref3) {
    var symbol = _ref3.op1;

    var expr = vm.stack.pop();
    vm.scope().bindSymbol(symbol, expr);
});
_opcodes.APPEND_OPCODES.add(21 /* SetJitBlock */, function (vm, _ref4) {
    var symbol = _ref4.op1;

    var handle = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    var block = table ? [handle, scope, table] : null;
    vm.scope().bindBlock(symbol, block);
}, 'jit');
_opcodes.APPEND_OPCODES.add(20 /* SetAotBlock */, function (vm, _ref5) {
    var symbol = _ref5.op1;

    var handle = vm.stack.pop();
    var scope = vm.stack.pop();
    var table = vm.stack.pop();
    var block = table ? [handle, scope, table] : null;
    vm.scope().bindBlock(symbol, block);
});
_opcodes.APPEND_OPCODES.add(104 /* ResolveMaybeLocal */, function (vm, _ref6) {
    var _name = _ref6.op1;

    var name = vm[_symbols.CONSTANTS].getString(_name);
    var locals = vm.scope().getPartialMap();
    var ref = locals[name];
    if (ref === undefined) {
        ref = vm.getSelf().get(name);
    }
    vm.stack.push(ref);
});
_opcodes.APPEND_OPCODES.add(36 /* RootScope */, function (vm, _ref7) {
    var symbols = _ref7.op1;

    vm.pushRootScope(symbols);
});
_opcodes.APPEND_OPCODES.add(23 /* GetProperty */, function (vm, _ref8) {
    var _key = _ref8.op1;

    var key = vm[_symbols.CONSTANTS].getString(_key);
    var expr = vm.stack.pop();
    vm.stack.push(expr.get(key));
});
_opcodes.APPEND_OPCODES.add(24 /* GetBlock */, function (vm, _ref9) {
    var _block = _ref9.op1;
    var stack = vm.stack;

    var block = vm.scope().getBlock(_block);
    if (block) {
        stack.push(block[2]);
        stack.push(block[1]);
        stack.push(block[0]);
    } else {
        stack.push(null);
        stack.push(null);
        stack.push(null);
    }
});
_opcodes.APPEND_OPCODES.add(25 /* HasBlock */, function (vm, _ref10) {
    var _block = _ref10.op1;

    var hasBlock = !!vm.scope().getBlock(_block);
    vm.stack.push(hasBlock ? _references.TRUE_REFERENCE : _references.FALSE_REFERENCE);
});
_opcodes.APPEND_OPCODES.add(26 /* HasBlockParams */, function (vm) {
    // FIXME(mmun): should only need to push the symbol table
    var block = vm.stack.pop();
    var scope = vm.stack.pop();

    var table = vm.stack.pop();
    false && (0, _util.assert)(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), (0, _assert.stackAssert)('Option<BlockSymbolTable>', table));

    var hasBlockParams = table && table.parameters.length;
    vm.stack.push(hasBlockParams ? _references.TRUE_REFERENCE : _references.FALSE_REFERENCE);
});
_opcodes.APPEND_OPCODES.add(27 /* Concat */, function (vm, _ref11) {
    var count = _ref11.op1;

    var out = new Array(count);
    for (var i = count; i > 0; i--) {
        var offset = i - 1;
        out[offset] = vm.stack.pop();
    }
    vm.stack.push(new _concat.ConcatReference(out));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvZXhwcmVzc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUdBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQVFBOztBQUlBLHdCQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsWUFBQSxFQUE4QixVQUFBLEVBQUEsRUFBQSxJQUFBLEVBQXdCO0FBQUEsUUFBeEIsU0FBd0IsS0FBakIsR0FBaUI7O0FBQ3BELFFBQUksUUFBUSxHQUFaLEtBQUE7QUFDQSxRQUFJLFNBQWUsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsQ0FBbkIsTUFBbUIsQ0FBbkI7QUFDQSxRQUFJLE9BQWEsTUFBakIsR0FBaUIsRUFBakI7QUFDQSxRQUFJLFFBQVEsT0FBQSxJQUFBLEVBQVosRUFBWSxDQUFaO0FBRUEsT0FBQSxTQUFBLENBQUEsT0FBQSxFQUFBLEtBQUE7QUFORixDQUFBO0FBU0Esd0JBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxpQkFBQSxFQUFtQyxVQUFBLEVBQUEsRUFBQSxLQUFBLEVBQXdCO0FBQUEsUUFBeEIsU0FBd0IsTUFBakIsR0FBaUI7O0FBQ3pELFFBQUksT0FBTyxHQUFBLGtCQUFBLENBQVgsTUFBVyxDQUFYO0FBQ0EsT0FBQSxLQUFBLENBQUEsSUFBQSxDQUFBLElBQUE7QUFGRixDQUFBO0FBS0Esd0JBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxpQkFBQSxFQUFtQyxVQUFBLEVBQUEsRUFBQSxLQUFBLEVBQXdCO0FBQUEsUUFBeEIsU0FBd0IsTUFBakIsR0FBaUI7O0FBQ3pELFFBQUksT0FBYSxHQUFBLEtBQUEsQ0FBakIsR0FBaUIsRUFBakI7QUFDQSxPQUFBLEtBQUEsR0FBQSxVQUFBLENBQUEsTUFBQSxFQUFBLElBQUE7QUFGRixDQUFBO0FBS0Esd0JBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxpQkFBQSxFQUVF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QUFBLE1BQUEsSUFBb0IsR0FBQSxLQUFBLENBQXBCLEdBQW9CLEVBQXBCO0FBQ0Q7QUFFRCxPQUFBLEtBQUEsQ0FBQSxJQUFBLENBQWMsSUFBQSx1QkFBQSxDQUFkLEdBQWMsQ0FBZDtBQVJGLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb24sIE9wLCBKaXRTY29wZUJsb2NrLCBBb3RTY29wZUJsb2NrLCBWTSBhcyBQdWJsaWNWTSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgVmVyc2lvbmVkUGF0aFJlZmVyZW5jZSB9IGZyb20gJ0BnbGltbWVyL3JlZmVyZW5jZSc7XG5pbXBvcnQgeyAkdjAgfSBmcm9tICdAZ2xpbW1lci92bSc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUyB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuaW1wb3J0IHsgRkFMU0VfUkVGRVJFTkNFLCBUUlVFX1JFRkVSRU5DRSB9IGZyb20gJy4uLy4uL3JlZmVyZW5jZXMnO1xuaW1wb3J0IHsgQ29uY2F0UmVmZXJlbmNlIH0gZnJvbSAnLi4vZXhwcmVzc2lvbnMvY29uY2F0JztcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgY2hlY2ssIENoZWNrT3B0aW9uLCBDaGVja0hhbmRsZSwgQ2hlY2tCbG9ja1N5bWJvbFRhYmxlLCBDaGVja09yIH0gZnJvbSAnQGdsaW1tZXIvZGVidWcnO1xuaW1wb3J0IHsgc3RhY2tBc3NlcnQgfSBmcm9tICcuL2Fzc2VydCc7XG5pbXBvcnQge1xuICBDaGVja0FyZ3VtZW50cyxcbiAgQ2hlY2tQYXRoUmVmZXJlbmNlLFxuICBDaGVja0NvbXBpbGFibGVCbG9jayxcbiAgQ2hlY2tTY29wZSxcbiAgQ2hlY2tIZWxwZXIsXG59IGZyb20gJy4vLWRlYnVnLXN0cmlwJztcbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gJy4uLy4uL3N5bWJvbHMnO1xuXG5leHBvcnQgdHlwZSBGdW5jdGlvbkV4cHJlc3Npb248VD4gPSAodm06IFB1YmxpY1ZNKSA9PiBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPFQ+O1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuSGVscGVyLCAodm0sIHsgb3AxOiBoYW5kbGUgfSkgPT4ge1xuICBsZXQgc3RhY2sgPSB2bS5zdGFjaztcbiAgbGV0IGhlbHBlciA9IGNoZWNrKHZtLnJ1bnRpbWUucmVzb2x2ZXIucmVzb2x2ZShoYW5kbGUpLCBDaGVja0hlbHBlcik7XG4gIGxldCBhcmdzID0gY2hlY2soc3RhY2sucG9wKCksIENoZWNrQXJndW1lbnRzKTtcbiAgbGV0IHZhbHVlID0gaGVscGVyKGFyZ3MsIHZtKTtcblxuICB2bS5sb2FkVmFsdWUoJHYwLCB2YWx1ZSk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkdldFZhcmlhYmxlLCAodm0sIHsgb3AxOiBzeW1ib2wgfSkgPT4ge1xuICBsZXQgZXhwciA9IHZtLnJlZmVyZW5jZUZvclN5bWJvbChzeW1ib2wpO1xuICB2bS5zdGFjay5wdXNoKGV4cHIpO1xufSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5TZXRWYXJpYWJsZSwgKHZtLCB7IG9wMTogc3ltYm9sIH0pID0+IHtcbiAgbGV0IGV4cHIgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tQYXRoUmVmZXJlbmNlKTtcbiAgdm0uc2NvcGUoKS5iaW5kU3ltYm9sKHN5bWJvbCwgZXhwcik7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKFxuICBPcC5TZXRKaXRCbG9jayxcbiAgKHZtLCB7IG9wMTogc3ltYm9sIH0pID0+IHtcbiAgICBsZXQgaGFuZGxlID0gY2hlY2sodm0uc3RhY2sucG9wKCksIENoZWNrT3B0aW9uKENoZWNrQ29tcGlsYWJsZUJsb2NrKSk7XG4gICAgbGV0IHNjb3BlID0gY2hlY2sodm0uc3RhY2sucG9wKCksIENoZWNrU2NvcGUpO1xuICAgIGxldCB0YWJsZSA9IGNoZWNrKHZtLnN0YWNrLnBvcCgpLCBDaGVja09wdGlvbihDaGVja0Jsb2NrU3ltYm9sVGFibGUpKTtcblxuICAgIGxldCBibG9jazogT3B0aW9uPEppdFNjb3BlQmxvY2s+ID0gdGFibGUgPyBbaGFuZGxlISwgc2NvcGUsIHRhYmxlXSA6IG51bGw7XG5cbiAgICB2bS5zY29wZSgpLmJpbmRCbG9jayhzeW1ib2wsIGJsb2NrKTtcbiAgfSxcbiAgJ2ppdCdcbik7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5TZXRBb3RCbG9jaywgKHZtLCB7IG9wMTogc3ltYm9sIH0pID0+IHtcbiAgbGV0IGhhbmRsZSA9IGNoZWNrKHZtLnN0YWNrLnBvcCgpLCBDaGVja09wdGlvbihDaGVja0hhbmRsZSkpO1xuICBsZXQgc2NvcGUgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tTY29wZSk7XG4gIGxldCB0YWJsZSA9IGNoZWNrKHZtLnN0YWNrLnBvcCgpLCBDaGVja09wdGlvbihDaGVja0Jsb2NrU3ltYm9sVGFibGUpKTtcblxuICBsZXQgYmxvY2s6IE9wdGlvbjxBb3RTY29wZUJsb2NrPiA9IHRhYmxlID8gW2hhbmRsZSEsIHNjb3BlLCB0YWJsZV0gOiBudWxsO1xuXG4gIHZtLnNjb3BlKCkuYmluZEJsb2NrKHN5bWJvbCwgYmxvY2spO1xufSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5SZXNvbHZlTWF5YmVMb2NhbCwgKHZtLCB7IG9wMTogX25hbWUgfSkgPT4ge1xuICBsZXQgbmFtZSA9IHZtW0NPTlNUQU5UU10uZ2V0U3RyaW5nKF9uYW1lKTtcbiAgbGV0IGxvY2FscyA9IHZtLnNjb3BlKCkuZ2V0UGFydGlhbE1hcCgpITtcblxuICBsZXQgcmVmID0gbG9jYWxzW25hbWVdO1xuICBpZiAocmVmID09PSB1bmRlZmluZWQpIHtcbiAgICByZWYgPSB2bS5nZXRTZWxmKCkuZ2V0KG5hbWUpO1xuICB9XG5cbiAgdm0uc3RhY2sucHVzaChyZWYpO1xufSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5Sb290U2NvcGUsICh2bSwgeyBvcDE6IHN5bWJvbHMgfSkgPT4ge1xuICB2bS5wdXNoUm9vdFNjb3BlKHN5bWJvbHMpO1xufSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5HZXRQcm9wZXJ0eSwgKHZtLCB7IG9wMTogX2tleSB9KSA9PiB7XG4gIGxldCBrZXkgPSB2bVtDT05TVEFOVFNdLmdldFN0cmluZyhfa2V5KTtcbiAgbGV0IGV4cHIgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tQYXRoUmVmZXJlbmNlKTtcbiAgdm0uc3RhY2sucHVzaChleHByLmdldChrZXkpKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuR2V0QmxvY2ssICh2bSwgeyBvcDE6IF9ibG9jayB9KSA9PiB7XG4gIGxldCB7IHN0YWNrIH0gPSB2bTtcbiAgbGV0IGJsb2NrID0gdm0uc2NvcGUoKS5nZXRCbG9jayhfYmxvY2spO1xuXG4gIGlmIChibG9jaykge1xuICAgIHN0YWNrLnB1c2goYmxvY2tbMl0pO1xuICAgIHN0YWNrLnB1c2goYmxvY2tbMV0pO1xuICAgIHN0YWNrLnB1c2goYmxvY2tbMF0pO1xuICB9IGVsc2Uge1xuICAgIHN0YWNrLnB1c2gobnVsbCk7XG4gICAgc3RhY2sucHVzaChudWxsKTtcbiAgICBzdGFjay5wdXNoKG51bGwpO1xuICB9XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkhhc0Jsb2NrLCAodm0sIHsgb3AxOiBfYmxvY2sgfSkgPT4ge1xuICBsZXQgaGFzQmxvY2sgPSAhIXZtLnNjb3BlKCkuZ2V0QmxvY2soX2Jsb2NrKTtcbiAgdm0uc3RhY2sucHVzaChoYXNCbG9jayA/IFRSVUVfUkVGRVJFTkNFIDogRkFMU0VfUkVGRVJFTkNFKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuSGFzQmxvY2tQYXJhbXMsIHZtID0+IHtcbiAgLy8gRklYTUUobW11bik6IHNob3VsZCBvbmx5IG5lZWQgdG8gcHVzaCB0aGUgc3ltYm9sIHRhYmxlXG4gIGxldCBibG9jayA9IHZtLnN0YWNrLnBvcCgpO1xuICBsZXQgc2NvcGUgPSB2bS5zdGFjay5wb3AoKTtcbiAgY2hlY2soYmxvY2ssIENoZWNrT3B0aW9uKENoZWNrT3IoQ2hlY2tIYW5kbGUsIENoZWNrQ29tcGlsYWJsZUJsb2NrKSkpO1xuICBjaGVjayhzY29wZSwgQ2hlY2tPcHRpb24oQ2hlY2tTY29wZSkpO1xuICBsZXQgdGFibGUgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tPcHRpb24oQ2hlY2tCbG9ja1N5bWJvbFRhYmxlKSk7XG5cbiAgYXNzZXJ0KFxuICAgIHRhYmxlID09PSBudWxsIHx8ICh0YWJsZSAmJiB0eXBlb2YgdGFibGUgPT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkodGFibGUucGFyYW1ldGVycykpLFxuICAgIHN0YWNrQXNzZXJ0KCdPcHRpb248QmxvY2tTeW1ib2xUYWJsZT4nLCB0YWJsZSlcbiAgKTtcblxuICBsZXQgaGFzQmxvY2tQYXJhbXMgPSB0YWJsZSAmJiB0YWJsZS5wYXJhbWV0ZXJzLmxlbmd0aDtcbiAgdm0uc3RhY2sucHVzaChoYXNCbG9ja1BhcmFtcyA/IFRSVUVfUkVGRVJFTkNFIDogRkFMU0VfUkVGRVJFTkNFKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuQ29uY2F0LCAodm0sIHsgb3AxOiBjb3VudCB9KSA9PiB7XG4gIGxldCBvdXQ6IEFycmF5PFZlcnNpb25lZFBhdGhSZWZlcmVuY2U8dW5rbm93bj4+ID0gbmV3IEFycmF5KGNvdW50KTtcblxuICBmb3IgKGxldCBpID0gY291bnQ7IGkgPiAwOyBpLS0pIHtcbiAgICBsZXQgb2Zmc2V0ID0gaSAtIDE7XG4gICAgb3V0W29mZnNldF0gPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tQYXRoUmVmZXJlbmNlKTtcbiAgfVxuXG4gIHZtLnN0YWNrLnB1c2gobmV3IENvbmNhdFJlZmVyZW5jZShvdXQpKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==