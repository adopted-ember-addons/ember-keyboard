'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.LabelOpcode = exports.DidModifyOpcode = exports.JumpIfNotModifiedOpcode = exports.Assert = undefined;

var _reference = require('@glimmer/reference');

var _util = require('@glimmer/util');

var _assert = require('./assert');

var _opcodes = require('../../opcodes');

var _references = require('../../references');

var _symbols = require('../../symbols');

_opcodes.APPEND_OPCODES.add(38 /* ChildScope */, vm => vm.pushChildScope());
_opcodes.APPEND_OPCODES.add(39 /* PopScope */, vm => vm.popScope());
_opcodes.APPEND_OPCODES.add(58 /* PushDynamicScope */, vm => vm.pushDynamicScope());
_opcodes.APPEND_OPCODES.add(59 /* PopDynamicScope */, vm => vm.popDynamicScope());
_opcodes.APPEND_OPCODES.add(28 /* Constant */, (vm, { op1: other }) => {
    vm.stack.push(vm[_symbols.CONSTANTS].getOther(other));
});
_opcodes.APPEND_OPCODES.add(29 /* Primitive */, (vm, { op1: primitive }) => {
    let stack = vm.stack;
    let flag = primitive & 7; // 111
    let value = primitive >> 3;
    switch (flag) {
        case 0 /* NUMBER */:
            stack.push(value);
            break;
        case 1 /* FLOAT */:
            stack.push(vm[_symbols.CONSTANTS].getNumber(value));
            break;
        case 2 /* STRING */:
            stack.push(vm[_symbols.CONSTANTS].getString(value));
            break;
        case 3 /* BOOLEAN_OR_VOID */:
            stack.pushRaw(primitive);
            break;
        case 4 /* NEGATIVE */:
            stack.push(vm[_symbols.CONSTANTS].getNumber(value));
            break;
        case 5 /* BIG_NUM */:
            stack.push(vm[_symbols.CONSTANTS].getNumber(value));
            break;
    }
});
_opcodes.APPEND_OPCODES.add(30 /* PrimitiveReference */, vm => {
    let stack = vm.stack;
    stack.push(_references.PrimitiveReference.create(stack.pop()));
});
_opcodes.APPEND_OPCODES.add(31 /* ReifyU32 */, vm => {
    let stack = vm.stack;
    stack.push(stack.peek().value());
});
_opcodes.APPEND_OPCODES.add(32 /* Dup */, (vm, { op1: register, op2: offset }) => {
    let position = vm.fetchValue(register) - offset;
    vm.stack.dup(position);
});
_opcodes.APPEND_OPCODES.add(33 /* Pop */, (vm, { op1: count }) => {
    vm.stack.pop(count);
});
_opcodes.APPEND_OPCODES.add(34 /* Load */, (vm, { op1: register }) => {
    vm.load(register);
});
_opcodes.APPEND_OPCODES.add(35 /* Fetch */, (vm, { op1: register }) => {
    vm.fetch(register);
});
_opcodes.APPEND_OPCODES.add(57 /* BindDynamicScope */, (vm, { op1: _names }) => {
    let names = vm[_symbols.CONSTANTS].getArray(_names);
    vm.bindDynamicScope(names);
});
_opcodes.APPEND_OPCODES.add(68 /* Enter */, (vm, { op1: args }) => {
    vm.enter(args);
});
_opcodes.APPEND_OPCODES.add(69 /* Exit */, vm => {
    vm.exit();
});
_opcodes.APPEND_OPCODES.add(62 /* PushSymbolTable */, (vm, { op1: _table }) => {
    let stack = vm.stack;
    stack.push(vm[_symbols.CONSTANTS].getTemplateMeta(_table));
});
_opcodes.APPEND_OPCODES.add(61 /* PushBlockScope */, vm => {
    let stack = vm.stack;
    stack.push(vm.scope());
});
_opcodes.APPEND_OPCODES.add(60 /* CompileBlock */, vm => {
    let stack = vm.stack;
    let block = stack.pop();
    if (block) {
        stack.push(vm.compile(block));
    } else {
        stack.push(null);
    }
}, 'jit');
_opcodes.APPEND_OPCODES.add(63 /* InvokeYield */, vm => {
    let { stack } = vm;
    let handle = stack.pop();
    let scope = stack.pop();
    let table = stack.pop();
    false && (0, _util.assert)(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), (0, _assert.stackAssert)('Option<BlockSymbolTable>', table));

    let args = stack.pop();
    if (table === null) {
        // To balance the pop{Frame,Scope}
        vm.pushFrame();
        vm.pushScope(scope); // Could be null but it doesnt matter as it is immediatelly popped.
        return;
    }
    let invokingScope = scope;
    // If necessary, create a child scope
    {
        let locals = table.parameters;
        let localsCount = locals.length;
        if (localsCount > 0) {
            invokingScope = invokingScope.child();
            for (let i = 0; i < localsCount; i++) {
                invokingScope.bindSymbol(locals[i], args.at(i));
            }
        }
    }
    vm.pushFrame();
    vm.pushScope(invokingScope);
    vm.call(handle);
});
_opcodes.APPEND_OPCODES.add(64 /* JumpIf */, (vm, { op1: target }) => {
    let reference = vm.stack.pop();
    if ((0, _reference.isConst)(reference)) {
        if (reference.value()) {
            vm.goto(target);
        }
    } else {
        let cache = new _reference.ReferenceCache(reference);
        if (cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
_opcodes.APPEND_OPCODES.add(65 /* JumpUnless */, (vm, { op1: target }) => {
    let reference = vm.stack.pop();
    if ((0, _reference.isConst)(reference)) {
        if (!reference.value()) {
            vm.goto(target);
        }
    } else {
        let cache = new _reference.ReferenceCache(reference);
        if (!cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
_opcodes.APPEND_OPCODES.add(66 /* JumpEq */, (vm, { op1: target, op2: comparison }) => {
    let other = vm.stack.peek();
    if (other === comparison) {
        vm.goto(target);
    }
});
_opcodes.APPEND_OPCODES.add(67 /* AssertSame */, vm => {
    let reference = vm.stack.peek();
    if (!(0, _reference.isConst)(reference)) {
        vm.updateWith(Assert.initialize(new _reference.ReferenceCache(reference)));
    }
});
_opcodes.APPEND_OPCODES.add(70 /* ToBoolean */, vm => {
    let { env, stack } = vm;
    stack.push(env.toConditionalReference(stack.pop()));
});
class Assert extends _opcodes.UpdatingOpcode {
    constructor(cache) {
        super();
        this.type = 'assert';
        this.tag = cache.tag;
        this.cache = cache;
    }
    static initialize(cache) {
        let assert = new Assert(cache);
        cache.peek();
        return assert;
    }
    evaluate(vm) {
        let { cache } = this;
        if ((0, _reference.isModified)(cache.revalidate())) {
            vm.throw();
        }
    }
}
exports.Assert = Assert;
class JumpIfNotModifiedOpcode extends _opcodes.UpdatingOpcode {
    constructor(tag, target) {
        super();
        this.target = target;
        this.type = 'jump-if-not-modified';
        this.tag = tag;
        this.lastRevision = (0, _reference.value)(tag);
    }
    evaluate(vm) {
        let { tag, target, lastRevision } = this;
        if (!vm.alwaysRevalidate && (0, _reference.validate)(tag, lastRevision)) {
            vm.goto(target);
        }
    }
    didModify() {
        this.lastRevision = (0, _reference.value)(this.tag);
    }
}
exports.JumpIfNotModifiedOpcode = JumpIfNotModifiedOpcode;
class DidModifyOpcode extends _opcodes.UpdatingOpcode {
    constructor(target) {
        super();
        this.target = target;
        this.type = 'did-modify';
        this.tag = _reference.CONSTANT_TAG;
    }
    evaluate() {
        this.target.didModify();
    }
}
exports.DidModifyOpcode = DidModifyOpcode;
class LabelOpcode {
    constructor(label) {
        this.tag = _reference.CONSTANT_TAG;
        this.type = 'label';
        this.label = null;
        this.prev = null;
        this.next = null;
        (0, _util.initializeGuid)(this);
        this.label = label;
    }
    evaluate() {}
    inspect() {
        return `${this.label} [${this._guid}]`;
    }
}
exports.LabelOpcode = LabelOpcode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,