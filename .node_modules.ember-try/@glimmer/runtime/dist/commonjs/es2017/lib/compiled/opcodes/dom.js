'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UpdateDynamicAttributeOpcode = exports.UpdateModifierOpcode = undefined;

var _reference = require('@glimmer/reference');

var _vm = require('@glimmer/vm');

var _opcodes = require('../../opcodes');

var _vm2 = require('./vm');

var _symbols = require('../../symbols');

_opcodes.APPEND_OPCODES.add(40 /* Text */, (vm, { op1: text }) => {
    vm.elements().appendText(vm[_symbols.CONSTANTS].getString(text));
});
_opcodes.APPEND_OPCODES.add(41 /* Comment */, (vm, { op1: text }) => {
    vm.elements().appendComment(vm[_symbols.CONSTANTS].getString(text));
});
_opcodes.APPEND_OPCODES.add(47 /* OpenElement */, (vm, { op1: tag }) => {
    vm.elements().openElement(vm[_symbols.CONSTANTS].getString(tag));
});
_opcodes.APPEND_OPCODES.add(48 /* OpenDynamicElement */, vm => {
    let tagName = vm.stack.pop().value();
    vm.elements().openElement(tagName);
});
_opcodes.APPEND_OPCODES.add(49 /* PushRemoteElement */, vm => {
    let elementRef = vm.stack.pop();
    let insertBeforeRef = vm.stack.pop();
    let guidRef = vm.stack.pop();
    let element;
    let insertBefore;
    let guid = guidRef.value();
    if ((0, _reference.isConst)(elementRef)) {
        element = elementRef.value();
    } else {
        let cache = new _reference.ReferenceCache(elementRef);
        element = cache.peek();
        vm.updateWith(new _vm2.Assert(cache));
    }
    if (insertBeforeRef.value() !== undefined) {
        if ((0, _reference.isConst)(insertBeforeRef)) {
            insertBefore = insertBeforeRef.value();
        } else {
            let cache = new _reference.ReferenceCache(insertBeforeRef);
            insertBefore = cache.peek();
            vm.updateWith(new _vm2.Assert(cache));
        }
    }
    let block = vm.elements().pushRemoteElement(element, guid, insertBefore);
    if (block) vm.associateDestroyable(block);
});
_opcodes.APPEND_OPCODES.add(55 /* PopRemoteElement */, vm => {
    vm.elements().popRemoteElement();
});
_opcodes.APPEND_OPCODES.add(53 /* FlushElement */, vm => {
    let operations = vm.fetchValue(_vm.$t0);
    let modifiers = null;
    if (operations) {
        modifiers = operations.flush(vm);
        vm.loadValue(_vm.$t0, null);
    }
    vm.elements().flushElement(modifiers);
});
_opcodes.APPEND_OPCODES.add(54 /* CloseElement */, vm => {
    let modifiers = vm.elements().closeElement();
    if (modifiers) {
        modifiers.forEach(([manager, modifier]) => {
            vm.env.scheduleInstallModifier(modifier, manager);
            let d = manager.getDestructor(modifier);
            if (d) {
                vm.associateDestroyable(d);
            }
        });
    }
});
_opcodes.APPEND_OPCODES.add(56 /* Modifier */, (vm, { op1: handle }) => {
    let { manager, state } = vm.runtime.resolver.resolve(handle);
    let stack = vm.stack;
    let args = stack.pop();
    let { constructing, updateOperations } = vm.elements();
    let dynamicScope = vm.dynamicScope();
    let modifier = manager.create(constructing, state, args, dynamicScope, updateOperations);
    let operations = vm.fetchValue(_vm.$t0);
    operations.addModifier(manager, modifier);
    let tag = manager.getTag(modifier);
    if (!(0, _reference.isConstTag)(tag)) {
        vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));
    }
});
class UpdateModifierOpcode extends _opcodes.UpdatingOpcode {
    constructor(tag, manager, modifier) {
        super();
        this.tag = tag;
        this.manager = manager;
        this.modifier = modifier;
        this.type = 'update-modifier';
        this.lastUpdated = (0, _reference.value)(tag);
    }
    evaluate(vm) {
        let { manager, modifier, tag, lastUpdated } = this;
        if (!(0, _reference.validate)(tag, lastUpdated)) {
            vm.env.scheduleUpdateModifier(modifier, manager);
            this.lastUpdated = (0, _reference.value)(tag);
        }
    }
}
exports.UpdateModifierOpcode = UpdateModifierOpcode;
_opcodes.APPEND_OPCODES.add(50 /* StaticAttr */, (vm, { op1: _name, op2: _value, op3: _namespace }) => {
    let name = vm[_symbols.CONSTANTS].getString(_name);
    let value = vm[_symbols.CONSTANTS].getString(_value);
    let namespace = _namespace ? vm[_symbols.CONSTANTS].getString(_namespace) : null;
    vm.elements().setStaticAttribute(name, value, namespace);
});
_opcodes.APPEND_OPCODES.add(51 /* DynamicAttr */, (vm, { op1: _name, op2: trusting, op3: _namespace }) => {
    let name = vm[_symbols.CONSTANTS].getString(_name);
    let reference = vm.stack.pop();
    let value = reference.value();
    let namespace = _namespace ? vm[_symbols.CONSTANTS].getString(_namespace) : null;
    let attribute = vm.elements().setDynamicAttribute(name, value, !!trusting, namespace);
    if (!(0, _reference.isConst)(reference)) {
        vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));
    }
});
class UpdateDynamicAttributeOpcode extends _opcodes.UpdatingOpcode {
    constructor(reference, attribute) {
        super();
        this.reference = reference;
        this.attribute = attribute;
        this.type = 'patch-element';
        let { tag } = reference;
        this.tag = tag;
        this.lastRevision = (0, _reference.value)(tag);
    }
    evaluate(vm) {
        let { attribute, reference, tag } = this;
        if (!(0, _reference.validate)(tag, this.lastRevision)) {
            this.lastRevision = (0, _reference.value)(tag);
            attribute.update(reference.value(), vm.env);
        }
    }
}
exports.UpdateDynamicAttributeOpcode = UpdateDynamicAttributeOpcode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,