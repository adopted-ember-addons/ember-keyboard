'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TEMPLATE_ONLY_COMPONENT = exports.SimpleComponentManager = undefined;

var _interfaces = require('./interfaces');

var _references = require('../references');

class SimpleComponentManager {
    getCapabilities(_state) {
        return _interfaces.MINIMAL_CAPABILITIES;
    }
    prepareArgs(_state, _args) {
        throw new Error(`Unimplemented prepareArgs in SimpleComponentManager`);
    }
    create(_env, _state, _args, _dynamicScope, _caller, _hasDefaultBlock) {
        throw new Error(`Unimplemented create in SimpleComponentManager`);
    }
    getSelf(_state) {
        return _references.UNDEFINED_REFERENCE;
    }
    getTag(_state) {
        throw new Error(`Unimplemented getTag in SimpleComponentManager`);
    }
    didRenderLayout(_state, _bounds) {
        throw new Error(`Unimplemented didRenderLayout in SimpleComponentManager`);
    }
    didCreate(_state) {
        throw new Error(`Unimplemented didCreate in SimpleComponentManager`);
    }
    update(_state, _dynamicScope) {
        throw new Error(`Unimplemented update in SimpleComponentManager`);
    }
    didUpdateLayout(_state, _bounds) {
        throw new Error(`Unimplemented didUpdateLayout in SimpleComponentManager`);
    }
    didUpdate(_state) {
        throw new Error(`Unimplemented didUpdate in SimpleComponentManager`);
    }
    getDestructor(_state) {
        return null;
    }
}
exports.SimpleComponentManager = SimpleComponentManager;
const TEMPLATE_ONLY_COMPONENT = exports.TEMPLATE_ONLY_COMPONENT = {
    state: null,
    manager: new SimpleComponentManager()
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBvbmVudC9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWdCQTs7QUFFTSxNQUFBLHNCQUFBLENBQTZCO0FBQ2pDLG9CQUFBLE1BQUEsRUFBZ0Q7QUFDOUMsZUFBQSxnQ0FBQTtBQUNEO0FBRUQsZ0JBQUEsTUFBQSxFQUFBLEtBQUEsRUFBZ0U7QUFDOUQsY0FBTSxJQUFBLEtBQUEsQ0FBTixxREFBTSxDQUFOO0FBQ0Q7QUFFRCxXQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsS0FBQSxFQUFBLGFBQUEsRUFBQSxPQUFBLEVBQUEsZ0JBQUEsRUFNMkI7QUFFekIsY0FBTSxJQUFBLEtBQUEsQ0FBTixnREFBTSxDQUFOO0FBQ0Q7QUFFRCxZQUFBLE1BQUEsRUFBc0M7QUFDcEMsZUFBQSwrQkFBQTtBQUNEO0FBRUQsV0FBQSxNQUFBLEVBQXFDO0FBQ25DLGNBQU0sSUFBQSxLQUFBLENBQU4sZ0RBQU0sQ0FBTjtBQUNEO0FBRUQsb0JBQUEsTUFBQSxFQUFBLE9BQUEsRUFBK0Q7QUFDN0QsY0FBTSxJQUFBLEtBQUEsQ0FBTix5REFBTSxDQUFOO0FBQ0Q7QUFFRCxjQUFBLE1BQUEsRUFBd0M7QUFDdEMsY0FBTSxJQUFBLEtBQUEsQ0FBTixtREFBTSxDQUFOO0FBQ0Q7QUFFRCxXQUFBLE1BQUEsRUFBQSxhQUFBLEVBQTBFO0FBQ3hFLGNBQU0sSUFBQSxLQUFBLENBQU4sZ0RBQU0sQ0FBTjtBQUNEO0FBRUQsb0JBQUEsTUFBQSxFQUFBLE9BQUEsRUFBK0Q7QUFDN0QsY0FBTSxJQUFBLEtBQUEsQ0FBTix5REFBTSxDQUFOO0FBQ0Q7QUFFRCxjQUFBLE1BQUEsRUFBd0M7QUFDdEMsY0FBTSxJQUFBLEtBQUEsQ0FBTixtREFBTSxDQUFOO0FBQ0Q7QUFFRCxrQkFBQSxNQUFBLEVBQTRDO0FBQzFDLGVBQUEsSUFBQTtBQUNEO0FBbERnQztRQUE3QixzQixHQUFBLHNCO0FBcURDLE1BQU0sNERBQTBCO0FBQ3JDLFdBRHFDLElBQUE7QUFFckMsYUFBUyxJQUFBLHNCQUFBO0FBRjRCLENBQWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50TWFuYWdlcixcbiAgQ29tcG9uZW50RGVmaW5pdGlvblN0YXRlLFxuICBWTUFyZ3VtZW50cyxcbiAgQ29tcG9uZW50Q2FwYWJpbGl0aWVzLFxuICBPcHRpb24sXG4gIER5bmFtaWNTY29wZSxcbiAgQ29tcG9uZW50SW5zdGFuY2VTdGF0ZSxcbiAgUHJlcGFyZWRBcmd1bWVudHMsXG4gIEJvdW5kcyxcbiAgU3ltYm9sRGVzdHJveWFibGUsXG4gIERlc3Ryb3lhYmxlLFxuICBFbnZpcm9ubWVudCxcbn0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBNSU5JTUFMX0NBUEFCSUxJVElFUyB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlLCBUYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgVU5ERUZJTkVEX1JFRkVSRU5DRSB9IGZyb20gJy4uL3JlZmVyZW5jZXMnO1xuXG5leHBvcnQgY2xhc3MgU2ltcGxlQ29tcG9uZW50TWFuYWdlciBpbXBsZW1lbnRzIENvbXBvbmVudE1hbmFnZXIge1xuICBnZXRDYXBhYmlsaXRpZXMoX3N0YXRlOiBDb21wb25lbnREZWZpbml0aW9uU3RhdGUpOiBDb21wb25lbnRDYXBhYmlsaXRpZXMge1xuICAgIHJldHVybiBNSU5JTUFMX0NBUEFCSUxJVElFUztcbiAgfVxuXG4gIHByZXBhcmVBcmdzKF9zdGF0ZTogQ29tcG9uZW50RGVmaW5pdGlvblN0YXRlLCBfYXJnczogVk1Bcmd1bWVudHMpOiBPcHRpb248UHJlcGFyZWRBcmd1bWVudHM+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuaW1wbGVtZW50ZWQgcHJlcGFyZUFyZ3MgaW4gU2ltcGxlQ29tcG9uZW50TWFuYWdlcmApO1xuICB9XG5cbiAgY3JlYXRlKFxuICAgIF9lbnY6IEVudmlyb25tZW50LFxuICAgIF9zdGF0ZTogQ29tcG9uZW50RGVmaW5pdGlvblN0YXRlLFxuICAgIF9hcmdzOiBPcHRpb248Vk1Bcmd1bWVudHM+LFxuICAgIF9keW5hbWljU2NvcGU6IE9wdGlvbjxEeW5hbWljU2NvcGU+LFxuICAgIF9jYWxsZXI6IE9wdGlvbjxWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPHVua25vd24+PixcbiAgICBfaGFzRGVmYXVsdEJsb2NrOiBib29sZWFuXG4gICk6IENvbXBvbmVudEluc3RhbmNlU3RhdGUge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5pbXBsZW1lbnRlZCBjcmVhdGUgaW4gU2ltcGxlQ29tcG9uZW50TWFuYWdlcmApO1xuICB9XG5cbiAgZ2V0U2VsZihfc3RhdGU6IENvbXBvbmVudEluc3RhbmNlU3RhdGUpOiBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlIHtcbiAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRTtcbiAgfVxuXG4gIGdldFRhZyhfc3RhdGU6IENvbXBvbmVudEluc3RhbmNlU3RhdGUpOiBUYWcge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5pbXBsZW1lbnRlZCBnZXRUYWcgaW4gU2ltcGxlQ29tcG9uZW50TWFuYWdlcmApO1xuICB9XG5cbiAgZGlkUmVuZGVyTGF5b3V0KF9zdGF0ZTogQ29tcG9uZW50SW5zdGFuY2VTdGF0ZSwgX2JvdW5kczogQm91bmRzKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmltcGxlbWVudGVkIGRpZFJlbmRlckxheW91dCBpbiBTaW1wbGVDb21wb25lbnRNYW5hZ2VyYCk7XG4gIH1cblxuICBkaWRDcmVhdGUoX3N0YXRlOiBDb21wb25lbnRJbnN0YW5jZVN0YXRlKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmltcGxlbWVudGVkIGRpZENyZWF0ZSBpbiBTaW1wbGVDb21wb25lbnRNYW5hZ2VyYCk7XG4gIH1cblxuICB1cGRhdGUoX3N0YXRlOiBDb21wb25lbnRJbnN0YW5jZVN0YXRlLCBfZHluYW1pY1Njb3BlOiBPcHRpb248RHluYW1pY1Njb3BlPik6IHZvaWQge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5pbXBsZW1lbnRlZCB1cGRhdGUgaW4gU2ltcGxlQ29tcG9uZW50TWFuYWdlcmApO1xuICB9XG5cbiAgZGlkVXBkYXRlTGF5b3V0KF9zdGF0ZTogQ29tcG9uZW50SW5zdGFuY2VTdGF0ZSwgX2JvdW5kczogQm91bmRzKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmltcGxlbWVudGVkIGRpZFVwZGF0ZUxheW91dCBpbiBTaW1wbGVDb21wb25lbnRNYW5hZ2VyYCk7XG4gIH1cblxuICBkaWRVcGRhdGUoX3N0YXRlOiBDb21wb25lbnRJbnN0YW5jZVN0YXRlKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbmltcGxlbWVudGVkIGRpZFVwZGF0ZSBpbiBTaW1wbGVDb21wb25lbnRNYW5hZ2VyYCk7XG4gIH1cblxuICBnZXREZXN0cnVjdG9yKF9zdGF0ZTogQ29tcG9uZW50SW5zdGFuY2VTdGF0ZSk6IE9wdGlvbjxTeW1ib2xEZXN0cm95YWJsZSB8IERlc3Ryb3lhYmxlPiB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IFRFTVBMQVRFX09OTFlfQ09NUE9ORU5UID0ge1xuICBzdGF0ZTogbnVsbCxcbiAgbWFuYWdlcjogbmV3IFNpbXBsZUNvbXBvbmVudE1hbmFnZXIoKSxcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9