'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConditionalReference = exports.FALSE_REFERENCE = exports.TRUE_REFERENCE = exports.NULL_REFERENCE = exports.UNDEFINED_REFERENCE = exports.PrimitiveReference = undefined;

var _reference = require('@glimmer/reference');

class PrimitiveReference extends _reference.ConstReference {
    constructor(value) {
        super(value);
    }
    static create(value) {
        if (value === undefined) {
            return UNDEFINED_REFERENCE;
        } else if (value === null) {
            return NULL_REFERENCE;
        } else if (value === true) {
            return TRUE_REFERENCE;
        } else if (value === false) {
            return FALSE_REFERENCE;
        } else if (typeof value === 'number') {
            return new ValueReference(value);
        } else {
            return new StringReference(value);
        }
    }
    get(_key) {
        return UNDEFINED_REFERENCE;
    }
}
exports.PrimitiveReference = PrimitiveReference;
class StringReference extends PrimitiveReference {
    constructor() {
        super(...arguments);
        this.lengthReference = null;
    }
    get(key) {
        if (key === 'length') {
            let { lengthReference } = this;
            if (lengthReference === null) {
                lengthReference = this.lengthReference = new ValueReference(this.inner.length);
            }
            return lengthReference;
        } else {
            return super.get(key);
        }
    }
}
class ValueReference extends PrimitiveReference {
    constructor(value) {
        super(value);
    }
}
const UNDEFINED_REFERENCE = exports.UNDEFINED_REFERENCE = new ValueReference(undefined);
const NULL_REFERENCE = exports.NULL_REFERENCE = new ValueReference(null);
const TRUE_REFERENCE = exports.TRUE_REFERENCE = new ValueReference(true);
const FALSE_REFERENCE = exports.FALSE_REFERENCE = new ValueReference(false);
class ConditionalReference {
    constructor(inner, toBool = defaultToBool) {
        this.inner = inner;
        this.toBool = toBool;
        this.tag = inner.tag;
    }
    value() {
        return this.toBool(this.inner.value());
    }
}
exports.ConditionalReference = ConditionalReference;
function defaultToBool(value) {
    return !!value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3JlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS00sTUFBQSxrQkFBQSxTQUFBLHlCQUFBLENBQXdFO0FBa0I1RSxnQkFBQSxLQUFBLEVBQThCO0FBQzVCLGNBQUEsS0FBQTtBQUNEO0FBbEJELFdBQUEsTUFBQSxDQUFBLEtBQUEsRUFBMkM7QUFDekMsWUFBSSxVQUFKLFNBQUEsRUFBeUI7QUFDdkIsbUJBQUEsbUJBQUE7QUFERixTQUFBLE1BRU8sSUFBSSxVQUFKLElBQUEsRUFBb0I7QUFDekIsbUJBQUEsY0FBQTtBQURLLFNBQUEsTUFFQSxJQUFJLFVBQUosSUFBQSxFQUFvQjtBQUN6QixtQkFBQSxjQUFBO0FBREssU0FBQSxNQUVBLElBQUksVUFBSixLQUFBLEVBQXFCO0FBQzFCLG1CQUFBLGVBQUE7QUFESyxTQUFBLE1BRUEsSUFBSSxPQUFBLEtBQUEsS0FBSixRQUFBLEVBQStCO0FBQ3BDLG1CQUFPLElBQUEsY0FBQSxDQUFQLEtBQU8sQ0FBUDtBQURLLFNBQUEsTUFFQTtBQUNMLG1CQUFPLElBQUEsZUFBQSxDQUFQLEtBQU8sQ0FBUDtBQUNEO0FBQ0Y7QUFNRCxRQUFBLElBQUEsRUFBZ0I7QUFDZCxlQUFBLG1CQUFBO0FBQ0Q7QUF4QjJFO1FBQXhFLGtCLEdBQUEsa0I7QUEyQk4sTUFBQSxlQUFBLFNBQUEsa0JBQUEsQ0FBd0Q7QUFBeEQsa0JBQUE7O0FBQ1UsYUFBQSxlQUFBLEdBQUEsSUFBQTtBQWVUO0FBYkMsUUFBQSxHQUFBLEVBQWU7QUFDYixZQUFJLFFBQUosUUFBQSxFQUFzQjtBQUNwQixnQkFBSSxFQUFBLGVBQUEsS0FBSixJQUFBO0FBRUEsZ0JBQUksb0JBQUosSUFBQSxFQUE4QjtBQUM1QixrQ0FBa0IsS0FBQSxlQUFBLEdBQXVCLElBQUEsY0FBQSxDQUFtQixLQUFBLEtBQUEsQ0FBNUQsTUFBeUMsQ0FBekM7QUFDRDtBQUVELG1CQUFBLGVBQUE7QUFQRixTQUFBLE1BUU87QUFDTCxtQkFBTyxNQUFBLEdBQUEsQ0FBUCxHQUFPLENBQVA7QUFDRDtBQUNGO0FBZnFEO0FBb0J4RCxNQUFBLGNBQUEsU0FBQSxrQkFBQSxDQUFtRTtBQUNqRSxnQkFBQSxLQUFBLEVBQW9CO0FBQ2xCLGNBQUEsS0FBQTtBQUNEO0FBSGdFO0FBTTVELE1BQU0sb0RBQXFELElBQUEsY0FBQSxDQUEzRCxTQUEyRCxDQUEzRDtBQUNBLE1BQU0sMENBQTJDLElBQUEsY0FBQSxDQUFqRCxJQUFpRCxDQUFqRDtBQUNBLE1BQU0sMENBQThDLElBQUEsY0FBQSxDQUFwRCxJQUFvRCxDQUFwRDtBQUNBLE1BQU0sNENBQStDLElBQUEsY0FBQSxDQUFyRCxLQUFxRCxDQUFyRDtBQUVELE1BQUEsb0JBQUEsQ0FBMkI7QUFHL0IsZ0JBQUEsS0FBQSxFQUVVLFNBRlYsYUFBQSxFQUU2RDtBQURuRCxhQUFBLEtBQUEsR0FBQSxLQUFBO0FBQ0EsYUFBQSxNQUFBLEdBQUEsTUFBQTtBQUVSLGFBQUEsR0FBQSxHQUFXLE1BQVgsR0FBQTtBQUNEO0FBRUQsWUFBSztBQUNILGVBQU8sS0FBQSxNQUFBLENBQVksS0FBQSxLQUFBLENBQW5CLEtBQW1CLEVBQVosQ0FBUDtBQUNEO0FBWjhCO1FBQTNCLG9CLEdBQUEsb0I7QUFlTixTQUFBLGFBQUEsQ0FBQSxLQUFBLEVBQXFDO0FBQ25DLFdBQU8sQ0FBQyxDQUFSLEtBQUE7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiwgUmVjYXN0IH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb25zdFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSwgUmVmZXJlbmNlLCBUYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuXG5leHBvcnQgdHlwZSBQcmltaXRpdmUgPSB1bmRlZmluZWQgfCBudWxsIHwgYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZVJlZmVyZW5jZTxUIGV4dGVuZHMgUHJpbWl0aXZlPiBleHRlbmRzIENvbnN0UmVmZXJlbmNlPFQ+XG4gIGltcGxlbWVudHMgUGF0aFJlZmVyZW5jZTxUPiB7XG4gIHN0YXRpYyBjcmVhdGU8VCBleHRlbmRzIFByaW1pdGl2ZT4odmFsdWU6IFQpOiBQcmltaXRpdmVSZWZlcmVuY2U8VD4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIE5VTExfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gVFJVRV9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRkFMU0VfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuZXcgVmFsdWVSZWZlcmVuY2UodmFsdWUpIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTdHJpbmdSZWZlcmVuY2UodmFsdWUgYXMgc3RyaW5nKSBhcyBSZWNhc3Q8U3RyaW5nUmVmZXJlbmNlLCBQcmltaXRpdmVSZWZlcmVuY2U8VD4+O1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHN1cGVyKHZhbHVlKTtcbiAgfVxuXG4gIGdldChfa2V5OiBzdHJpbmcpOiBQcmltaXRpdmVSZWZlcmVuY2U8UHJpbWl0aXZlPiB7XG4gICAgcmV0dXJuIFVOREVGSU5FRF9SRUZFUkVOQ0U7XG4gIH1cbn1cblxuY2xhc3MgU3RyaW5nUmVmZXJlbmNlIGV4dGVuZHMgUHJpbWl0aXZlUmVmZXJlbmNlPHN0cmluZz4ge1xuICBwcml2YXRlIGxlbmd0aFJlZmVyZW5jZTogT3B0aW9uPFByaW1pdGl2ZVJlZmVyZW5jZTxudW1iZXI+PiA9IG51bGw7XG5cbiAgZ2V0KGtleTogc3RyaW5nKTogUHJpbWl0aXZlUmVmZXJlbmNlPFByaW1pdGl2ZT4ge1xuICAgIGlmIChrZXkgPT09ICdsZW5ndGgnKSB7XG4gICAgICBsZXQgeyBsZW5ndGhSZWZlcmVuY2UgfSA9IHRoaXM7XG5cbiAgICAgIGlmIChsZW5ndGhSZWZlcmVuY2UgPT09IG51bGwpIHtcbiAgICAgICAgbGVuZ3RoUmVmZXJlbmNlID0gdGhpcy5sZW5ndGhSZWZlcmVuY2UgPSBuZXcgVmFsdWVSZWZlcmVuY2UodGhpcy5pbm5lci5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGVuZ3RoUmVmZXJlbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gICAgfVxuICB9XG59XG5cbnR5cGUgVmFsdWUgPSB1bmRlZmluZWQgfCBudWxsIHwgbnVtYmVyIHwgYm9vbGVhbjtcblxuY2xhc3MgVmFsdWVSZWZlcmVuY2U8VCBleHRlbmRzIFZhbHVlPiBleHRlbmRzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgc3VwZXIodmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBVTkRFRklORURfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8dW5kZWZpbmVkPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh1bmRlZmluZWQpO1xuZXhwb3J0IGNvbnN0IE5VTExfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8bnVsbD4gPSBuZXcgVmFsdWVSZWZlcmVuY2UobnVsbCk7XG5leHBvcnQgY29uc3QgVFJVRV9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh0cnVlKTtcbmV4cG9ydCBjb25zdCBGQUxTRV9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZShmYWxzZSk7XG5cbmV4cG9ydCBjbGFzcyBDb25kaXRpb25hbFJlZmVyZW5jZSBpbXBsZW1lbnRzIFJlZmVyZW5jZTxib29sZWFuPiB7XG4gIHB1YmxpYyB0YWc6IFRhZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGlubmVyOiBSZWZlcmVuY2U8dW5rbm93bj4sXG4gICAgcHJpdmF0ZSB0b0Jvb2w6ICh2YWx1ZTogdW5rbm93bikgPT4gYm9vbGVhbiA9IGRlZmF1bHRUb0Jvb2xcbiAgKSB7XG4gICAgdGhpcy50YWcgPSBpbm5lci50YWc7XG4gIH1cblxuICB2YWx1ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50b0Jvb2wodGhpcy5pbm5lci52YWx1ZSgpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0VG9Cb29sKHZhbHVlOiB1bmtub3duKSB7XG4gIHJldHVybiAhIXZhbHVlO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==