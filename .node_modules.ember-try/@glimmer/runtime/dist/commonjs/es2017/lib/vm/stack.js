'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InnerStack = undefined;

var _util = require('@glimmer/util');

var _lowLevel = require('@glimmer/low-level');

var _vm = require('@glimmer/vm');

var _lowLevel2 = require('./low-level');

var _symbols = require('../symbols');

const MAX_SMI = 0xfffffff;
class InnerStack {
    constructor(inner = new _lowLevel.Stack(), js = []) {
        this.inner = inner;
        this.js = js;
    }
    slice(start, end) {
        let inner;
        if (typeof start === 'number' && typeof end === 'number') {
            inner = this.inner.slice(start, end);
        } else if (typeof start === 'number' && end === undefined) {
            inner = this.inner.sliceFrom(start);
        } else {
            inner = this.inner.clone();
        }
        return new InnerStack(inner, this.js.slice(start, end));
    }
    sliceInner(start, end) {
        let out = [];
        for (let i = start; i < end; i++) {
            out.push(this.get(i));
        }
        return out;
    }
    copy(from, to) {
        this.inner.copy(from, to);
    }
    write(pos, value) {
        if (isImmediate(value)) {
            this.writeRaw(pos, encodeImmediate(value));
        } else {
            this.writeJs(pos, value);
        }
    }
    writeJs(pos, value) {
        let idx = this.js.length;
        this.js.push(value);
        this.inner.writeRaw(pos, ~idx);
    }
    writeRaw(pos, value) {
        this.inner.writeRaw(pos, value);
    }
    get(pos) {
        let value = this.inner.getRaw(pos);
        if (value < 0) {
            return this.js[~value];
        } else {
            return decodeImmediate(value);
        }
    }
    reset() {
        this.inner.reset();
        this.js.length = 0;
    }
    get length() {
        return this.inner.len();
    }
}
exports.InnerStack = InnerStack;
class EvaluationStackImpl {
    // fp -> sp
    constructor(stack, registers) {
        this.stack = stack;
        this[_symbols.REGISTERS] = registers;
        if (false) {
            Object.seal(this);
        }
    }
    static restore(snapshot) {
        let stack = new InnerStack();
        for (let i = 0; i < snapshot.length; i++) {
            stack.write(i, snapshot[i]);
        }
        return new this(stack, (0, _lowLevel2.initializeRegistersWithSP)(snapshot.length - 1));
    }
    push(value) {
        this.stack.write(++this[_symbols.REGISTERS][_vm.$sp], value);
    }
    pushRaw(value) {
        this.stack.writeRaw(++this[_symbols.REGISTERS][_vm.$sp], value);
    }
    pushNull() {
        this.stack.write(++this[_symbols.REGISTERS][_vm.$sp], null);
    }
    dup(position = this[_symbols.REGISTERS][_vm.$sp]) {
        this.stack.copy(position, ++this[_symbols.REGISTERS][_vm.$sp]);
    }
    copy(from, to) {
        this.stack.copy(from, to);
    }
    pop(n = 1) {
        let top = this.stack.get(this[_symbols.REGISTERS][_vm.$sp]);
        this[_symbols.REGISTERS][_vm.$sp] -= n;
        return top;
    }
    peek(offset = 0) {
        return this.stack.get(this[_symbols.REGISTERS][_vm.$sp] - offset);
    }
    get(offset, base = this[_symbols.REGISTERS][_vm.$fp]) {
        return this.stack.get(base + offset);
    }
    set(value, offset, base = this[_symbols.REGISTERS][_vm.$fp]) {
        this.stack.write(base + offset, value);
    }
    slice(start, end) {
        return this.stack.slice(start, end);
    }
    sliceArray(start, end) {
        return this.stack.sliceInner(start, end);
    }
    capture(items) {
        let end = this[_symbols.REGISTERS][_vm.$sp] + 1;
        let start = end - items;
        return this.stack.sliceInner(start, end);
    }
    reset() {
        this.stack.reset();
    }
    toArray() {
        console.log(this[_symbols.REGISTERS]);
        return this.stack.sliceInner(this[_symbols.REGISTERS][_vm.$fp], this[_symbols.REGISTERS][_vm.$sp] + 1);
    }
}
exports.default = EvaluationStackImpl;
function isImmediate(value) {
    let type = typeof value;
    if (value === null || value === undefined) return true;
    switch (type) {
        case 'boolean':
        case 'undefined':
            return true;
        case 'number':
            // not an integer
            if (value % 1 !== 0) return false;
            let abs = Math.abs(value);
            // too big
            if (abs > MAX_SMI) return false;
            return true;
        default:
            return false;
    }
}
function encodeSmi(primitive) {
    if (primitive < 0) {
        return Math.abs(primitive) << 3 | 4 /* NEGATIVE */;
    } else {
        return primitive << 3 | 0 /* NUMBER */;
    }
}
function encodeImmediate(primitive) {
    switch (typeof primitive) {
        case 'number':
            return encodeSmi(primitive);
        case 'boolean':
            return primitive ? 11 /* True */ : 3 /* False */;
        case 'object':
            // assume null
            return 19 /* Null */;
        case 'undefined':
            return 27 /* Undef */;
        default:
            throw (0, _util.unreachable)();
    }
}
function decodeSmi(smi) {
    switch (smi & 0b111) {
        case 0 /* NUMBER */:
            return smi >> 3;
        case 4 /* NEGATIVE */:
            return -(smi >> 3);
        default:
            throw (0, _util.unreachable)();
    }
}
function decodeImmediate(immediate) {
    switch (immediate) {
        case 3 /* False */:
            return false;
        case 11 /* True */:
            return true;
        case 19 /* Null */:
            return null;
        case 27 /* Undef */:
            return undefined;
        default:
            return decodeSmi(immediate);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,