'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UpdatableBlockImpl = exports.RemoteLiveBlock = exports.SimpleLiveBlock = exports.NewElementBuilder = exports.CURSOR_STACK = exports.Fragment = undefined;
exports.clientBuilder = clientBuilder;

var _util = require('@glimmer/util');

var _bounds2 = require('../bounds');

var _lifetime = require('../lifetime');

var _a;

class First {
    constructor(node) {
        this.node = node;
    }
    firstNode() {
        return this.node;
    }
}
class Last {
    constructor(node) {
        this.node = node;
    }
    lastNode() {
        return this.node;
    }
}
class Fragment {
    constructor(bounds) {
        this.bounds = bounds;
    }
    parentElement() {
        return this.bounds.parentElement();
    }
    firstNode() {
        return this.bounds.firstNode();
    }
    lastNode() {
        return this.bounds.lastNode();
    }
}
exports.Fragment = Fragment;
const CURSOR_STACK = exports.CURSOR_STACK = 'CURSOR_STACK [31ea0d2f-7c22-4814-9db7-28e4469b54e6]';
class NewElementBuilder {
    constructor(env, parentNode, nextSibling) {
        this.constructing = null;
        this.operations = null;
        this[_a] = new _util.Stack();
        this.modifierStack = new _util.Stack();
        this.blockStack = new _util.Stack();
        this.pushElement(parentNode, nextSibling);
        this.env = env;
        this.dom = env.getAppendOperations();
        this.updateOperations = env.getDOM();
    }
    static forInitialRender(env, cursor) {
        return new this(env, cursor.element, cursor.nextSibling).initialize();
    }
    static resume(env, block) {
        let parentNode = block.parentElement();
        let nextSibling = block.reset(env);
        let stack = new this(env, parentNode, nextSibling).initialize();
        stack.pushLiveBlock(block);
        return stack;
    }
    initialize() {
        this.pushSimpleBlock();
        return this;
    }
    debugBlocks() {
        return this.blockStack.toArray();
    }
    get element() {
        return this[CURSOR_STACK].current.element;
    }
    get nextSibling() {
        return this[CURSOR_STACK].current.nextSibling;
    }
    block() {
        return this.blockStack.current;
    }
    popElement() {
        this[CURSOR_STACK].pop();
        this[CURSOR_STACK].current;
    }
    pushSimpleBlock() {
        return this.pushLiveBlock(new SimpleLiveBlock(this.element));
    }
    pushUpdatableBlock() {
        return this.pushLiveBlock(new UpdatableBlockImpl(this.element));
    }
    pushBlockList(list) {
        return this.pushLiveBlock(new LiveBlockList(this.element, list));
    }
    pushLiveBlock(block, isRemote = false) {
        let current = this.blockStack.current;
        if (current !== null) {
            if (!isRemote) {
                current.didAppendBounds(block);
            }
        }
        this.__openBlock();
        this.blockStack.push(block);
        return block;
    }
    popBlock() {
        this.block().finalize(this);
        this.__closeBlock();
        return this.blockStack.pop();
    }
    __openBlock() {}
    __closeBlock() {}
    // todo return seems unused
    openElement(tag) {
        let element = this.__openElement(tag);
        this.constructing = element;
        return element;
    }
    __openElement(tag) {
        return this.dom.createElement(tag, this.element);
    }
    flushElement(modifiers) {
        let parent = this.element;
        let element = this.constructing;
        this.__flushElement(parent, element);
        this.constructing = null;
        this.operations = null;
        this.pushModifiers(modifiers);
        this.pushElement(element, null);
        this.didOpenElement(element);
    }
    __flushElement(parent, constructing) {
        this.dom.insertBefore(parent, constructing, this.nextSibling);
    }
    closeElement() {
        this.willCloseElement();
        this.popElement();
        return this.popModifiers();
    }
    pushRemoteElement(element, guid, insertBefore) {
        return this.__pushRemoteElement(element, guid, insertBefore);
    }
    __pushRemoteElement(element, _guid, insertBefore) {
        this.pushElement(element, insertBefore);
        if (insertBefore === undefined) {
            while (element.lastChild) {
                element.removeChild(element.lastChild);
            }
        }
        let block = new RemoteLiveBlock(element);
        return this.pushLiveBlock(block, true);
    }
    popRemoteElement() {
        this.popBlock();
        this.popElement();
    }
    pushElement(element, nextSibling = null) {
        this[CURSOR_STACK].push(new _bounds2.CursorImpl(element, nextSibling));
    }
    pushModifiers(modifiers) {
        this.modifierStack.push(modifiers);
    }
    popModifiers() {
        return this.modifierStack.pop();
    }
    didAppendBounds(bounds) {
        this.block().didAppendBounds(bounds);
        return bounds;
    }
    didAppendNode(node) {
        this.block().didAppendNode(node);
        return node;
    }
    didOpenElement(element) {
        this.block().openElement(element);
        return element;
    }
    willCloseElement() {
        this.block().closeElement();
    }
    appendText(string) {
        return this.didAppendNode(this.__appendText(string));
    }
    __appendText(text) {
        let { dom, element, nextSibling } = this;
        let node = dom.createTextNode(text);
        dom.insertBefore(element, node, nextSibling);
        return node;
    }
    __appendNode(node) {
        this.dom.insertBefore(this.element, node, this.nextSibling);
        return node;
    }
    __appendFragment(fragment) {
        let first = fragment.firstChild;
        if (first) {
            let ret = new _bounds2.ConcreteBounds(this.element, first, fragment.lastChild);
            this.dom.insertBefore(this.element, fragment, this.nextSibling);
            return ret;
        } else {
            return new _bounds2.SingleNodeBounds(this.element, this.__appendComment(''));
        }
    }
    __appendHTML(html) {
        return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
    }
    appendDynamicHTML(value) {
        let bounds = this.trustedContent(value);
        this.didAppendBounds(bounds);
    }
    appendDynamicText(value) {
        let node = this.untrustedContent(value);
        this.didAppendNode(node);
        return node;
    }
    appendDynamicFragment(value) {
        let bounds = this.__appendFragment(value);
        this.didAppendBounds(bounds);
    }
    appendDynamicNode(value) {
        let node = this.__appendNode(value);
        let bounds = new _bounds2.SingleNodeBounds(this.element, node);
        this.didAppendBounds(bounds);
    }
    trustedContent(value) {
        return this.__appendHTML(value);
    }
    untrustedContent(value) {
        return this.__appendText(value);
    }
    appendComment(string) {
        return this.didAppendNode(this.__appendComment(string));
    }
    __appendComment(string) {
        let { dom, element, nextSibling } = this;
        let node = dom.createComment(string);
        dom.insertBefore(element, node, nextSibling);
        return node;
    }
    __setAttribute(name, value, namespace) {
        this.dom.setAttribute(this.constructing, name, value, namespace);
    }
    __setProperty(name, value) {
        this.constructing[name] = value;
    }
    setStaticAttribute(name, value, namespace) {
        this.__setAttribute(name, value, namespace);
    }
    setDynamicAttribute(name, value, trusting, namespace) {
        let element = this.constructing;
        let attribute = this.env.attributeFor(element, name, trusting, namespace);
        attribute.set(this, value, this.env);
        return attribute;
    }
}
exports.NewElementBuilder = NewElementBuilder;
_a = CURSOR_STACK;
class SimpleLiveBlock {
    constructor(parent) {
        this.parent = parent;
        this.first = null;
        this.last = null;
        this.destroyables = null;
        this.nesting = 0;
    }
    parentElement() {
        return this.parent;
    }
    firstNode() {
        let first = this.first;
        return first.firstNode();
    }
    lastNode() {
        let last = this.last;
        return last.lastNode();
    }
    openElement(element) {
        this.didAppendNode(element);
        this.nesting++;
    }
    closeElement() {
        this.nesting--;
    }
    didAppendNode(node) {
        if (this.nesting !== 0) return;
        if (!this.first) {
            this.first = new First(node);
        }
        this.last = new Last(node);
    }
    didAppendBounds(bounds) {
        if (this.nesting !== 0) return;
        if (!this.first) {
            this.first = bounds;
        }
        this.last = bounds;
    }
    finalize(stack) {
        if (this.first === null) {
            stack.appendComment('');
        }
    }
}
exports.SimpleLiveBlock = SimpleLiveBlock;
class RemoteLiveBlock extends SimpleLiveBlock {
    [_util.DESTROY]() {
        (0, _bounds2.clear)(this);
    }
}
exports.RemoteLiveBlock = RemoteLiveBlock;
class UpdatableBlockImpl extends SimpleLiveBlock {
    reset(env) {
        let nextSibling = (0, _lifetime.detachChildren)(this, env);
        // let nextSibling = clear(this);
        this.first = null;
        this.last = null;
        this.destroyables = null;
        this.nesting = 0;
        return nextSibling;
    }
}
exports.UpdatableBlockImpl = UpdatableBlockImpl; // FIXME: All the noops in here indicate a modelling problem

class LiveBlockList {
    constructor(parent, boundList) {
        this.parent = parent;
        this.boundList = boundList;
        this.parent = parent;
        this.boundList = boundList;
    }
    parentElement() {
        return this.parent;
    }
    firstNode() {
        let head = this.boundList.head();
        return head.firstNode();
    }
    lastNode() {
        let tail = this.boundList.tail();
        return tail.lastNode();
    }
    openElement(_element) {
        false && (0, _util.assert)(false, 'Cannot openElement directly inside a block list');
    }
    closeElement() {
        false && (0, _util.assert)(false, 'Cannot closeElement directly inside a block list');
    }
    didAppendNode(_node) {
        false && (0, _util.assert)(false, 'Cannot create a new node directly inside a block list');
    }
    didAppendBounds(_bounds) {}
    finalize(_stack) {
        false && (0, _util.assert)(this.boundList.head() !== null, 'boundsList cannot be empty');
    }
}
function clientBuilder(env, cursor) {
    return NewElementBuilder.forInitialRender(env, cursor);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,