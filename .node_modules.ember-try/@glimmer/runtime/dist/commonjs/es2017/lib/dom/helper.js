'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DOMTreeConstruction = exports.DOMChangesImpl = exports.DOM = undefined;
exports.isWhitespace = isWhitespace;

var _svgInnerHtmlFix = require('../compat/svg-inner-html-fix');

var _textNodeMergingFix = require('../compat/text-node-merging-fix');

var _operations = require('./operations');

['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(tag => _operations.BLACKLIST_TABLE[tag] = 1);
const WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
let doc = typeof document === 'undefined' ? null : document;
function isWhitespace(string) {
    return WHITESPACE.test(string);
}
var DOM = exports.DOM = undefined;
(function (DOM) {
    class TreeConstruction extends _operations.DOMOperations {
        createElementNS(namespace, tag) {
            return this.document.createElementNS(namespace, tag);
        }
        setAttribute(element, name, value, namespace = null) {
            if (namespace) {
                element.setAttributeNS(namespace, name, value);
            } else {
                element.setAttribute(name, value);
            }
        }
    }
    DOM.TreeConstruction = TreeConstruction;
    let appliedTreeContruction = TreeConstruction;
    appliedTreeContruction = (0, _textNodeMergingFix.applyTextNodeMergingFix)(doc, appliedTreeContruction);
    appliedTreeContruction = (0, _svgInnerHtmlFix.applySVGInnerHTMLFix)(doc, appliedTreeContruction, "http://www.w3.org/2000/svg" /* SVG */);
    DOM.DOMTreeConstruction = appliedTreeContruction;
})(DOM || (exports.DOM = DOM = {}));
class DOMChangesImpl extends _operations.DOMOperations {
    constructor(document) {
        super(document);
        this.document = document;
        this.namespace = null;
    }
    setAttribute(element, name, value) {
        element.setAttribute(name, value);
    }
    removeAttribute(element, name) {
        element.removeAttribute(name);
    }
    insertAfter(element, node, reference) {
        this.insertBefore(element, node, reference.nextSibling);
    }
}
exports.DOMChangesImpl = DOMChangesImpl;
let helper = DOMChangesImpl;
helper = (0, _textNodeMergingFix.applyTextNodeMergingFix)(doc, helper);
helper = (0, _svgInnerHtmlFix.applySVGInnerHTMLFix)(doc, helper, "http://www.w3.org/2000/svg" /* SVG */);
exports.default = helper;
const DOMTreeConstruction = exports.DOMTreeConstruction = DOM.DOMTreeConstruction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2RvbS9oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O1FBa0VNLFksR0FBQSxZOzs7O0FBdkROOztBQUNBOztBQUVBLENBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxZQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLE1BQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUEsRUFBQSxJQUFBLEVBQUEsU0FBQSxFQUFBLE1BQUEsRUFBQSxNQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsS0FBQSxFQUFBLE1BQUEsRUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsRUFBQSxRQUFBLEVBQUEsUUFBQSxFQUFBLEtBQUEsRUFBQSxLQUFBLEVBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLENBNkNVLE9BQVEsNEJBQUEsR0FBQSxJQTdDbEIsQ0FBQTtBQStDQSxNQUFNLGFBQU4sMkVBQUE7QUFFQSxJQUFJLE1BQ0YsT0FBQSxRQUFBLEtBQUEsV0FBQSxHQUFBLElBQUEsR0FERixRQUFBO0FBR00sU0FBQSxZQUFBLENBQUEsTUFBQSxFQUFxQztBQUN6QyxXQUFPLFdBQUEsSUFBQSxDQUFQLE1BQU8sQ0FBUDtBQUNEO0FBRUssSUFBQSw2QkFBQTtBQUFOLENBQUEsVUFBQSxHQUFBLEVBQW9CO0FBQ2xCLFVBQUEsZ0JBQUEsU0FBQSx5QkFBQSxDQUFtRDtBQUNqRCx3QkFBQSxTQUFBLEVBQUEsR0FBQSxFQUF3RDtBQUN0RCxtQkFBTyxLQUFBLFFBQUEsQ0FBQSxlQUFBLENBQUEsU0FBQSxFQUFQLEdBQU8sQ0FBUDtBQUNEO0FBRUQscUJBQUEsT0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBSUUsWUFKRixJQUFBLEVBSXlDO0FBRXZDLGdCQUFBLFNBQUEsRUFBZTtBQUNiLHdCQUFBLGNBQUEsQ0FBQSxTQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUE7QUFERixhQUFBLE1BRU87QUFDTCx3QkFBQSxZQUFBLENBQUEsSUFBQSxFQUFBLEtBQUE7QUFDRDtBQUNGO0FBaEJnRDtBQUF0QyxRQUFBLGdCQUFBLEdBQUEsZ0JBQUE7QUFtQmIsUUFBSSx5QkFBSixnQkFBQTtBQUNBLDZCQUF5QixpREFBQSxHQUFBLEVBQXpCLHNCQUF5QixDQUF6QjtBQUlBLDZCQUF5QiwyQ0FBQSxHQUFBLEVBQUEsc0JBQUEsRUFBQSw0QkFBQSxDQUF6QixTQUF5QixDQUF6QjtBQU1hLFFBQUEsbUJBQUEsR0FBQSxzQkFBQTtBQS9CZixDQUFBLEVBQWlCLGdCQUFYLEdBQVcsR0FBQSxNQUFqQixFQUFpQixDQUFqQjtBQW1DTSxNQUFBLGNBQUEsU0FBQSx5QkFBQSxDQUEyQztBQUcvQyxnQkFBQSxRQUFBLEVBQThDO0FBQzVDLGNBQUEsUUFBQTtBQURvQixhQUFBLFFBQUEsR0FBQSxRQUFBO0FBRXBCLGFBQUEsU0FBQSxHQUFBLElBQUE7QUFDRDtBQUVELGlCQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFnRTtBQUM5RCxnQkFBQSxZQUFBLENBQUEsSUFBQSxFQUFBLEtBQUE7QUFDRDtBQUVELG9CQUFBLE9BQUEsRUFBQSxJQUFBLEVBQW9EO0FBQ2xELGdCQUFBLGVBQUEsQ0FBQSxJQUFBO0FBQ0Q7QUFFRCxnQkFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLFNBQUEsRUFBMkU7QUFDekUsYUFBQSxZQUFBLENBQUEsT0FBQSxFQUFBLElBQUEsRUFBaUMsVUFBakMsV0FBQTtBQUNEO0FBbEI4QztRQUEzQyxjLEdBQUEsYztBQXFCTixJQUFJLFNBQUosY0FBQTtBQUVBLFNBQVMsaURBQUEsR0FBQSxFQUFULE1BQVMsQ0FBVDtBQUNBLFNBQVMsMkNBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSw0QkFBQSxDQUFULFNBQVMsQ0FBVDtrQkFFQSxNO0FBQ08sTUFBTSxvREFBc0IsSUFBNUIsbUJBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHbGltbWVyVHJlZUNoYW5nZXMsIEdsaW1tZXJUcmVlQ29uc3RydWN0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7XG4gIEF0dHJOYW1lc3BhY2UsXG4gIEVsZW1lbnROYW1lc3BhY2UsXG4gIE5hbWVzcGFjZSxcbiAgU2ltcGxlRG9jdW1lbnQsXG4gIFNpbXBsZUVsZW1lbnQsXG4gIFNpbXBsZU5vZGUsXG59IGZyb20gJ0BzaW1wbGUtZG9tL2ludGVyZmFjZSc7XG5pbXBvcnQgeyBhcHBseVNWR0lubmVySFRNTEZpeCB9IGZyb20gJy4uL2NvbXBhdC9zdmctaW5uZXItaHRtbC1maXgnO1xuaW1wb3J0IHsgYXBwbHlUZXh0Tm9kZU1lcmdpbmdGaXggfSBmcm9tICcuLi9jb21wYXQvdGV4dC1ub2RlLW1lcmdpbmctZml4JztcbmltcG9ydCB7IERPTU9wZXJhdGlvbnMsIEJMQUNLTElTVF9UQUJMRSB9IGZyb20gJy4vb3BlcmF0aW9ucyc7XG5cbltcbiAgJ2InLFxuICAnYmlnJyxcbiAgJ2Jsb2NrcXVvdGUnLFxuICAnYm9keScsXG4gICdicicsXG4gICdjZW50ZXInLFxuICAnY29kZScsXG4gICdkZCcsXG4gICdkaXYnLFxuICAnZGwnLFxuICAnZHQnLFxuICAnZW0nLFxuICAnZW1iZWQnLFxuICAnaDEnLFxuICAnaDInLFxuICAnaDMnLFxuICAnaDQnLFxuICAnaDUnLFxuICAnaDYnLFxuICAnaGVhZCcsXG4gICdocicsXG4gICdpJyxcbiAgJ2ltZycsXG4gICdsaScsXG4gICdsaXN0aW5nJyxcbiAgJ21haW4nLFxuICAnbWV0YScsXG4gICdub2JyJyxcbiAgJ29sJyxcbiAgJ3AnLFxuICAncHJlJyxcbiAgJ3J1YnknLFxuICAncycsXG4gICdzbWFsbCcsXG4gICdzcGFuJyxcbiAgJ3N0cm9uZycsXG4gICdzdHJpa2UnLFxuICAnc3ViJyxcbiAgJ3N1cCcsXG4gICd0YWJsZScsXG4gICd0dCcsXG4gICd1JyxcbiAgJ3VsJyxcbiAgJ3ZhcicsXG5dLmZvckVhY2godGFnID0+IChCTEFDS0xJU1RfVEFCTEVbdGFnXSA9IDEpKTtcblxuY29uc3QgV0hJVEVTUEFDRSA9IC9bXFx0LVxcciBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMC1cXHUyMDBBXFx1MjAyOFxcdTIwMjlcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHVGRUZGXS87XG5cbmxldCBkb2M6IE9wdGlvbjxTaW1wbGVEb2N1bWVudD4gPVxuICB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gbnVsbCA6IChkb2N1bWVudCBhcyBTaW1wbGVEb2N1bWVudCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1doaXRlc3BhY2Uoc3RyaW5nOiBzdHJpbmcpIHtcbiAgcmV0dXJuIFdISVRFU1BBQ0UudGVzdChzdHJpbmcpO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIERPTSB7XG4gIGV4cG9ydCBjbGFzcyBUcmVlQ29uc3RydWN0aW9uIGV4dGVuZHMgRE9NT3BlcmF0aW9ucyBpbXBsZW1lbnRzIEdsaW1tZXJUcmVlQ29uc3RydWN0aW9uIHtcbiAgICBjcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlOiBFbGVtZW50TmFtZXNwYWNlLCB0YWc6IHN0cmluZyk6IFNpbXBsZUVsZW1lbnQge1xuICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgdGFnKTtcbiAgICB9XG5cbiAgICBzZXRBdHRyaWJ1dGUoXG4gICAgICBlbGVtZW50OiBTaW1wbGVFbGVtZW50LFxuICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgdmFsdWU6IHN0cmluZyxcbiAgICAgIG5hbWVzcGFjZTogT3B0aW9uPEF0dHJOYW1lc3BhY2U+ID0gbnVsbFxuICAgICkge1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBhcHBsaWVkVHJlZUNvbnRydWN0aW9uID0gVHJlZUNvbnN0cnVjdGlvbjtcbiAgYXBwbGllZFRyZWVDb250cnVjdGlvbiA9IGFwcGx5VGV4dE5vZGVNZXJnaW5nRml4KFxuICAgIGRvYyxcbiAgICBhcHBsaWVkVHJlZUNvbnRydWN0aW9uXG4gICkgYXMgdHlwZW9mIFRyZWVDb25zdHJ1Y3Rpb247XG4gIGFwcGxpZWRUcmVlQ29udHJ1Y3Rpb24gPSBhcHBseVNWR0lubmVySFRNTEZpeChcbiAgICBkb2MsXG4gICAgYXBwbGllZFRyZWVDb250cnVjdGlvbixcbiAgICBOYW1lc3BhY2UuU1ZHXG4gICkgYXMgdHlwZW9mIFRyZWVDb25zdHJ1Y3Rpb247XG5cbiAgZXhwb3J0IGNvbnN0IERPTVRyZWVDb25zdHJ1Y3Rpb24gPSBhcHBsaWVkVHJlZUNvbnRydWN0aW9uO1xuICBleHBvcnQgdHlwZSBET01UcmVlQ29uc3RydWN0aW9uID0gVHJlZUNvbnN0cnVjdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIERPTUNoYW5nZXNJbXBsIGV4dGVuZHMgRE9NT3BlcmF0aW9ucyBpbXBsZW1lbnRzIEdsaW1tZXJUcmVlQ2hhbmdlcyB7XG4gIHByb3RlY3RlZCBuYW1lc3BhY2U6IE9wdGlvbjxzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkb2N1bWVudDogU2ltcGxlRG9jdW1lbnQpIHtcbiAgICBzdXBlcihkb2N1bWVudCk7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSBudWxsO1xuICB9XG5cbiAgc2V0QXR0cmlidXRlKGVsZW1lbnQ6IFNpbXBsZUVsZW1lbnQsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgfVxuXG4gIHJlbW92ZUF0dHJpYnV0ZShlbGVtZW50OiBTaW1wbGVFbGVtZW50LCBuYW1lOiBzdHJpbmcpIHtcbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfVxuXG4gIGluc2VydEFmdGVyKGVsZW1lbnQ6IFNpbXBsZUVsZW1lbnQsIG5vZGU6IFNpbXBsZU5vZGUsIHJlZmVyZW5jZTogU2ltcGxlTm9kZSkge1xuICAgIHRoaXMuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIG5vZGUsIHJlZmVyZW5jZS5uZXh0U2libGluZyk7XG4gIH1cbn1cblxubGV0IGhlbHBlciA9IERPTUNoYW5nZXNJbXBsO1xuXG5oZWxwZXIgPSBhcHBseVRleHROb2RlTWVyZ2luZ0ZpeChkb2MsIGhlbHBlcikgYXMgdHlwZW9mIERPTUNoYW5nZXNJbXBsO1xuaGVscGVyID0gYXBwbHlTVkdJbm5lckhUTUxGaXgoZG9jLCBoZWxwZXIsIE5hbWVzcGFjZS5TVkcpIGFzIHR5cGVvZiBET01DaGFuZ2VzSW1wbDtcblxuZXhwb3J0IGRlZmF1bHQgaGVscGVyO1xuZXhwb3J0IGNvbnN0IERPTVRyZWVDb25zdHJ1Y3Rpb24gPSBET00uRE9NVHJlZUNvbnN0cnVjdGlvbjtcbmV4cG9ydCB0eXBlIERPTVRyZWVDb25zdHJ1Y3Rpb24gPSBET00uRE9NVHJlZUNvbnN0cnVjdGlvbjtcbmV4cG9ydCB0eXBlIERPTU5hbWVzcGFjZSA9IE5hbWVzcGFjZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=