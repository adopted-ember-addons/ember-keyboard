function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

import { CONSTANT_TAG, isConst, isModified, ReferenceCache, value, validate } from '@glimmer/reference';
import { initializeGuid, assert } from '@glimmer/util';

import { stackAssert } from './assert';
import { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';
import { PrimitiveReference } from '../../references';

import { CONSTANTS } from '../../symbols';
APPEND_OPCODES.add(38 /* ChildScope */, function (vm) {
    return vm.pushChildScope();
});
APPEND_OPCODES.add(39 /* PopScope */, function (vm) {
    return vm.popScope();
});
APPEND_OPCODES.add(58 /* PushDynamicScope */, function (vm) {
    return vm.pushDynamicScope();
});
APPEND_OPCODES.add(59 /* PopDynamicScope */, function (vm) {
    return vm.popDynamicScope();
});
APPEND_OPCODES.add(28 /* Constant */, function (vm, _ref) {
    var other = _ref.op1;

    vm.stack.push(vm[CONSTANTS].getOther(other));
});
APPEND_OPCODES.add(29 /* Primitive */, function (vm, _ref2) {
    var primitive = _ref2.op1;

    var stack = vm.stack;
    var flag = primitive & 7; // 111
    var value = primitive >> 3;
    switch (flag) {
        case 0 /* NUMBER */:
            stack.push(value);
            break;
        case 1 /* FLOAT */:
            stack.push(vm[CONSTANTS].getNumber(value));
            break;
        case 2 /* STRING */:
            stack.push(vm[CONSTANTS].getString(value));
            break;
        case 3 /* BOOLEAN_OR_VOID */:
            stack.pushRaw(primitive);
            break;
        case 4 /* NEGATIVE */:
            stack.push(vm[CONSTANTS].getNumber(value));
            break;
        case 5 /* BIG_NUM */:
            stack.push(vm[CONSTANTS].getNumber(value));
            break;
    }
});
APPEND_OPCODES.add(30 /* PrimitiveReference */, function (vm) {
    var stack = vm.stack;
    stack.push(PrimitiveReference.create(stack.pop()));
});
APPEND_OPCODES.add(31 /* ReifyU32 */, function (vm) {
    var stack = vm.stack;
    stack.push(stack.peek().value());
});
APPEND_OPCODES.add(32 /* Dup */, function (vm, _ref3) {
    var register = _ref3.op1,
        offset = _ref3.op2;

    var position = vm.fetchValue(register) - offset;
    vm.stack.dup(position);
});
APPEND_OPCODES.add(33 /* Pop */, function (vm, _ref4) {
    var count = _ref4.op1;

    vm.stack.pop(count);
});
APPEND_OPCODES.add(34 /* Load */, function (vm, _ref5) {
    var register = _ref5.op1;

    vm.load(register);
});
APPEND_OPCODES.add(35 /* Fetch */, function (vm, _ref6) {
    var register = _ref6.op1;

    vm.fetch(register);
});
APPEND_OPCODES.add(57 /* BindDynamicScope */, function (vm, _ref7) {
    var _names = _ref7.op1;

    var names = vm[CONSTANTS].getArray(_names);
    vm.bindDynamicScope(names);
});
APPEND_OPCODES.add(68 /* Enter */, function (vm, _ref8) {
    var args = _ref8.op1;

    vm.enter(args);
});
APPEND_OPCODES.add(69 /* Exit */, function (vm) {
    vm.exit();
});
APPEND_OPCODES.add(62 /* PushSymbolTable */, function (vm, _ref9) {
    var _table = _ref9.op1;

    var stack = vm.stack;
    stack.push(vm[CONSTANTS].getTemplateMeta(_table));
});
APPEND_OPCODES.add(61 /* PushBlockScope */, function (vm) {
    var stack = vm.stack;
    stack.push(vm.scope());
});
APPEND_OPCODES.add(60 /* CompileBlock */, function (vm) {
    var stack = vm.stack;
    var block = stack.pop();
    if (block) {
        stack.push(vm.compile(block));
    } else {
        stack.push(null);
    }
}, 'jit');
APPEND_OPCODES.add(63 /* InvokeYield */, function (vm) {
    var stack = vm.stack;

    var handle = stack.pop();
    var scope = stack.pop();
    var table = stack.pop();
    false && assert(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), stackAssert('Option<BlockSymbolTable>', table));

    var args = stack.pop();
    if (table === null) {
        // To balance the pop{Frame,Scope}
        vm.pushFrame();
        vm.pushScope(scope); // Could be null but it doesnt matter as it is immediatelly popped.
        return;
    }
    var invokingScope = scope;
    // If necessary, create a child scope
    {
        var locals = table.parameters;
        var localsCount = locals.length;
        if (localsCount > 0) {
            invokingScope = invokingScope.child();
            for (var i = 0; i < localsCount; i++) {
                invokingScope.bindSymbol(locals[i], args.at(i));
            }
        }
    }
    vm.pushFrame();
    vm.pushScope(invokingScope);
    vm.call(handle);
});
APPEND_OPCODES.add(64 /* JumpIf */, function (vm, _ref10) {
    var target = _ref10.op1;

    var reference = vm.stack.pop();
    if (isConst(reference)) {
        if (reference.value()) {
            vm.goto(target);
        }
    } else {
        var cache = new ReferenceCache(reference);
        if (cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
APPEND_OPCODES.add(65 /* JumpUnless */, function (vm, _ref11) {
    var target = _ref11.op1;

    var reference = vm.stack.pop();
    if (isConst(reference)) {
        if (!reference.value()) {
            vm.goto(target);
        }
    } else {
        var cache = new ReferenceCache(reference);
        if (!cache.peek()) {
            vm.goto(target);
        }
        vm.updateWith(new Assert(cache));
    }
});
APPEND_OPCODES.add(66 /* JumpEq */, function (vm, _ref12) {
    var target = _ref12.op1,
        comparison = _ref12.op2;

    var other = vm.stack.peek();
    if (other === comparison) {
        vm.goto(target);
    }
});
APPEND_OPCODES.add(67 /* AssertSame */, function (vm) {
    var reference = vm.stack.peek();
    if (!isConst(reference)) {
        vm.updateWith(Assert.initialize(new ReferenceCache(reference)));
    }
});
APPEND_OPCODES.add(70 /* ToBoolean */, function (vm) {
    var env = vm.env,
        stack = vm.stack;

    stack.push(env.toConditionalReference(stack.pop()));
});
export var Assert = function (_UpdatingOpcode) {
    _inherits(Assert, _UpdatingOpcode);

    function Assert(cache) {
        _classCallCheck(this, Assert);

        var _this = _possibleConstructorReturn(this, _UpdatingOpcode.call(this));

        _this.type = 'assert';
        _this.tag = cache.tag;
        _this.cache = cache;
        return _this;
    }

    Assert.initialize = function initialize(cache) {
        var assert = new Assert(cache);
        cache.peek();
        return assert;
    };

    Assert.prototype.evaluate = function evaluate(vm) {
        var cache = this.cache;

        if (isModified(cache.revalidate())) {
            vm.throw();
        }
    };

    return Assert;
}(UpdatingOpcode);
export var JumpIfNotModifiedOpcode = function (_UpdatingOpcode2) {
    _inherits(JumpIfNotModifiedOpcode, _UpdatingOpcode2);

    function JumpIfNotModifiedOpcode(tag, target) {
        _classCallCheck(this, JumpIfNotModifiedOpcode);

        var _this2 = _possibleConstructorReturn(this, _UpdatingOpcode2.call(this));

        _this2.target = target;
        _this2.type = 'jump-if-not-modified';
        _this2.tag = tag;
        _this2.lastRevision = value(tag);
        return _this2;
    }

    JumpIfNotModifiedOpcode.prototype.evaluate = function evaluate(vm) {
        var tag = this.tag,
            target = this.target,
            lastRevision = this.lastRevision;

        if (!vm.alwaysRevalidate && validate(tag, lastRevision)) {
            vm.goto(target);
        }
    };

    JumpIfNotModifiedOpcode.prototype.didModify = function didModify() {
        this.lastRevision = value(this.tag);
    };

    return JumpIfNotModifiedOpcode;
}(UpdatingOpcode);
export var DidModifyOpcode = function (_UpdatingOpcode3) {
    _inherits(DidModifyOpcode, _UpdatingOpcode3);

    function DidModifyOpcode(target) {
        _classCallCheck(this, DidModifyOpcode);

        var _this3 = _possibleConstructorReturn(this, _UpdatingOpcode3.call(this));

        _this3.target = target;
        _this3.type = 'did-modify';
        _this3.tag = CONSTANT_TAG;
        return _this3;
    }

    DidModifyOpcode.prototype.evaluate = function evaluate() {
        this.target.didModify();
    };

    return DidModifyOpcode;
}(UpdatingOpcode);
export var LabelOpcode = function () {
    function LabelOpcode(label) {
        _classCallCheck(this, LabelOpcode);

        this.tag = CONSTANT_TAG;
        this.type = 'label';
        this.label = null;
        this.prev = null;
        this.next = null;
        initializeGuid(this);
        this.label = label;
    }

    LabelOpcode.prototype.evaluate = function evaluate() {};

    LabelOpcode.prototype.inspect = function inspect() {
        return this.label + ' [' + this._guid + ']';
    };

    return LabelOpcode;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,