import { APPEND_OPCODES } from '../../opcodes';
import { assert } from '@glimmer/util';

import { CONSTANTS } from '../../symbols';
APPEND_OPCODES.add(103 /* InvokePartial */, function (vm, _ref) {
    var _meta = _ref.op1,
        _symbols = _ref.op2,
        _evalInfo = _ref.op3;
    var constants = vm[CONSTANTS],
        stack = vm.stack;

    var name = stack.pop().value();
    false && assert(typeof name === 'string', 'Could not find a partial named "' + String(name) + '"');

    var meta = constants.getTemplateMeta(_meta);
    var outerSymbols = constants.getStringArray(_symbols);
    var evalInfo = constants.getArray(_evalInfo);
    var handle = vm.runtime.resolver.lookupPartial(name, meta);
    false && assert(handle !== null, 'Could not find a partial named "' + name + '"');

    var definition = vm.runtime.resolver.resolve(handle);

    var _definition$getPartia = definition.getPartial(vm.context),
        symbolTable = _definition$getPartia.symbolTable,
        vmHandle = _definition$getPartia.handle;

    {
        var partialSymbols = symbolTable.symbols;
        var outerScope = vm.scope();
        var partialScope = vm.pushRootScope(partialSymbols.length);
        var evalScope = outerScope.getEvalScope();
        partialScope.bindEvalScope(evalScope);
        partialScope.bindSelf(outerScope.getSelf());
        var locals = Object.create(outerScope.getPartialMap());
        for (var i = 0; i < evalInfo.length; i++) {
            var slot = evalInfo[i];
            var _name = outerSymbols[slot - 1];
            var ref = outerScope.getSymbol(slot);
            locals[_name] = ref;
        }
        if (evalScope) {
            for (var _i = 0; _i < partialSymbols.length; _i++) {
                var _name2 = partialSymbols[_i];
                var symbol = _i + 1;
                var value = evalScope[_name2];
                if (value !== undefined) partialScope.bind(symbol, value);
            }
        }
        partialScope.bindPartialMap(locals);
        vm.pushFrame(); // sp += 2
        vm.call(vmHandle);
    }
}, 'jit');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvcGFydGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFBLGNBQUEsUUFBQSxlQUFBO0FBRUEsU0FBQSxNQUFBLFFBQUEsZUFBQTs7QUFJQSxTQUFBLFNBQUEsUUFBQSxlQUFBO0FBRUEsZUFBQSxHQUFBLENBQUEsR0FBQSxDQUFBLG1CQUFBLEVBRUUsVUFBQSxFQUFBLFFBQXNEO0FBQUEsUUFBakQsS0FBaUQsUUFBL0MsR0FBK0M7QUFBQSxRQUFqRCxRQUFpRCxRQUFuQyxHQUFtQztBQUFBLFFBQXRELFNBQXNELFFBQXBCLEdBQW9CO0FBQUEsUUFDaEQsU0FEZ0QsR0FDcEQsRUFEb0QsQ0FDOUMsU0FEOEM7QUFBQSxRQUNoRCxLQURnRCxHQUNwRCxFQURvRCxDQUNoRCxLQURnRDs7QUFHcEQsUUFBSSxPQUFhLE1BQU4sR0FBTSxHQUFqQixLQUFpQixFQUFqQjtBQUhvRCxhQUlwRCxPQUFPLE9BQUEsSUFBQSxLQUFQLFFBQUEsdUNBQW9FLE9BSmhCLElBSWdCLENBQXBFLE9BSm9EOztBQU1wRCxRQUFJLE9BQU8sVUFBQSxlQUFBLENBQVgsS0FBVyxDQUFYO0FBQ0EsUUFBSSxlQUFlLFVBQUEsY0FBQSxDQUFuQixRQUFtQixDQUFuQjtBQUNBLFFBQUksV0FBVyxVQUFBLFFBQUEsQ0FBZixTQUFlLENBQWY7QUFFQSxRQUFJLFNBQVMsR0FBQSxPQUFBLENBQUEsUUFBQSxDQUFBLGFBQUEsQ0FBQSxJQUFBLEVBQWIsSUFBYSxDQUFiO0FBVm9ELGFBWXBELE9BQU8sV0FBUCxJQUFBLHVDQVpvRCxJQVlwRCxPQVpvRDs7QUFjcEQsUUFBSSxhQUFhLEdBQUEsT0FBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLENBQWpCLE1BQWlCLENBQWpCOztBQWRvRCxnQ0FnQlosV0FBQSxVQUFBLENBQXNCLEdBQTlELE9BQXdDLENBaEJZO0FBQUEsUUFnQmhELFdBaEJnRCx5QkFnQmhELFdBaEJnRDtBQUFBLFFBZ0JoRCxRQWhCZ0QseUJBZ0JqQyxNQWhCaUM7O0FBa0JwRDtBQUNFLFlBQUksaUJBQWlCLFlBQXJCLE9BQUE7QUFDQSxZQUFJLGFBQWEsR0FBakIsS0FBaUIsRUFBakI7QUFDQSxZQUFJLGVBQWUsR0FBQSxhQUFBLENBQWlCLGVBQXBDLE1BQW1CLENBQW5CO0FBQ0EsWUFBSSxZQUFZLFdBQWhCLFlBQWdCLEVBQWhCO0FBQ0EscUJBQUEsYUFBQSxDQUFBLFNBQUE7QUFDQSxxQkFBQSxRQUFBLENBQXNCLFdBQXRCLE9BQXNCLEVBQXRCO0FBRUEsWUFBSSxTQUFTLE9BQUEsTUFBQSxDQUFjLFdBQTNCLGFBQTJCLEVBQWQsQ0FBYjtBQUlBLGFBQUssSUFBSSxJQUFULENBQUEsRUFBZ0IsSUFBSSxTQUFwQixNQUFBLEVBQUEsR0FBQSxFQUEwQztBQUN4QyxnQkFBSSxPQUFPLFNBQVgsQ0FBVyxDQUFYO0FBQ0EsZ0JBQUksUUFBTyxhQUFhLE9BQXhCLENBQVcsQ0FBWDtBQUNBLGdCQUFJLE1BQU0sV0FBQSxTQUFBLENBQVYsSUFBVSxDQUFWO0FBQ0EsbUJBQUEsS0FBQSxJQUFBLEdBQUE7QUFDRDtBQUVELFlBQUEsU0FBQSxFQUFlO0FBQ2IsaUJBQUssSUFBSSxLQUFULENBQUEsRUFBZ0IsS0FBSSxlQUFwQixNQUFBLEVBQUEsSUFBQSxFQUFnRDtBQUM5QyxvQkFBSSxTQUFPLGVBQVgsRUFBVyxDQUFYO0FBQ0Esb0JBQUksU0FBUyxLQUFiLENBQUE7QUFDQSxvQkFBSSxRQUFRLFVBQVosTUFBWSxDQUFaO0FBRUEsb0JBQUksVUFBSixTQUFBLEVBQXlCLGFBQUEsSUFBQSxDQUFBLE1BQUEsRUFBQSxLQUFBO0FBQzFCO0FBQ0Y7QUFFRCxxQkFBQSxjQUFBLENBQUEsTUFBQTtBQUVBLFdBL0JGLFNBK0JFLEdBL0JGLENBK0JrQjtBQUNoQixXQUFBLElBQUEsQ0FBQSxRQUFBO0FBQ0Q7QUFyREwsQ0FBQSxFQUFBLEtBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IEFQUEVORF9PUENPREVTIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5pbXBvcnQgeyBQYXJ0aWFsRGVmaW5pdGlvbiB9IGZyb20gJ0BnbGltbWVyL29wY29kZS1jb21waWxlcic7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnQGdsaW1tZXIvZGVidWcnO1xuaW1wb3J0IHsgT3AsIERpY3QgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENoZWNrUmVmZXJlbmNlIH0gZnJvbSAnLi8tZGVidWctc3RyaXAnO1xuaW1wb3J0IHsgQ09OU1RBTlRTIH0gZnJvbSAnLi4vLi4vc3ltYm9scyc7XG5cbkFQUEVORF9PUENPREVTLmFkZChcbiAgT3AuSW52b2tlUGFydGlhbCxcbiAgKHZtLCB7IG9wMTogX21ldGEsIG9wMjogX3N5bWJvbHMsIG9wMzogX2V2YWxJbmZvIH0pID0+IHtcbiAgICBsZXQgeyBbQ09OU1RBTlRTXTogY29uc3RhbnRzLCBzdGFjayB9ID0gdm07XG5cbiAgICBsZXQgbmFtZSA9IGNoZWNrKHN0YWNrLnBvcCgpLCBDaGVja1JlZmVyZW5jZSkudmFsdWUoKTtcbiAgICBhc3NlcnQodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnLCBgQ291bGQgbm90IGZpbmQgYSBwYXJ0aWFsIG5hbWVkIFwiJHtTdHJpbmcobmFtZSl9XCJgKTtcblxuICAgIGxldCBtZXRhID0gY29uc3RhbnRzLmdldFRlbXBsYXRlTWV0YShfbWV0YSk7XG4gICAgbGV0IG91dGVyU3ltYm9scyA9IGNvbnN0YW50cy5nZXRTdHJpbmdBcnJheShfc3ltYm9scyk7XG4gICAgbGV0IGV2YWxJbmZvID0gY29uc3RhbnRzLmdldEFycmF5KF9ldmFsSW5mbyk7XG5cbiAgICBsZXQgaGFuZGxlID0gdm0ucnVudGltZS5yZXNvbHZlci5sb29rdXBQYXJ0aWFsKG5hbWUgYXMgc3RyaW5nLCBtZXRhKTtcblxuICAgIGFzc2VydChoYW5kbGUgIT09IG51bGwsIGBDb3VsZCBub3QgZmluZCBhIHBhcnRpYWwgbmFtZWQgXCIke25hbWV9XCJgKTtcblxuICAgIGxldCBkZWZpbml0aW9uID0gdm0ucnVudGltZS5yZXNvbHZlci5yZXNvbHZlPFBhcnRpYWxEZWZpbml0aW9uPihoYW5kbGUhKTtcblxuICAgIGxldCB7IHN5bWJvbFRhYmxlLCBoYW5kbGU6IHZtSGFuZGxlIH0gPSBkZWZpbml0aW9uLmdldFBhcnRpYWwodm0uY29udGV4dCk7XG5cbiAgICB7XG4gICAgICBsZXQgcGFydGlhbFN5bWJvbHMgPSBzeW1ib2xUYWJsZS5zeW1ib2xzO1xuICAgICAgbGV0IG91dGVyU2NvcGUgPSB2bS5zY29wZSgpO1xuICAgICAgbGV0IHBhcnRpYWxTY29wZSA9IHZtLnB1c2hSb290U2NvcGUocGFydGlhbFN5bWJvbHMubGVuZ3RoKTtcbiAgICAgIGxldCBldmFsU2NvcGUgPSBvdXRlclNjb3BlLmdldEV2YWxTY29wZSgpO1xuICAgICAgcGFydGlhbFNjb3BlLmJpbmRFdmFsU2NvcGUoZXZhbFNjb3BlKTtcbiAgICAgIHBhcnRpYWxTY29wZS5iaW5kU2VsZihvdXRlclNjb3BlLmdldFNlbGYoKSk7XG5cbiAgICAgIGxldCBsb2NhbHMgPSBPYmplY3QuY3JlYXRlKG91dGVyU2NvcGUuZ2V0UGFydGlhbE1hcCgpKSBhcyBEaWN0PFxuICAgICAgICBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPHVua25vd24+XG4gICAgICA+O1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2YWxJbmZvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzbG90ID0gZXZhbEluZm9baV07XG4gICAgICAgIGxldCBuYW1lID0gb3V0ZXJTeW1ib2xzW3Nsb3QgLSAxXTtcbiAgICAgICAgbGV0IHJlZiA9IG91dGVyU2NvcGUuZ2V0U3ltYm9sKHNsb3QpO1xuICAgICAgICBsb2NhbHNbbmFtZV0gPSByZWY7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmFsU2NvcGUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWFsU3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBuYW1lID0gcGFydGlhbFN5bWJvbHNbaV07XG4gICAgICAgICAgbGV0IHN5bWJvbCA9IGkgKyAxO1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGV2YWxTY29wZVtuYW1lXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBwYXJ0aWFsU2NvcGUuYmluZChzeW1ib2wsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwYXJ0aWFsU2NvcGUuYmluZFBhcnRpYWxNYXAobG9jYWxzKTtcblxuICAgICAgdm0ucHVzaEZyYW1lKCk7IC8vIHNwICs9IDJcbiAgICAgIHZtLmNhbGwodm1IYW5kbGUhKTtcbiAgICB9XG4gIH0sXG4gICdqaXQnXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==