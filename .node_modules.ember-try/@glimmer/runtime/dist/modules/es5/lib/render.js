function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { capabilityFlagsFrom } from './capabilities';
import { hasStaticLayoutCapability } from './compiled/opcodes/component';
import { resolveComponent } from './component/resolve';
import { ARGS } from './symbols';
import { AotVM, JitVM } from './vm/append';
import { NewElementBuilder } from './vm/element-builder';
import { DefaultDynamicScope } from './dynamic-scope';
import { UNDEFINED_REFERENCE } from './references';

var TemplateIteratorImpl = function () {
    function TemplateIteratorImpl(vm) {
        _classCallCheck(this, TemplateIteratorImpl);

        this.vm = vm;
    }

    TemplateIteratorImpl.prototype.next = function next() {
        return this.vm.next();
    };

    TemplateIteratorImpl.prototype.sync = function sync() {
        return renderSync(this.vm.runtime.env, this);
    };

    return TemplateIteratorImpl;
}();

export function renderSync(env, iterator) {
    env.begin();
    var iteratorResult = void 0;
    do {
        iteratorResult = iterator.next();
    } while (!iteratorResult.done);
    var result = iteratorResult.value;
    env.commit();
    return result;
}
export function renderAotMain(runtime, self, treeBuilder, handle) {
    var dynamicScope = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new DefaultDynamicScope();

    var vm = AotVM.initial(runtime, { self: self, dynamicScope: dynamicScope, treeBuilder: treeBuilder, handle: handle });
    return new TemplateIteratorImpl(vm);
}
export function renderAot(runtime, handle, cursor) {
    var self = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : UNDEFINED_REFERENCE;

    var treeBuilder = NewElementBuilder.forInitialRender(runtime.env, cursor);
    var dynamicScope = new DefaultDynamicScope();
    var vm = AotVM.initial(runtime, { self: self, dynamicScope: dynamicScope, treeBuilder: treeBuilder, handle: handle });
    return new TemplateIteratorImpl(vm);
}
export function renderJitMain(runtime, context, self, treeBuilder, handle) {
    var dynamicScope = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new DefaultDynamicScope();

    var vm = JitVM.initial(runtime, context, { self: self, dynamicScope: dynamicScope, treeBuilder: treeBuilder, handle: handle });
    return new TemplateIteratorImpl(vm);
}
function renderInvocation(vm, invocation, definition, args) {
    // Get a list of tuples of argument names and references, like
    // [['title', reference], ['name', reference]]
    var argList = Object.keys(args).map(function (key) {
        return [key, args[key]];
    });
    var blockNames = ['main', 'else', 'attrs'];
    // Prefix argument names with `@` symbol
    var argNames = argList.map(function (_ref) {
        var name = _ref[0];
        return '@' + name;
    });
    vm.pushFrame();
    // Push blocks on to the stack, three stack values per block
    for (var i = 0; i < 3 * blockNames.length; i++) {
        vm.stack.push(null);
    }
    vm.stack.push(null);
    // For each argument, push its backing reference on to the stack
    argList.forEach(function (_ref2) {
        var reference = _ref2[1];

        vm.stack.push(reference);
    });
    // Configure VM based on blocks and args just pushed on to the stack.
    vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);
    // Needed for the Op.Main opcode: arguments, component invocation object, and
    // component definition.
    vm.stack.push(vm[ARGS]);
    vm.stack.push(invocation);
    vm.stack.push(definition);
    return new TemplateIteratorImpl(vm);
}
export function renderAotComponent(runtime, treeBuilder, main, name) {
    var args = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var dynamicScope = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new DefaultDynamicScope();

    var vm = AotVM.empty(runtime, { treeBuilder: treeBuilder, handle: main, dynamicScope: dynamicScope });
    var definition = resolveComponent(vm.runtime.resolver, name);
    var manager = definition.manager,
        state = definition.state;

    var capabilities = capabilityFlagsFrom(manager.getCapabilities(state));
    var invocation = void 0;
    if (hasStaticLayoutCapability(capabilities, manager)) {
        invocation = manager.getAotStaticLayout(state, vm.runtime.resolver);
    } else {
        throw new Error('Cannot invoke components with dynamic layouts as a root component.');
    }
    return renderInvocation(vm, invocation, definition, args);
}
export function renderJitComponent(runtime, treeBuilder, context, main, name) {
    var args = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    var dynamicScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new DefaultDynamicScope();

    var vm = JitVM.empty(runtime, { treeBuilder: treeBuilder, handle: main, dynamicScope: dynamicScope }, context);
    var definition = resolveComponent(vm.runtime.resolver, name);
    var manager = definition.manager,
        state = definition.state;

    var capabilities = capabilityFlagsFrom(manager.getCapabilities(state));
    var invocation = void 0;
    if (hasStaticLayoutCapability(capabilities, manager)) {
        var layout = manager.getJitStaticLayout(state, vm.runtime.resolver);
        invocation = { handle: layout.compile(context), symbolTable: layout.symbolTable };
    } else {
        throw new Error('Cannot invoke components with dynamic layouts as a root component.');
    }
    return renderInvocation(vm, invocation, definition, args);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,