import { initializeGuid, fillNulls, assert } from '@glimmer/util';

import { $pc, $sp, $ra, $fp } from '@glimmer/vm';
// these import bindings will be stripped from build

import { DESTRUCTOR_STACK, INNER_VM, STACKS } from './symbols';
import { CURSOR_STACK } from './vm/element-builder';
import { isScopeReference } from './environment';
export class AppendOpcodes {
    constructor() {
        this.evaluateOpcode = fillNulls(90 /* Size */).slice();
    }
    add(name, evaluate, kind = 'syscall') {
        this.evaluateOpcode[name] = {
            syscall: kind !== 'machine',
            evaluate
        };
    }
    debugBefore(vm, opcode) {
        let params = undefined;
        let opName = undefined;
        if (false) {
            let pos = vm[INNER_VM].fetchRegister($pc) - opcode.size;
            [opName, params] = [];
            // console.log(`${typePos(vm['pc'])}.`);
            console.log(`${pos}. ${''}`);
            let debugParams = [];
            for (let prop in params) {
                debugParams.push(prop, '=', params[prop]);
            }
            console.log(...debugParams);
        }
        let sp;
        if (false) {
            sp = vm.fetchValue($sp);
        }

        return {
            sp: sp,
            pc: vm.fetchValue($pc),
            name: opName,
            params,
            type: opcode.type,
            isMachine: opcode.isMachine,
            size: opcode.size,
            state: undefined
        };
    }
    debugAfter(vm, pre) {
        let { sp, type, isMachine, pc } = pre;
        if (false) {
            let meta = type;
            let actualChange = vm.fetchValue($sp) - sp;
            if (meta && meta.check && typeof meta.stackChange === 'number' && meta.stackChange !== actualChange) {
                throw new Error(`Error in ${pre.name}:\n\n${pc}. ${''}\n\nStack changed by ${actualChange}, expected ${meta.stackChange}`);
            }
            console.log('%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O, v0: %O', 'color: orange', vm[INNER_VM].registers[$pc], vm[INNER_VM].registers[$ra], vm[INNER_VM].registers[$fp], vm[INNER_VM].registers[$sp], vm['s0'], vm['s1'], vm['t0'], vm['t1'], vm['v0']);
            console.log('%c -> eval stack', 'color: red', vm.stack.toArray());
            console.log('%c -> block stack', 'color: magenta', vm.elements().debugBlocks());
            console.log('%c -> destructor stack', 'color: violet', vm[DESTRUCTOR_STACK].toArray());
            if (vm[STACKS].scope.current === null) {
                console.log('%c -> scope', 'color: green', 'null');
            } else {
                console.log('%c -> scope', 'color: green', vm.scope().slots.map(s => isScopeReference(s) ? s.value() : s));
            }
            console.log('%c -> elements', 'color: blue', vm.elements()[CURSOR_STACK].current.element);
            console.log('%c -> constructing', 'color: aqua', vm.elements()['constructing']);
        }
    }
    evaluate(vm, opcode, type) {
        let operation = this.evaluateOpcode[type];
        if (operation.syscall) {
            (false && assert(!opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`));

            operation.evaluate(vm, opcode);
        } else {
            (false && assert(opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`));

            operation.evaluate(vm[INNER_VM], opcode);
        }
    }
}
export const APPEND_OPCODES = new AppendOpcodes();
export class AbstractOpcode {
    constructor() {
        initializeGuid(this);
    }
}
export class UpdatingOpcode extends AbstractOpcode {
    constructor() {
        super(...arguments);
        this.next = null;
        this.prev = null;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,