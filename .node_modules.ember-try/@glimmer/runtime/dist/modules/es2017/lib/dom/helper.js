import { applySVGInnerHTMLFix } from '../compat/svg-inner-html-fix';
import { applyTextNodeMergingFix } from '../compat/text-node-merging-fix';
import { DOMOperations, BLACKLIST_TABLE } from './operations';
['b', 'big', 'blockquote', 'body', 'br', 'center', 'code', 'dd', 'div', 'dl', 'dt', 'em', 'embed', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'hr', 'i', 'img', 'li', 'listing', 'main', 'meta', 'nobr', 'ol', 'p', 'pre', 'ruby', 's', 'small', 'span', 'strong', 'strike', 'sub', 'sup', 'table', 'tt', 'u', 'ul', 'var'].forEach(tag => BLACKLIST_TABLE[tag] = 1);
const WHITESPACE = /[\t-\r \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]/;
let doc = typeof document === 'undefined' ? null : document;
export function isWhitespace(string) {
    return WHITESPACE.test(string);
}
export var DOM;
(function (DOM) {
    class TreeConstruction extends DOMOperations {
        createElementNS(namespace, tag) {
            return this.document.createElementNS(namespace, tag);
        }
        setAttribute(element, name, value, namespace = null) {
            if (namespace) {
                element.setAttributeNS(namespace, name, value);
            } else {
                element.setAttribute(name, value);
            }
        }
    }
    DOM.TreeConstruction = TreeConstruction;
    let appliedTreeContruction = TreeConstruction;
    appliedTreeContruction = applyTextNodeMergingFix(doc, appliedTreeContruction);
    appliedTreeContruction = applySVGInnerHTMLFix(doc, appliedTreeContruction, "http://www.w3.org/2000/svg" /* SVG */);
    DOM.DOMTreeConstruction = appliedTreeContruction;
})(DOM || (DOM = {}));
export class DOMChangesImpl extends DOMOperations {
    constructor(document) {
        super(document);
        this.document = document;
        this.namespace = null;
    }
    setAttribute(element, name, value) {
        element.setAttribute(name, value);
    }
    removeAttribute(element, name) {
        element.removeAttribute(name);
    }
    insertAfter(element, node, reference) {
        this.insertBefore(element, node, reference.nextSibling);
    }
}
let helper = DOMChangesImpl;
helper = applyTextNodeMergingFix(doc, helper);
helper = applySVGInnerHTMLFix(doc, helper, "http://www.w3.org/2000/svg" /* SVG */);
export default helper;
export const DOMTreeConstruction = DOM.DOMTreeConstruction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2RvbS9oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsU0FBUyxvQkFBVCxRQUFxQyw4QkFBckM7QUFDQSxTQUFTLHVCQUFULFFBQXdDLGlDQUF4QztBQUNBLFNBQVMsYUFBVCxFQUF3QixlQUF4QixRQUErQyxjQUEvQztBQUVBLENBQ0UsR0FERixFQUVFLEtBRkYsRUFHRSxZQUhGLEVBSUUsTUFKRixFQUtFLElBTEYsRUFNRSxRQU5GLEVBT0UsTUFQRixFQVFFLElBUkYsRUFTRSxLQVRGLEVBVUUsSUFWRixFQVdFLElBWEYsRUFZRSxJQVpGLEVBYUUsT0FiRixFQWNFLElBZEYsRUFlRSxJQWZGLEVBZ0JFLElBaEJGLEVBaUJFLElBakJGLEVBa0JFLElBbEJGLEVBbUJFLElBbkJGLEVBb0JFLE1BcEJGLEVBcUJFLElBckJGLEVBc0JFLEdBdEJGLEVBdUJFLEtBdkJGLEVBd0JFLElBeEJGLEVBeUJFLFNBekJGLEVBMEJFLE1BMUJGLEVBMkJFLE1BM0JGLEVBNEJFLE1BNUJGLEVBNkJFLElBN0JGLEVBOEJFLEdBOUJGLEVBK0JFLEtBL0JGLEVBZ0NFLE1BaENGLEVBaUNFLEdBakNGLEVBa0NFLE9BbENGLEVBbUNFLE1BbkNGLEVBb0NFLFFBcENGLEVBcUNFLFFBckNGLEVBc0NFLEtBdENGLEVBdUNFLEtBdkNGLEVBd0NFLE9BeENGLEVBeUNFLElBekNGLEVBMENFLEdBMUNGLEVBMkNFLElBM0NGLEVBNENFLEtBNUNGLEVBNkNFLE9BN0NGLENBNkNVLE9BQVEsZ0JBQWdCLEdBQWhCLElBQXVCLENBN0N6QztBQStDQSxNQUFNLGFBQWEsMkVBQW5CO0FBRUEsSUFBSSxNQUNGLE9BQU8sUUFBUCxLQUFvQixXQUFwQixHQUFrQyxJQUFsQyxHQUEwQyxRQUQ1QztBQUdBLE9BQU0sU0FBVSxZQUFWLENBQXVCLE1BQXZCLEVBQXFDO0FBQ3pDLFdBQU8sV0FBVyxJQUFYLENBQWdCLE1BQWhCLENBQVA7QUFDRDtBQUVELE9BQU0sSUFBVyxHQUFYO0FBQU4sQ0FBQSxVQUFpQixHQUFqQixFQUFvQjtBQUNsQixVQUFhLGdCQUFiLFNBQXNDLGFBQXRDLENBQW1EO0FBQ2pELHdCQUFnQixTQUFoQixFQUE2QyxHQUE3QyxFQUF3RDtBQUN0RCxtQkFBTyxLQUFLLFFBQUwsQ0FBYyxlQUFkLENBQThCLFNBQTlCLEVBQXlDLEdBQXpDLENBQVA7QUFDRDtBQUVELHFCQUNFLE9BREYsRUFFRSxJQUZGLEVBR0UsS0FIRixFQUlFLFlBQW1DLElBSnJDLEVBSXlDO0FBRXZDLGdCQUFJLFNBQUosRUFBZTtBQUNiLHdCQUFRLGNBQVIsQ0FBdUIsU0FBdkIsRUFBa0MsSUFBbEMsRUFBd0MsS0FBeEM7QUFDRCxhQUZELE1BRU87QUFDTCx3QkFBUSxZQUFSLENBQXFCLElBQXJCLEVBQTJCLEtBQTNCO0FBQ0Q7QUFDRjtBQWhCZ0Q7QUFBdEMsUUFBQSxnQkFBQSxHQUFnQixnQkFBaEI7QUFtQmIsUUFBSSx5QkFBeUIsZ0JBQTdCO0FBQ0EsNkJBQXlCLHdCQUN2QixHQUR1QixFQUV2QixzQkFGdUIsQ0FBekI7QUFJQSw2QkFBeUIscUJBQ3ZCLEdBRHVCLEVBRXZCLHNCQUZ1QixFQUVELDRCQUZDLENBRUQsU0FGQyxDQUF6QjtBQU1hLFFBQUEsbUJBQUEsR0FBc0Isc0JBQXRCO0FBRWQsQ0FqQ0QsRUFBaUIsUUFBQSxNQUFHLEVBQUgsQ0FBakI7QUFtQ0EsT0FBTSxNQUFPLGNBQVAsU0FBOEIsYUFBOUIsQ0FBMkM7QUFHL0MsZ0JBQXNCLFFBQXRCLEVBQThDO0FBQzVDLGNBQU0sUUFBTjtBQURvQixhQUFBLFFBQUEsR0FBQSxRQUFBO0FBRXBCLGFBQUssU0FBTCxHQUFpQixJQUFqQjtBQUNEO0FBRUQsaUJBQWEsT0FBYixFQUFxQyxJQUFyQyxFQUFtRCxLQUFuRCxFQUFnRTtBQUM5RCxnQkFBUSxZQUFSLENBQXFCLElBQXJCLEVBQTJCLEtBQTNCO0FBQ0Q7QUFFRCxvQkFBZ0IsT0FBaEIsRUFBd0MsSUFBeEMsRUFBb0Q7QUFDbEQsZ0JBQVEsZUFBUixDQUF3QixJQUF4QjtBQUNEO0FBRUQsZ0JBQVksT0FBWixFQUFvQyxJQUFwQyxFQUFzRCxTQUF0RCxFQUEyRTtBQUN6RSxhQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFBMkIsSUFBM0IsRUFBaUMsVUFBVSxXQUEzQztBQUNEO0FBbEI4QztBQXFCakQsSUFBSSxTQUFTLGNBQWI7QUFFQSxTQUFTLHdCQUF3QixHQUF4QixFQUE2QixNQUE3QixDQUFUO0FBQ0EsU0FBUyxxQkFBcUIsR0FBckIsRUFBMEIsTUFBMUIsRUFBZ0MsNEJBQWhDLENBQWdDLFNBQWhDLENBQVQ7QUFFQSxlQUFlLE1BQWY7QUFDQSxPQUFPLE1BQU0sc0JBQXNCLElBQUksbUJBQWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2xpbW1lclRyZWVDaGFuZ2VzLCBHbGltbWVyVHJlZUNvbnN0cnVjdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQge1xuICBBdHRyTmFtZXNwYWNlLFxuICBFbGVtZW50TmFtZXNwYWNlLFxuICBOYW1lc3BhY2UsXG4gIFNpbXBsZURvY3VtZW50LFxuICBTaW1wbGVFbGVtZW50LFxuICBTaW1wbGVOb2RlLFxufSBmcm9tICdAc2ltcGxlLWRvbS9pbnRlcmZhY2UnO1xuaW1wb3J0IHsgYXBwbHlTVkdJbm5lckhUTUxGaXggfSBmcm9tICcuLi9jb21wYXQvc3ZnLWlubmVyLWh0bWwtZml4JztcbmltcG9ydCB7IGFwcGx5VGV4dE5vZGVNZXJnaW5nRml4IH0gZnJvbSAnLi4vY29tcGF0L3RleHQtbm9kZS1tZXJnaW5nLWZpeCc7XG5pbXBvcnQgeyBET01PcGVyYXRpb25zLCBCTEFDS0xJU1RfVEFCTEUgfSBmcm9tICcuL29wZXJhdGlvbnMnO1xuXG5bXG4gICdiJyxcbiAgJ2JpZycsXG4gICdibG9ja3F1b3RlJyxcbiAgJ2JvZHknLFxuICAnYnInLFxuICAnY2VudGVyJyxcbiAgJ2NvZGUnLFxuICAnZGQnLFxuICAnZGl2JyxcbiAgJ2RsJyxcbiAgJ2R0JyxcbiAgJ2VtJyxcbiAgJ2VtYmVkJyxcbiAgJ2gxJyxcbiAgJ2gyJyxcbiAgJ2gzJyxcbiAgJ2g0JyxcbiAgJ2g1JyxcbiAgJ2g2JyxcbiAgJ2hlYWQnLFxuICAnaHInLFxuICAnaScsXG4gICdpbWcnLFxuICAnbGknLFxuICAnbGlzdGluZycsXG4gICdtYWluJyxcbiAgJ21ldGEnLFxuICAnbm9icicsXG4gICdvbCcsXG4gICdwJyxcbiAgJ3ByZScsXG4gICdydWJ5JyxcbiAgJ3MnLFxuICAnc21hbGwnLFxuICAnc3BhbicsXG4gICdzdHJvbmcnLFxuICAnc3RyaWtlJyxcbiAgJ3N1YicsXG4gICdzdXAnLFxuICAndGFibGUnLFxuICAndHQnLFxuICAndScsXG4gICd1bCcsXG4gICd2YXInLFxuXS5mb3JFYWNoKHRhZyA9PiAoQkxBQ0tMSVNUX1RBQkxFW3RhZ10gPSAxKSk7XG5cbmNvbnN0IFdISVRFU1BBQ0UgPSAvW1xcdC1cXHIgXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDAtXFx1MjAwQVxcdTIwMjhcXHUyMDI5XFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1RkVGRl0vO1xuXG5sZXQgZG9jOiBPcHRpb248U2ltcGxlRG9jdW1lbnQ+ID1cbiAgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiAoZG9jdW1lbnQgYXMgU2ltcGxlRG9jdW1lbnQpO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNXaGl0ZXNwYWNlKHN0cmluZzogc3RyaW5nKSB7XG4gIHJldHVybiBXSElURVNQQUNFLnRlc3Qoc3RyaW5nKTtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBET00ge1xuICBleHBvcnQgY2xhc3MgVHJlZUNvbnN0cnVjdGlvbiBleHRlbmRzIERPTU9wZXJhdGlvbnMgaW1wbGVtZW50cyBHbGltbWVyVHJlZUNvbnN0cnVjdGlvbiB7XG4gICAgY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZTogRWxlbWVudE5hbWVzcGFjZSwgdGFnOiBzdHJpbmcpOiBTaW1wbGVFbGVtZW50IHtcbiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2UsIHRhZyk7XG4gICAgfVxuXG4gICAgc2V0QXR0cmlidXRlKFxuICAgICAgZWxlbWVudDogU2ltcGxlRWxlbWVudCxcbiAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgICBuYW1lc3BhY2U6IE9wdGlvbjxBdHRyTmFtZXNwYWNlPiA9IG51bGxcbiAgICApIHtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgYXBwbGllZFRyZWVDb250cnVjdGlvbiA9IFRyZWVDb25zdHJ1Y3Rpb247XG4gIGFwcGxpZWRUcmVlQ29udHJ1Y3Rpb24gPSBhcHBseVRleHROb2RlTWVyZ2luZ0ZpeChcbiAgICBkb2MsXG4gICAgYXBwbGllZFRyZWVDb250cnVjdGlvblxuICApIGFzIHR5cGVvZiBUcmVlQ29uc3RydWN0aW9uO1xuICBhcHBsaWVkVHJlZUNvbnRydWN0aW9uID0gYXBwbHlTVkdJbm5lckhUTUxGaXgoXG4gICAgZG9jLFxuICAgIGFwcGxpZWRUcmVlQ29udHJ1Y3Rpb24sXG4gICAgTmFtZXNwYWNlLlNWR1xuICApIGFzIHR5cGVvZiBUcmVlQ29uc3RydWN0aW9uO1xuXG4gIGV4cG9ydCBjb25zdCBET01UcmVlQ29uc3RydWN0aW9uID0gYXBwbGllZFRyZWVDb250cnVjdGlvbjtcbiAgZXhwb3J0IHR5cGUgRE9NVHJlZUNvbnN0cnVjdGlvbiA9IFRyZWVDb25zdHJ1Y3Rpb247XG59XG5cbmV4cG9ydCBjbGFzcyBET01DaGFuZ2VzSW1wbCBleHRlbmRzIERPTU9wZXJhdGlvbnMgaW1wbGVtZW50cyBHbGltbWVyVHJlZUNoYW5nZXMge1xuICBwcm90ZWN0ZWQgbmFtZXNwYWNlOiBPcHRpb248c3RyaW5nPjtcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZG9jdW1lbnQ6IFNpbXBsZURvY3VtZW50KSB7XG4gICAgc3VwZXIoZG9jdW1lbnQpO1xuICAgIHRoaXMubmFtZXNwYWNlID0gbnVsbDtcbiAgfVxuXG4gIHNldEF0dHJpYnV0ZShlbGVtZW50OiBTaW1wbGVFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH1cblxuICByZW1vdmVBdHRyaWJ1dGUoZWxlbWVudDogU2ltcGxlRWxlbWVudCwgbmFtZTogc3RyaW5nKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH1cblxuICBpbnNlcnRBZnRlcihlbGVtZW50OiBTaW1wbGVFbGVtZW50LCBub2RlOiBTaW1wbGVOb2RlLCByZWZlcmVuY2U6IFNpbXBsZU5vZGUpIHtcbiAgICB0aGlzLmluc2VydEJlZm9yZShlbGVtZW50LCBub2RlLCByZWZlcmVuY2UubmV4dFNpYmxpbmcpO1xuICB9XG59XG5cbmxldCBoZWxwZXIgPSBET01DaGFuZ2VzSW1wbDtcblxuaGVscGVyID0gYXBwbHlUZXh0Tm9kZU1lcmdpbmdGaXgoZG9jLCBoZWxwZXIpIGFzIHR5cGVvZiBET01DaGFuZ2VzSW1wbDtcbmhlbHBlciA9IGFwcGx5U1ZHSW5uZXJIVE1MRml4KGRvYywgaGVscGVyLCBOYW1lc3BhY2UuU1ZHKSBhcyB0eXBlb2YgRE9NQ2hhbmdlc0ltcGw7XG5cbmV4cG9ydCBkZWZhdWx0IGhlbHBlcjtcbmV4cG9ydCBjb25zdCBET01UcmVlQ29uc3RydWN0aW9uID0gRE9NLkRPTVRyZWVDb25zdHJ1Y3Rpb247XG5leHBvcnQgdHlwZSBET01UcmVlQ29uc3RydWN0aW9uID0gRE9NLkRPTVRyZWVDb25zdHJ1Y3Rpb247XG5leHBvcnQgdHlwZSBET01OYW1lc3BhY2UgPSBOYW1lc3BhY2U7XG4iXSwic291cmNlUm9vdCI6IiJ9