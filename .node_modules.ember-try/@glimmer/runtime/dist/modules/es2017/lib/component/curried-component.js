var _a;
const CURRIED_COMPONENT_DEFINITION_BRAND = 'CURRIED COMPONENT DEFINITION [id=6f00feb9-a0ef-4547-99ea-ac328f80acea]';
export function isCurriedComponentDefinition(definition) {
    return !!(definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND]);
}
export function isComponentDefinition(definition) {
    return !!(definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND]);
}
export class CurriedComponentDefinition {
    /** @internal */
    constructor(inner, args) {
        this.inner = inner;
        this.args = args;
        this[_a] = true;
    }
    unwrap(args) {
        args.realloc(this.offset);
        let definition = this;
        while (true) {
            let { args: curriedArgs, inner } = definition;
            if (curriedArgs) {
                args.positional.prepend(curriedArgs.positional);
                args.named.merge(curriedArgs.named);
            }
            if (!isCurriedComponentDefinition(inner)) {
                return inner;
            }
            definition = inner;
        }
    }
    /** @internal */
    get offset() {
        let { inner, args } = this;
        let length = args ? args.positional.length : 0;
        return isCurriedComponentDefinition(inner) ? length + inner.offset : length;
    }
}
_a = CURRIED_COMPONENT_DEFINITION_BRAND;
export function curry(spec, args = null) {
    return new CurriedComponentDefinition(spec, args);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBvbmVudC9jdXJyaWVkLWNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsTUFBTSxxQ0FDSix3RUFERjtBQUdBLE9BQU0sU0FBVSw0QkFBVixDQUNKLFVBREksRUFDZTtBQUVuQixXQUFPLENBQUMsRUFBRSxjQUFlLFdBQW9CLGtDQUFwQixDQUFqQixDQUFSO0FBQ0Q7QUFFRCxPQUFNLFNBQVUscUJBQVYsQ0FDSixVQURJLEVBQ21CO0FBRXZCLFdBQU8sQ0FBQyxFQUFFLGNBQWMsV0FBVyxrQ0FBWCxDQUFoQixDQUFSO0FBQ0Q7QUFFRCxPQUFNLE1BQU8sMEJBQVAsQ0FBaUM7QUFHckM7QUFDQSxnQkFDWSxLQURaLEVBRVksSUFGWixFQUUyQztBQUQvQixhQUFBLEtBQUEsR0FBQSxLQUFBO0FBQ0EsYUFBQSxJQUFBLEdBQUEsSUFBQTtBQUxILGFBQUEsRUFBQSxJQUF1QyxJQUF2QztBQU1MO0FBRUosV0FBTyxJQUFQLEVBQTRCO0FBQzFCLGFBQUssT0FBTCxDQUFhLEtBQUssTUFBbEI7QUFFQSxZQUFJLGFBQXlDLElBQTdDO0FBRUEsZUFBTyxJQUFQLEVBQWE7QUFDWCxnQkFBSSxFQUFFLE1BQU0sV0FBUixFQUFxQixLQUFyQixLQUErQixVQUFuQztBQUVBLGdCQUFJLFdBQUosRUFBaUI7QUFDZixxQkFBSyxVQUFMLENBQWdCLE9BQWhCLENBQXdCLFlBQVksVUFBcEM7QUFDQSxxQkFBSyxLQUFMLENBQVcsS0FBWCxDQUFpQixZQUFZLEtBQTdCO0FBQ0Q7QUFFRCxnQkFBSSxDQUFDLDZCQUE2QixLQUE3QixDQUFMLEVBQTBDO0FBQ3hDLHVCQUFPLEtBQVA7QUFDRDtBQUVELHlCQUFhLEtBQWI7QUFDRDtBQUNGO0FBRUQ7QUFDQSxRQUFJLE1BQUosR0FBVTtBQUNSLFlBQUksRUFBRSxLQUFGLEVBQVMsSUFBVCxLQUFrQixJQUF0QjtBQUNBLFlBQUksU0FBUyxPQUFPLEtBQUssVUFBTCxDQUFnQixNQUF2QixHQUFnQyxDQUE3QztBQUNBLGVBQU8sNkJBQTZCLEtBQTdCLElBQXNDLFNBQVMsTUFBTSxNQUFyRCxHQUE4RCxNQUFyRTtBQUNEO0FBbkNvQztLQUMzQixrQztBQXFDWixPQUFNLFNBQVUsS0FBVixDQUNKLElBREksRUFFSixPQUFrQyxJQUY5QixFQUVrQztBQUV0QyxXQUFPLElBQUksMEJBQUosQ0FBK0IsSUFBL0IsRUFBNEQsSUFBNUQsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FwdHVyZWRBcmd1bWVudHMsIENvbXBvbmVudERlZmluaXRpb24sIERpY3QsIE1heWJlIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFZNQXJndW1lbnRzSW1wbCB9IGZyb20gJy4uL3ZtL2FyZ3VtZW50cyc7XG5cbmNvbnN0IENVUlJJRURfQ09NUE9ORU5UX0RFRklOSVRJT05fQlJBTkQgPVxuICAnQ1VSUklFRCBDT01QT05FTlQgREVGSU5JVElPTiBbaWQ9NmYwMGZlYjktYTBlZi00NTQ3LTk5ZWEtYWMzMjhmODBhY2VhXSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0N1cnJpZWRDb21wb25lbnREZWZpbml0aW9uKFxuICBkZWZpbml0aW9uOiB1bmtub3duXG4pOiBkZWZpbml0aW9uIGlzIEN1cnJpZWRDb21wb25lbnREZWZpbml0aW9uIHtcbiAgcmV0dXJuICEhKGRlZmluaXRpb24gJiYgKGRlZmluaXRpb24gYXMgRGljdClbQ1VSUklFRF9DT01QT05FTlRfREVGSU5JVElPTl9CUkFORF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb25lbnREZWZpbml0aW9uKFxuICBkZWZpbml0aW9uOiBNYXliZTxEaWN0PlxuKTogZGVmaW5pdGlvbiBpcyBDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbiB7XG4gIHJldHVybiAhIShkZWZpbml0aW9uICYmIGRlZmluaXRpb25bQ1VSUklFRF9DT01QT05FTlRfREVGSU5JVElPTl9CUkFORF0pO1xufVxuXG5leHBvcnQgY2xhc3MgQ3VycmllZENvbXBvbmVudERlZmluaXRpb24ge1xuICByZWFkb25seSBbQ1VSUklFRF9DT01QT05FTlRfREVGSU5JVElPTl9CUkFORF0gPSB0cnVlO1xuXG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGlubmVyOiBDb21wb25lbnREZWZpbml0aW9uIHwgQ3VycmllZENvbXBvbmVudERlZmluaXRpb24sXG4gICAgcHJvdGVjdGVkIGFyZ3M6IE9wdGlvbjxDYXB0dXJlZEFyZ3VtZW50cz5cbiAgKSB7fVxuXG4gIHVud3JhcChhcmdzOiBWTUFyZ3VtZW50c0ltcGwpOiBDb21wb25lbnREZWZpbml0aW9uIHtcbiAgICBhcmdzLnJlYWxsb2ModGhpcy5vZmZzZXQpO1xuXG4gICAgbGV0IGRlZmluaXRpb246IEN1cnJpZWRDb21wb25lbnREZWZpbml0aW9uID0gdGhpcztcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgeyBhcmdzOiBjdXJyaWVkQXJncywgaW5uZXIgfSA9IGRlZmluaXRpb247XG5cbiAgICAgIGlmIChjdXJyaWVkQXJncykge1xuICAgICAgICBhcmdzLnBvc2l0aW9uYWwucHJlcGVuZChjdXJyaWVkQXJncy5wb3NpdGlvbmFsKTtcbiAgICAgICAgYXJncy5uYW1lZC5tZXJnZShjdXJyaWVkQXJncy5uYW1lZCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbihpbm5lcikpIHtcbiAgICAgICAgcmV0dXJuIGlubmVyO1xuICAgICAgfVxuXG4gICAgICBkZWZpbml0aW9uID0gaW5uZXI7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBnZXQgb2Zmc2V0KCk6IG51bWJlciB7XG4gICAgbGV0IHsgaW5uZXIsIGFyZ3MgfSA9IHRoaXM7XG4gICAgbGV0IGxlbmd0aCA9IGFyZ3MgPyBhcmdzLnBvc2l0aW9uYWwubGVuZ3RoIDogMDtcbiAgICByZXR1cm4gaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbihpbm5lcikgPyBsZW5ndGggKyBpbm5lci5vZmZzZXQgOiBsZW5ndGg7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1cnJ5KFxuICBzcGVjOiBDb21wb25lbnREZWZpbml0aW9uLFxuICBhcmdzOiBPcHRpb248Q2FwdHVyZWRBcmd1bWVudHM+ID0gbnVsbFxuKTogQ3VycmllZENvbXBvbmVudERlZmluaXRpb24ge1xuICByZXR1cm4gbmV3IEN1cnJpZWRDb21wb25lbnREZWZpbml0aW9uKHNwZWMgYXMgQ29tcG9uZW50RGVmaW5pdGlvbiwgYXJncyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9