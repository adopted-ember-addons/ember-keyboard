var _a, _b;

import { combineSlice } from '@glimmer/reference';
import { associateDestructor, destructor, isDrop, LinkedList, ListSlice, Stack, assert } from '@glimmer/util';
import { $fp, $pc, $s0, $s1, $sp, $t0, $t1, $v0, isLowLevelRegister } from '@glimmer/vm';
import { DidModifyOpcode, JumpIfNotModifiedOpcode, LabelOpcode } from '../compiled/opcodes/vm';
import { ScopeImpl } from '../environment';
import { APPEND_OPCODES } from '../opcodes';
import { UNDEFINED_REFERENCE } from '../references';
import { ARGS, CONSTANTS, DESTRUCTOR_STACK, HEAP, INNER_VM, REGISTERS, STACKS } from '../symbols';
import { VMArgumentsImpl } from './arguments';
import LowLevelVM from './low-level';
import RenderResultImpl from './render-result';
import EvaluationStackImpl from './stack';
import { ListBlockOpcode, ResumableVMStateImpl, TryOpcode } from './update';

class Stacks {
    constructor() {
        this.scope = new Stack();
        this.dynamicScope = new Stack();
        this.updating = new Stack();
        this.cache = new Stack();
        this.list = new Stack();
    }
}
export default class VM {
    /**
     * End of migrated.
     */
    constructor(runtime, { pc, scope, dynamicScope, stack }, elementStack) {
        this.runtime = runtime;
        this.elementStack = elementStack;
        this[_a] = new Stacks();
        this[_b] = new Stack();
        this.s0 = null;
        this.s1 = null;
        this.t0 = null;
        this.t1 = null;
        this.v0 = null;
        let evalStack = EvaluationStackImpl.restore(stack);
        (false && assert(typeof pc === 'number', 'pc is a number'));

        evalStack[REGISTERS][$pc] = pc;
        evalStack[REGISTERS][$sp] = stack.length - 1;
        evalStack[REGISTERS][$fp] = -1;
        this[HEAP] = this.program.heap;
        this[CONSTANTS] = this.program.constants;
        this.elementStack = elementStack;
        this[STACKS].scope.push(scope);
        this[STACKS].dynamicScope.push(dynamicScope);
        this[ARGS] = new VMArgumentsImpl();
        this[INNER_VM] = new LowLevelVM(evalStack, this[HEAP], runtime.program, {
            debugBefore: opcode => {
                return APPEND_OPCODES.debugBefore(this, opcode);
            },
            debugAfter: state => {
                APPEND_OPCODES.debugAfter(this, state);
            }
        }, evalStack[REGISTERS]);
        this.destructor = {};
        this[DESTRUCTOR_STACK].push(this.destructor);
    }
    get stack() {
        return this[INNER_VM].stack;
    }
    currentBlock() {
        return this.elements().block();
    }
    /* Registers */
    get pc() {
        return this[INNER_VM].fetchRegister($pc);
    }
    // Fetch a value from a register onto the stack
    fetch(register) {
        this.stack.push(this.fetchValue(register));
    }
    // Load a value from the stack into a register
    load(register) {
        let value = this.stack.pop();
        this.loadValue(register, value);
    }
    fetchValue(register) {
        if (isLowLevelRegister(register)) {
            return this[INNER_VM].fetchRegister(register);
        }
        switch (register) {
            case $s0:
                return this.s0;
            case $s1:
                return this.s1;
            case $t0:
                return this.t0;
            case $t1:
                return this.t1;
            case $v0:
                return this.v0;
        }
    }
    // Load a value into a register
    loadValue(register, value) {
        if (isLowLevelRegister(register)) {
            this[INNER_VM].loadRegister(register, value);
        }
        switch (register) {
            case $s0:
                this.s0 = value;
                break;
            case $s1:
                this.s1 = value;
                break;
            case $t0:
                this.t0 = value;
                break;
            case $t1:
                this.t1 = value;
                break;
            case $v0:
                this.v0 = value;
                break;
        }
    }
    /**
     * Migrated to Inner
     */
    // Start a new frame and save $ra and $fp on the stack
    pushFrame() {
        this[INNER_VM].pushFrame();
    }
    // Restore $ra, $sp and $fp
    popFrame() {
        this[INNER_VM].popFrame();
    }
    // Jump to an address in `program`
    goto(offset) {
        this[INNER_VM].goto(offset);
    }
    // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
    call(handle) {
        this[INNER_VM].call(handle);
    }
    // Put a specific `program` address in $ra
    returnTo(offset) {
        this[INNER_VM].returnTo(offset);
    }
    // Return to the `program` address stored in $ra
    return() {
        this[INNER_VM].return();
    }
    get program() {
        return this.runtime.program;
    }
    get env() {
        return this.runtime.env;
    }
    captureState(args, pc = this[INNER_VM].fetchRegister($pc)) {
        return {
            pc,
            dynamicScope: this.dynamicScope(),
            scope: this.scope(),
            stack: this.stack.capture(args)
        };
    }
    beginCacheGroup() {
        this[STACKS].cache.push(this.updating().tail());
    }
    commitCacheGroup() {
        let END = new LabelOpcode('END');
        let opcodes = this.updating();
        let marker = this[STACKS].cache.pop();
        let head = marker ? opcodes.nextNode(marker) : opcodes.head();
        let tail = opcodes.tail();
        let tag = combineSlice(new ListSlice(head, tail));
        let guard = new JumpIfNotModifiedOpcode(tag, END);
        opcodes.insertBefore(guard, head);
        opcodes.append(new DidModifyOpcode(guard));
        opcodes.append(END);
    }
    enter(args) {
        let updating = new LinkedList();
        let state = this.capture(args);
        let block = this.elements().pushUpdatableBlock();
        let tryOpcode = new TryOpcode(state, this.runtime, block, updating);
        this.didEnter(tryOpcode);
    }
    iterate(memo, value) {
        let stack = this.stack;
        stack.push(value);
        stack.push(memo);
        let state = this.capture(2);
        let block = this.elements().pushUpdatableBlock();
        // let ip = this.ip;
        // this.ip = end + 4;
        // this.frames.push(ip);
        return new TryOpcode(state, this.runtime, block, new LinkedList());
    }
    enterItem(key, opcode) {
        this.listBlock().map.set(key, opcode);
        this.didEnter(opcode);
    }
    enterList(offset) {
        let updating = new LinkedList();
        let addr = this[INNER_VM].target(offset);
        let state = this.capture(0, addr);
        let list = this.elements().pushBlockList(updating);
        let artifacts = this.stack.peek().artifacts;
        let opcode = new ListBlockOpcode(state, this.runtime, list, updating, artifacts);
        this[STACKS].list.push(opcode);
        this.didEnter(opcode);
    }
    didEnter(opcode) {
        this.associateDestructor(destructor(opcode));
        this[DESTRUCTOR_STACK].push(opcode);
        this.updateWith(opcode);
        this.pushUpdating(opcode.children);
    }
    exit() {
        this[DESTRUCTOR_STACK].pop();
        this.elements().popBlock();
        this.popUpdating();
        let parent = this.updating().tail();
        parent.didInitializeChildren();
    }
    exitList() {
        this.exit();
        this[STACKS].list.pop();
    }
    pushUpdating(list = new LinkedList()) {
        this[STACKS].updating.push(list);
    }
    popUpdating() {
        return this[STACKS].updating.pop();
    }
    updateWith(opcode) {
        this.updating().append(opcode);
    }
    listBlock() {
        return this[STACKS].list.current;
    }
    associateDestructor(child) {
        if (!isDrop(child)) return;
        let parent = this[DESTRUCTOR_STACK].current;
        associateDestructor(parent, child);
    }
    associateDestroyable(child) {
        this.associateDestructor(destructor(child));
    }
    tryUpdating() {
        return this[STACKS].updating.current;
    }
    updating() {
        return this[STACKS].updating.current;
    }
    elements() {
        return this.elementStack;
    }
    scope() {
        return this[STACKS].scope.current;
    }
    dynamicScope() {
        return this[STACKS].dynamicScope.current;
    }
    pushChildScope() {
        this[STACKS].scope.push(this.scope().child());
    }
    pushDynamicScope() {
        let child = this.dynamicScope().child();
        this[STACKS].dynamicScope.push(child);
        return child;
    }
    pushRootScope(size) {
        let scope = ScopeImpl.sized(size);
        this[STACKS].scope.push(scope);
        return scope;
    }
    pushScope(scope) {
        this[STACKS].scope.push(scope);
    }
    popScope() {
        this[STACKS].scope.pop();
    }
    popDynamicScope() {
        this[STACKS].dynamicScope.pop();
    }
    /// SCOPE HELPERS
    getSelf() {
        return this.scope().getSelf();
    }
    referenceForSymbol(symbol) {
        return this.scope().getSymbol(symbol);
    }
    /// EXECUTION
    execute(initialize) {
        if (false) {
            console.log(`EXECUTING FROM ${this[INNER_VM].fetchRegister($pc)}`);
        }
        if (initialize) initialize(this);
        let result;
        while (true) {
            result = this.next();
            if (result.done) break;
        }
        return result.value;
    }
    next() {
        let { env, elementStack } = this;
        let opcode = this[INNER_VM].nextStatement();
        let result;
        if (opcode !== null) {
            this[INNER_VM].evaluateOuter(opcode, this);
            result = { done: false, value: null };
        } else {
            // Unload the stack
            this.stack.reset();
            result = {
                done: true,
                value: new RenderResultImpl(env, this.popUpdating(), elementStack.popBlock(), this.destructor)
            };
        }
        return result;
    }
    bindDynamicScope(names) {
        let scope = this.dynamicScope();
        for (let i = names.length - 1; i >= 0; i--) {
            let name = this[CONSTANTS].getString(names[i]);
            scope.set(name, this.stack.pop());
        }
    }
}
_a = STACKS, _b = DESTRUCTOR_STACK;
function vmState(pc, scope = ScopeImpl.root(UNDEFINED_REFERENCE, 0), dynamicScope) {
    return {
        pc,
        scope,
        dynamicScope,
        stack: []
    };
}
export class AotVM extends VM {
    static empty(runtime, { handle, treeBuilder, dynamicScope }) {
        let vm = initAOT(runtime, vmState(runtime.program.heap.getaddr(handle), ScopeImpl.root(UNDEFINED_REFERENCE, 0), dynamicScope), treeBuilder);
        vm.pushUpdating();
        return vm;
    }
    static initial(runtime, { handle, self, treeBuilder, dynamicScope }) {
        let scopeSize = runtime.program.heap.scopesizeof(handle);
        let scope = ScopeImpl.root(self, scopeSize);
        let pc = runtime.program.heap.getaddr(handle);
        let state = vmState(pc, scope, dynamicScope);
        let vm = initAOT(runtime, state, treeBuilder);
        vm.pushUpdating();
        return vm;
    }
    capture(args, pc = this[INNER_VM].fetchRegister($pc)) {
        return new ResumableVMStateImpl(this.captureState(args, pc), initAOT);
    }
}
function initAOT(runtime, state, builder) {
    return new AotVM(runtime, state, builder);
}
function initJIT(context) {
    return (runtime, state, builder) => new JitVM(runtime, state, builder, context);
}
export class JitVM extends VM {
    constructor(runtime, state, elementStack, context) {
        super(runtime, state, elementStack);
        this.context = context;
        this.resume = initJIT(this.context);
    }
    static initial(runtime, context, { handle, self, dynamicScope, treeBuilder }) {
        let scopeSize = runtime.program.heap.scopesizeof(handle);
        let scope = ScopeImpl.root(self, scopeSize);
        let state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);
        let vm = initJIT(context)(runtime, state, treeBuilder);
        vm.pushUpdating();
        return vm;
    }
    static empty(runtime, { handle, treeBuilder, dynamicScope }, context) {
        let vm = initJIT(context)(runtime, vmState(runtime.program.heap.getaddr(handle), ScopeImpl.root(UNDEFINED_REFERENCE, 0), dynamicScope), treeBuilder);
        vm.pushUpdating();
        return vm;
    }
    capture(args, pc = this[INNER_VM].fetchRegister($pc)) {
        return new ResumableVMStateImpl(this.captureState(args, pc), this.resume);
    }
    compile(block) {
        return block.compile(this.context);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,