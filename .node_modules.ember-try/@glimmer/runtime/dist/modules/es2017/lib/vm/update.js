import {
// Tags
combine, value, update, validate, createUpdatableTag, combineSlice, INITIAL, IteratorSynchronizer, END } from '@glimmer/reference';
import { associate, LinkedList, Stack } from '@glimmer/util';
import { move as moveBounds } from '../bounds';
import { asyncReset, detach } from '../lifetime';
import { UpdatingOpcode } from '../opcodes';
import { NewElementBuilder } from './element-builder';
export default class UpdatingVM {
    constructor(env, { alwaysRevalidate = false }) {
        this.frameStack = new Stack();
        this.env = env;
        this.dom = env.getDOM();
        this.alwaysRevalidate = alwaysRevalidate;
    }
    execute(opcodes, handler) {
        let { frameStack } = this;
        this.try(opcodes, handler);
        while (true) {
            if (frameStack.isEmpty()) break;
            let opcode = this.frame.nextStatement();
            if (opcode === null) {
                frameStack.pop();
                continue;
            }
            opcode.evaluate(this);
        }
    }
    get frame() {
        return this.frameStack.current;
    }
    goto(op) {
        this.frame.goto(op);
    }
    try(ops, handler) {
        this.frameStack.push(new UpdatingVMFrame(ops, handler));
    }
    throw() {
        this.frame.handleException();
        this.frameStack.pop();
    }
}
export class ResumableVMStateImpl {
    constructor(state, resumeCallback) {
        this.state = state;
        this.resumeCallback = resumeCallback;
    }
    resume(runtime, builder) {
        return this.resumeCallback(runtime, this.state, builder);
    }
}
export class BlockOpcode extends UpdatingOpcode {
    constructor(state, runtime, bounds, children) {
        super();
        this.state = state;
        this.runtime = runtime;
        this.type = 'block';
        this.next = null;
        this.prev = null;
        this.children = children;
        this.bounds = bounds;
    }
    parentElement() {
        return this.bounds.parentElement();
    }
    firstNode() {
        return this.bounds.firstNode();
    }
    lastNode() {
        return this.bounds.lastNode();
    }
    evaluate(vm) {
        vm.try(this.children, null);
    }
}
export class TryOpcode extends BlockOpcode {
    constructor(state, runtime, bounds, children) {
        super(state, runtime, bounds, children);
        this.type = 'try';
        this.tag = this._tag = createUpdatableTag();
    }
    didInitializeChildren() {
        update(this._tag, combineSlice(this.children));
    }
    evaluate(vm) {
        vm.try(this.children, this);
    }
    handleException() {
        let { state, bounds, children, prev, next, runtime } = this;
        children.clear();
        asyncReset(this, runtime.env);
        let elementStack = NewElementBuilder.resume(runtime.env, bounds);
        let vm = state.resume(runtime, elementStack);
        let updating = new LinkedList();
        let result = vm.execute(vm => {
            vm.pushUpdating(updating);
            vm.updateWith(this);
            vm.pushUpdating(children);
        });
        associate(this, result.drop);
        this.prev = prev;
        this.next = next;
    }
}
class ListRevalidationDelegate {
    constructor(opcode, marker) {
        this.opcode = opcode;
        this.marker = marker;
        this.didInsert = false;
        this.didDelete = false;
        this.map = opcode.map;
        this.updating = opcode['children'];
    }
    insert(_env, key, item, memo, before) {
        let { map, opcode, updating } = this;
        let nextSibling = null;
        let reference = null;
        if (typeof before === 'string') {
            reference = map.get(before);
            nextSibling = reference['bounds'].firstNode();
        } else {
            nextSibling = this.marker;
        }
        let vm = opcode.vmForInsertion(nextSibling);
        let tryOpcode = null;
        vm.execute(vm => {
            tryOpcode = vm.iterate(memo, item);
            map.set(key, tryOpcode);
            vm.pushUpdating(new LinkedList());
            vm.updateWith(tryOpcode);
            vm.pushUpdating(tryOpcode.children);
        });
        updating.insertBefore(tryOpcode, reference);
        this.didInsert = true;
    }
    retain(_env, _key, _item, _memo) {}
    move(_env, key, _item, _memo, before) {
        let { map, updating } = this;
        let entry = map.get(key);
        if (before === END) {
            moveBounds(entry, this.marker);
            updating.remove(entry);
            updating.append(entry);
        } else {
            let reference = map.get(before);
            moveBounds(entry, reference.firstNode());
            updating.remove(entry);
            updating.insertBefore(entry, reference);
        }
    }
    delete(env, key) {
        let { map, updating } = this;
        let opcode = map.get(key);
        detach(opcode, env);
        updating.remove(opcode);
        map.delete(key);
        this.didDelete = true;
    }
    done() {
        this.opcode.didInitializeChildren(this.didInsert || this.didDelete);
    }
}
export class ListBlockOpcode extends BlockOpcode {
    constructor(state, runtime, bounds, children, artifacts) {
        super(state, runtime, bounds, children);
        this.type = 'list-block';
        this.map = new Map();
        this.lastIterated = INITIAL;
        this.artifacts = artifacts;
        let _tag = this._tag = createUpdatableTag();
        this.tag = combine([artifacts.tag, _tag]);
    }
    didInitializeChildren(listDidChange = true) {
        this.lastIterated = value(this.artifacts.tag);
        if (listDidChange) {
            update(this._tag, combineSlice(this.children));
        }
    }
    evaluate(vm) {
        let { artifacts, lastIterated } = this;
        if (!validate(artifacts.tag, lastIterated)) {
            let { bounds } = this;
            let { dom } = vm;
            let marker = dom.createComment('');
            dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());
            let target = new ListRevalidationDelegate(this, marker);
            let synchronizer = new IteratorSynchronizer({ target, artifacts, env: vm.env });
            synchronizer.sync();
            this.parentElement().removeChild(marker);
        }
        // Run now-updated updating opcodes
        super.evaluate(vm);
    }
    vmForInsertion(nextSibling) {
        let { bounds, state, runtime } = this;
        let elementStack = NewElementBuilder.forInitialRender(runtime.env, {
            element: bounds.parentElement(),
            nextSibling
        });
        return state.resume(runtime, elementStack);
    }
}
class UpdatingVMFrame {
    constructor(ops, exceptionHandler) {
        this.ops = ops;
        this.exceptionHandler = exceptionHandler;
        this.current = ops.head();
    }
    goto(op) {
        this.current = op;
    }
    nextStatement() {
        let { current, ops } = this;
        if (current) this.current = ops.nextNode(current);
        return current;
    }
    handleException() {
        if (this.exceptionHandler) {
            this.exceptionHandler.handleException();
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,