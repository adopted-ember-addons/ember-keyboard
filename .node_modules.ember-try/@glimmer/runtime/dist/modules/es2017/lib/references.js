import { ConstReference } from '@glimmer/reference';
export class PrimitiveReference extends ConstReference {
    constructor(value) {
        super(value);
    }
    static create(value) {
        if (value === undefined) {
            return UNDEFINED_REFERENCE;
        } else if (value === null) {
            return NULL_REFERENCE;
        } else if (value === true) {
            return TRUE_REFERENCE;
        } else if (value === false) {
            return FALSE_REFERENCE;
        } else if (typeof value === 'number') {
            return new ValueReference(value);
        } else {
            return new StringReference(value);
        }
    }
    get(_key) {
        return UNDEFINED_REFERENCE;
    }
}
class StringReference extends PrimitiveReference {
    constructor() {
        super(...arguments);
        this.lengthReference = null;
    }
    get(key) {
        if (key === 'length') {
            let { lengthReference } = this;
            if (lengthReference === null) {
                lengthReference = this.lengthReference = new ValueReference(this.inner.length);
            }
            return lengthReference;
        } else {
            return super.get(key);
        }
    }
}
class ValueReference extends PrimitiveReference {
    constructor(value) {
        super(value);
    }
}
export const UNDEFINED_REFERENCE = new ValueReference(undefined);
export const NULL_REFERENCE = new ValueReference(null);
export const TRUE_REFERENCE = new ValueReference(true);
export const FALSE_REFERENCE = new ValueReference(false);
export class ConditionalReference {
    constructor(inner, toBool = defaultToBool) {
        this.inner = inner;
        this.toBool = toBool;
        this.tag = inner.tag;
    }
    value() {
        return this.toBool(this.inner.value());
    }
}
function defaultToBool(value) {
    return !!value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3JlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBUyxjQUFULFFBQThELG9CQUE5RDtBQUlBLE9BQU0sTUFBTyxrQkFBUCxTQUF1RCxjQUF2RCxDQUF3RTtBQWtCNUUsZ0JBQXNCLEtBQXRCLEVBQThCO0FBQzVCLGNBQU0sS0FBTjtBQUNEO0FBbEJELFdBQU8sTUFBUCxDQUFtQyxLQUFuQyxFQUEyQztBQUN6QyxZQUFJLFVBQVUsU0FBZCxFQUF5QjtBQUN2QixtQkFBTyxtQkFBUDtBQUNELFNBRkQsTUFFTyxJQUFJLFVBQVUsSUFBZCxFQUFvQjtBQUN6QixtQkFBTyxjQUFQO0FBQ0QsU0FGTSxNQUVBLElBQUksVUFBVSxJQUFkLEVBQW9CO0FBQ3pCLG1CQUFPLGNBQVA7QUFDRCxTQUZNLE1BRUEsSUFBSSxVQUFVLEtBQWQsRUFBcUI7QUFDMUIsbUJBQU8sZUFBUDtBQUNELFNBRk0sTUFFQSxJQUFJLE9BQU8sS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUNwQyxtQkFBTyxJQUFJLGNBQUosQ0FBbUIsS0FBbkIsQ0FBUDtBQUNELFNBRk0sTUFFQTtBQUNMLG1CQUFPLElBQUksZUFBSixDQUFvQixLQUFwQixDQUFQO0FBQ0Q7QUFDRjtBQU1ELFFBQUksSUFBSixFQUFnQjtBQUNkLGVBQU8sbUJBQVA7QUFDRDtBQXhCMkU7QUEyQjlFLE1BQU0sZUFBTixTQUE4QixrQkFBOUIsQ0FBd0Q7QUFBeEQsa0JBQUE7O0FBQ1UsYUFBQSxlQUFBLEdBQXNELElBQXREO0FBZVQ7QUFiQyxRQUFJLEdBQUosRUFBZTtBQUNiLFlBQUksUUFBUSxRQUFaLEVBQXNCO0FBQ3BCLGdCQUFJLEVBQUUsZUFBRixLQUFzQixJQUExQjtBQUVBLGdCQUFJLG9CQUFvQixJQUF4QixFQUE4QjtBQUM1QixrQ0FBa0IsS0FBSyxlQUFMLEdBQXVCLElBQUksY0FBSixDQUFtQixLQUFLLEtBQUwsQ0FBVyxNQUE5QixDQUF6QztBQUNEO0FBRUQsbUJBQU8sZUFBUDtBQUNELFNBUkQsTUFRTztBQUNMLG1CQUFPLE1BQU0sR0FBTixDQUFVLEdBQVYsQ0FBUDtBQUNEO0FBQ0Y7QUFmcUQ7QUFvQnhELE1BQU0sY0FBTixTQUE4QyxrQkFBOUMsQ0FBbUU7QUFDakUsZ0JBQVksS0FBWixFQUFvQjtBQUNsQixjQUFNLEtBQU47QUFDRDtBQUhnRTtBQU1uRSxPQUFPLE1BQU0sc0JBQXFELElBQUksY0FBSixDQUFtQixTQUFuQixDQUEzRDtBQUNQLE9BQU8sTUFBTSxpQkFBMkMsSUFBSSxjQUFKLENBQW1CLElBQW5CLENBQWpEO0FBQ1AsT0FBTyxNQUFNLGlCQUE4QyxJQUFJLGNBQUosQ0FBbUIsSUFBbkIsQ0FBcEQ7QUFDUCxPQUFPLE1BQU0sa0JBQStDLElBQUksY0FBSixDQUFtQixLQUFuQixDQUFyRDtBQUVQLE9BQU0sTUFBTyxvQkFBUCxDQUEyQjtBQUcvQixnQkFDVSxLQURWLEVBRVUsU0FBc0MsYUFGaEQsRUFFNkQ7QUFEbkQsYUFBQSxLQUFBLEdBQUEsS0FBQTtBQUNBLGFBQUEsTUFBQSxHQUFBLE1BQUE7QUFFUixhQUFLLEdBQUwsR0FBVyxNQUFNLEdBQWpCO0FBQ0Q7QUFFRCxZQUFLO0FBQ0gsZUFBTyxLQUFLLE1BQUwsQ0FBWSxLQUFLLEtBQUwsQ0FBVyxLQUFYLEVBQVosQ0FBUDtBQUNEO0FBWjhCO0FBZWpDLFNBQVMsYUFBVCxDQUF1QixLQUF2QixFQUFxQztBQUNuQyxXQUFPLENBQUMsQ0FBQyxLQUFUO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb24sIFJlY2FzdCB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgQ29uc3RSZWZlcmVuY2UsIFBhdGhSZWZlcmVuY2UsIFJlZmVyZW5jZSwgVGFnIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcblxuZXhwb3J0IHR5cGUgUHJpbWl0aXZlID0gdW5kZWZpbmVkIHwgbnVsbCB8IGJvb2xlYW4gfCBudW1iZXIgfCBzdHJpbmc7XG5cbmV4cG9ydCBjbGFzcyBQcmltaXRpdmVSZWZlcmVuY2U8VCBleHRlbmRzIFByaW1pdGl2ZT4gZXh0ZW5kcyBDb25zdFJlZmVyZW5jZTxUPlxuICBpbXBsZW1lbnRzIFBhdGhSZWZlcmVuY2U8VD4ge1xuICBzdGF0aWMgY3JlYXRlPFQgZXh0ZW5kcyBQcmltaXRpdmU+KHZhbHVlOiBUKTogUHJpbWl0aXZlUmVmZXJlbmNlPFQ+IHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIFVOREVGSU5FRF9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBOVUxMX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIFRSVUVfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIEZBTFNFX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbmV3IFZhbHVlUmVmZXJlbmNlKHZhbHVlKSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgU3RyaW5nUmVmZXJlbmNlKHZhbHVlIGFzIHN0cmluZykgYXMgUmVjYXN0PFN0cmluZ1JlZmVyZW5jZSwgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+PjtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodmFsdWU6IFQpIHtcbiAgICBzdXBlcih2YWx1ZSk7XG4gIH1cblxuICBnZXQoX2tleTogc3RyaW5nKTogUHJpbWl0aXZlUmVmZXJlbmNlPFByaW1pdGl2ZT4ge1xuICAgIHJldHVybiBVTkRFRklORURfUkVGRVJFTkNFO1xuICB9XG59XG5cbmNsYXNzIFN0cmluZ1JlZmVyZW5jZSBleHRlbmRzIFByaW1pdGl2ZVJlZmVyZW5jZTxzdHJpbmc+IHtcbiAgcHJpdmF0ZSBsZW5ndGhSZWZlcmVuY2U6IE9wdGlvbjxQcmltaXRpdmVSZWZlcmVuY2U8bnVtYmVyPj4gPSBudWxsO1xuXG4gIGdldChrZXk6IHN0cmluZyk6IFByaW1pdGl2ZVJlZmVyZW5jZTxQcmltaXRpdmU+IHtcbiAgICBpZiAoa2V5ID09PSAnbGVuZ3RoJykge1xuICAgICAgbGV0IHsgbGVuZ3RoUmVmZXJlbmNlIH0gPSB0aGlzO1xuXG4gICAgICBpZiAobGVuZ3RoUmVmZXJlbmNlID09PSBudWxsKSB7XG4gICAgICAgIGxlbmd0aFJlZmVyZW5jZSA9IHRoaXMubGVuZ3RoUmVmZXJlbmNlID0gbmV3IFZhbHVlUmVmZXJlbmNlKHRoaXMuaW5uZXIubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxlbmd0aFJlZmVyZW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1cGVyLmdldChrZXkpO1xuICAgIH1cbiAgfVxufVxuXG50eXBlIFZhbHVlID0gdW5kZWZpbmVkIHwgbnVsbCB8IG51bWJlciB8IGJvb2xlYW47XG5cbmNsYXNzIFZhbHVlUmVmZXJlbmNlPFQgZXh0ZW5kcyBWYWx1ZT4gZXh0ZW5kcyBQcmltaXRpdmVSZWZlcmVuY2U8VD4ge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHN1cGVyKHZhbHVlKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgVU5ERUZJTkVEX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPHVuZGVmaW5lZD4gPSBuZXcgVmFsdWVSZWZlcmVuY2UodW5kZWZpbmVkKTtcbmV4cG9ydCBjb25zdCBOVUxMX1JFRkVSRU5DRTogUHJpbWl0aXZlUmVmZXJlbmNlPG51bGw+ID0gbmV3IFZhbHVlUmVmZXJlbmNlKG51bGwpO1xuZXhwb3J0IGNvbnN0IFRSVUVfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8Ym9vbGVhbj4gPSBuZXcgVmFsdWVSZWZlcmVuY2UodHJ1ZSk7XG5leHBvcnQgY29uc3QgRkFMU0VfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8Ym9vbGVhbj4gPSBuZXcgVmFsdWVSZWZlcmVuY2UoZmFsc2UpO1xuXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uYWxSZWZlcmVuY2UgaW1wbGVtZW50cyBSZWZlcmVuY2U8Ym9vbGVhbj4ge1xuICBwdWJsaWMgdGFnOiBUYWc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpbm5lcjogUmVmZXJlbmNlPHVua25vd24+LFxuICAgIHByaXZhdGUgdG9Cb29sOiAodmFsdWU6IHVua25vd24pID0+IGJvb2xlYW4gPSBkZWZhdWx0VG9Cb29sXG4gICkge1xuICAgIHRoaXMudGFnID0gaW5uZXIudGFnO1xuICB9XG5cbiAgdmFsdWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9Cb29sKHRoaXMuaW5uZXIudmFsdWUoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRvQm9vbCh2YWx1ZTogdW5rbm93bikge1xuICByZXR1cm4gISF2YWx1ZTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=