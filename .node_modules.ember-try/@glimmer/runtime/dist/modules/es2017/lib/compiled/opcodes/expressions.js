import { $v0 } from '@glimmer/vm';
import { APPEND_OPCODES } from '../../opcodes';
import { FALSE_REFERENCE, TRUE_REFERENCE } from '../../references';
import { ConcatReference } from '../expressions/concat';
import { assert } from '@glimmer/util';

import { stackAssert } from './assert';

import { CONSTANTS } from '../../symbols';
APPEND_OPCODES.add(16 /* Helper */, (vm, { op1: handle }) => {
    let stack = vm.stack;
    let helper = vm.runtime.resolver.resolve(handle);
    let args = stack.pop();
    let value = helper(args, vm);
    vm.loadValue($v0, value);
});
APPEND_OPCODES.add(22 /* GetVariable */, (vm, { op1: symbol }) => {
    let expr = vm.referenceForSymbol(symbol);
    vm.stack.push(expr);
});
APPEND_OPCODES.add(19 /* SetVariable */, (vm, { op1: symbol }) => {
    let expr = vm.stack.pop();
    vm.scope().bindSymbol(symbol, expr);
});
APPEND_OPCODES.add(21 /* SetJitBlock */, (vm, { op1: symbol }) => {
    let handle = vm.stack.pop();
    let scope = vm.stack.pop();
    let table = vm.stack.pop();
    let block = table ? [handle, scope, table] : null;
    vm.scope().bindBlock(symbol, block);
}, 'jit');
APPEND_OPCODES.add(20 /* SetAotBlock */, (vm, { op1: symbol }) => {
    let handle = vm.stack.pop();
    let scope = vm.stack.pop();
    let table = vm.stack.pop();
    let block = table ? [handle, scope, table] : null;
    vm.scope().bindBlock(symbol, block);
});
APPEND_OPCODES.add(104 /* ResolveMaybeLocal */, (vm, { op1: _name }) => {
    let name = vm[CONSTANTS].getString(_name);
    let locals = vm.scope().getPartialMap();
    let ref = locals[name];
    if (ref === undefined) {
        ref = vm.getSelf().get(name);
    }
    vm.stack.push(ref);
});
APPEND_OPCODES.add(36 /* RootScope */, (vm, { op1: symbols }) => {
    vm.pushRootScope(symbols);
});
APPEND_OPCODES.add(23 /* GetProperty */, (vm, { op1: _key }) => {
    let key = vm[CONSTANTS].getString(_key);
    let expr = vm.stack.pop();
    vm.stack.push(expr.get(key));
});
APPEND_OPCODES.add(24 /* GetBlock */, (vm, { op1: _block }) => {
    let { stack } = vm;
    let block = vm.scope().getBlock(_block);
    if (block) {
        stack.push(block[2]);
        stack.push(block[1]);
        stack.push(block[0]);
    } else {
        stack.push(null);
        stack.push(null);
        stack.push(null);
    }
});
APPEND_OPCODES.add(25 /* HasBlock */, (vm, { op1: _block }) => {
    let hasBlock = !!vm.scope().getBlock(_block);
    vm.stack.push(hasBlock ? TRUE_REFERENCE : FALSE_REFERENCE);
});
APPEND_OPCODES.add(26 /* HasBlockParams */, vm => {
    // FIXME(mmun): should only need to push the symbol table
    let block = vm.stack.pop();
    let scope = vm.stack.pop();

    let table = vm.stack.pop();
    (false && assert(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), stackAssert('Option<BlockSymbolTable>', table)));

    let hasBlockParams = table && table.parameters.length;
    vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);
});
APPEND_OPCODES.add(27 /* Concat */, (vm, { op1: count }) => {
    let out = new Array(count);
    for (let i = count; i > 0; i--) {
        let offset = i - 1;
        out[offset] = vm.stack.pop();
    }
    vm.stack.push(new ConcatReference(out));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,