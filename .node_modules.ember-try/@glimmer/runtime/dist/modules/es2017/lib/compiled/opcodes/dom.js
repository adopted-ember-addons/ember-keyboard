import { ReferenceCache, isConst, isConstTag, value, validate } from '@glimmer/reference';

import { $t0 } from '@glimmer/vm';
import { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';
import { Assert } from './vm';

import { CONSTANTS } from '../../symbols';

APPEND_OPCODES.add(40 /* Text */, (vm, { op1: text }) => {
    vm.elements().appendText(vm[CONSTANTS].getString(text));
});
APPEND_OPCODES.add(41 /* Comment */, (vm, { op1: text }) => {
    vm.elements().appendComment(vm[CONSTANTS].getString(text));
});
APPEND_OPCODES.add(47 /* OpenElement */, (vm, { op1: tag }) => {
    vm.elements().openElement(vm[CONSTANTS].getString(tag));
});
APPEND_OPCODES.add(48 /* OpenDynamicElement */, vm => {
    let tagName = vm.stack.pop().value();
    vm.elements().openElement(tagName);
});
APPEND_OPCODES.add(49 /* PushRemoteElement */, vm => {
    let elementRef = vm.stack.pop();
    let insertBeforeRef = vm.stack.pop();
    let guidRef = vm.stack.pop();
    let element;
    let insertBefore;
    let guid = guidRef.value();
    if (isConst(elementRef)) {
        element = elementRef.value();
    } else {
        let cache = new ReferenceCache(elementRef);
        element = cache.peek();
        vm.updateWith(new Assert(cache));
    }
    if (insertBeforeRef.value() !== undefined) {
        if (isConst(insertBeforeRef)) {
            insertBefore = insertBeforeRef.value();
        } else {
            let cache = new ReferenceCache(insertBeforeRef);
            insertBefore = cache.peek();
            vm.updateWith(new Assert(cache));
        }
    }
    let block = vm.elements().pushRemoteElement(element, guid, insertBefore);
    if (block) vm.associateDestroyable(block);
});
APPEND_OPCODES.add(55 /* PopRemoteElement */, vm => {
    vm.elements().popRemoteElement();
});
APPEND_OPCODES.add(53 /* FlushElement */, vm => {
    let operations = vm.fetchValue($t0);
    let modifiers = null;
    if (operations) {
        modifiers = operations.flush(vm);
        vm.loadValue($t0, null);
    }
    vm.elements().flushElement(modifiers);
});
APPEND_OPCODES.add(54 /* CloseElement */, vm => {
    let modifiers = vm.elements().closeElement();
    if (modifiers) {
        modifiers.forEach(([manager, modifier]) => {
            vm.env.scheduleInstallModifier(modifier, manager);
            let d = manager.getDestructor(modifier);
            if (d) {
                vm.associateDestroyable(d);
            }
        });
    }
});
APPEND_OPCODES.add(56 /* Modifier */, (vm, { op1: handle }) => {
    let { manager, state } = vm.runtime.resolver.resolve(handle);
    let stack = vm.stack;
    let args = stack.pop();
    let { constructing, updateOperations } = vm.elements();
    let dynamicScope = vm.dynamicScope();
    let modifier = manager.create(constructing, state, args, dynamicScope, updateOperations);
    let operations = vm.fetchValue($t0);
    operations.addModifier(manager, modifier);
    let tag = manager.getTag(modifier);
    if (!isConstTag(tag)) {
        vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));
    }
});
export class UpdateModifierOpcode extends UpdatingOpcode {
    constructor(tag, manager, modifier) {
        super();
        this.tag = tag;
        this.manager = manager;
        this.modifier = modifier;
        this.type = 'update-modifier';
        this.lastUpdated = value(tag);
    }
    evaluate(vm) {
        let { manager, modifier, tag, lastUpdated } = this;
        if (!validate(tag, lastUpdated)) {
            vm.env.scheduleUpdateModifier(modifier, manager);
            this.lastUpdated = value(tag);
        }
    }
}
APPEND_OPCODES.add(50 /* StaticAttr */, (vm, { op1: _name, op2: _value, op3: _namespace }) => {
    let name = vm[CONSTANTS].getString(_name);
    let value = vm[CONSTANTS].getString(_value);
    let namespace = _namespace ? vm[CONSTANTS].getString(_namespace) : null;
    vm.elements().setStaticAttribute(name, value, namespace);
});
APPEND_OPCODES.add(51 /* DynamicAttr */, (vm, { op1: _name, op2: trusting, op3: _namespace }) => {
    let name = vm[CONSTANTS].getString(_name);
    let reference = vm.stack.pop();
    let value = reference.value();
    let namespace = _namespace ? vm[CONSTANTS].getString(_namespace) : null;
    let attribute = vm.elements().setDynamicAttribute(name, value, !!trusting, namespace);
    if (!isConst(reference)) {
        vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));
    }
});
export class UpdateDynamicAttributeOpcode extends UpdatingOpcode {
    constructor(reference, attribute) {
        super();
        this.reference = reference;
        this.attribute = attribute;
        this.type = 'patch-element';
        let { tag } = reference;
        this.tag = tag;
        this.lastRevision = value(tag);
    }
    evaluate(vm) {
        let { attribute, reference, tag } = this;
        if (!validate(tag, this.lastRevision)) {
            this.lastRevision = value(tag);
            attribute.update(reference.value(), vm.env);
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,