import { APPEND_OPCODES } from '../../opcodes';
import { assert } from '@glimmer/util';

import { CONSTANTS } from '../../symbols';
APPEND_OPCODES.add(103 /* InvokePartial */, (vm, { op1: _meta, op2: _symbols, op3: _evalInfo }) => {
    let { [CONSTANTS]: constants, stack } = vm;
    let name = stack.pop().value();
    (false && assert(typeof name === 'string', `Could not find a partial named "${String(name)}"`));

    let meta = constants.getTemplateMeta(_meta);
    let outerSymbols = constants.getStringArray(_symbols);
    let evalInfo = constants.getArray(_evalInfo);
    let handle = vm.runtime.resolver.lookupPartial(name, meta);
    (false && assert(handle !== null, `Could not find a partial named "${name}"`));

    let definition = vm.runtime.resolver.resolve(handle);
    let { symbolTable, handle: vmHandle } = definition.getPartial(vm.context);
    {
        let partialSymbols = symbolTable.symbols;
        let outerScope = vm.scope();
        let partialScope = vm.pushRootScope(partialSymbols.length);
        let evalScope = outerScope.getEvalScope();
        partialScope.bindEvalScope(evalScope);
        partialScope.bindSelf(outerScope.getSelf());
        let locals = Object.create(outerScope.getPartialMap());
        for (let i = 0; i < evalInfo.length; i++) {
            let slot = evalInfo[i];
            let name = outerSymbols[slot - 1];
            let ref = outerScope.getSymbol(slot);
            locals[name] = ref;
        }
        if (evalScope) {
            for (let i = 0; i < partialSymbols.length; i++) {
                let name = partialSymbols[i];
                let symbol = i + 1;
                let value = evalScope[name];
                if (value !== undefined) partialScope.bind(symbol, value);
            }
        }
        partialScope.bindPartialMap(locals);
        vm.pushFrame(); // sp += 2
        vm.call(vmHandle);
    }
}, 'jit');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvcGFydGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLGNBQVQsUUFBK0IsZUFBL0I7QUFFQSxTQUFTLE1BQVQsUUFBdUIsZUFBdkI7O0FBSUEsU0FBUyxTQUFULFFBQTBCLGVBQTFCO0FBRUEsZUFBZSxHQUFmLENBQWtCLEdBQWxCLENBQWtCLG1CQUFsQixFQUVFLENBQUMsRUFBRCxFQUFLLEVBQUUsS0FBSyxLQUFQLEVBQWMsS0FBSyxRQUFuQixFQUE2QixLQUFLLFNBQWxDLEVBQUwsS0FBc0Q7QUFDcEQsUUFBSSxFQUFFLENBQUMsU0FBRCxHQUFhLFNBQWYsRUFBMEIsS0FBMUIsS0FBb0MsRUFBeEM7QUFFQSxRQUFJLE9BQWEsTUFBTSxHQUFOLEVBQU4sQ0FBbUMsS0FBbkMsRUFBWDtBQUhvRCxjQUlwRCxPQUFPLE9BQU8sSUFBUCxLQUFnQixRQUF2QixFQUFpQyxtQ0FBbUMsT0FBTyxJQUFQLENBQVksR0FBaEYsQ0FKb0Q7O0FBTXBELFFBQUksT0FBTyxVQUFVLGVBQVYsQ0FBMEIsS0FBMUIsQ0FBWDtBQUNBLFFBQUksZUFBZSxVQUFVLGNBQVYsQ0FBeUIsUUFBekIsQ0FBbkI7QUFDQSxRQUFJLFdBQVcsVUFBVSxRQUFWLENBQW1CLFNBQW5CLENBQWY7QUFFQSxRQUFJLFNBQVMsR0FBRyxPQUFILENBQVcsUUFBWCxDQUFvQixhQUFwQixDQUFrQyxJQUFsQyxFQUFrRCxJQUFsRCxDQUFiO0FBVm9ELGNBWXBELE9BQU8sV0FBVyxJQUFsQixFQUF3QixtQ0FBbUMsSUFBSSxHQUEvRCxDQVpvRDs7QUFjcEQsUUFBSSxhQUFhLEdBQUcsT0FBSCxDQUFXLFFBQVgsQ0FBb0IsT0FBcEIsQ0FBK0MsTUFBL0MsQ0FBakI7QUFFQSxRQUFJLEVBQUUsV0FBRixFQUFlLFFBQVEsUUFBdkIsS0FBb0MsV0FBVyxVQUFYLENBQXNCLEdBQUcsT0FBekIsQ0FBeEM7QUFFQTtBQUNFLFlBQUksaUJBQWlCLFlBQVksT0FBakM7QUFDQSxZQUFJLGFBQWEsR0FBRyxLQUFILEVBQWpCO0FBQ0EsWUFBSSxlQUFlLEdBQUcsYUFBSCxDQUFpQixlQUFlLE1BQWhDLENBQW5CO0FBQ0EsWUFBSSxZQUFZLFdBQVcsWUFBWCxFQUFoQjtBQUNBLHFCQUFhLGFBQWIsQ0FBMkIsU0FBM0I7QUFDQSxxQkFBYSxRQUFiLENBQXNCLFdBQVcsT0FBWCxFQUF0QjtBQUVBLFlBQUksU0FBUyxPQUFPLE1BQVAsQ0FBYyxXQUFXLGFBQVgsRUFBZCxDQUFiO0FBSUEsYUFBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLFNBQVMsTUFBN0IsRUFBcUMsR0FBckMsRUFBMEM7QUFDeEMsZ0JBQUksT0FBTyxTQUFTLENBQVQsQ0FBWDtBQUNBLGdCQUFJLE9BQU8sYUFBYSxPQUFPLENBQXBCLENBQVg7QUFDQSxnQkFBSSxNQUFNLFdBQVcsU0FBWCxDQUFxQixJQUFyQixDQUFWO0FBQ0EsbUJBQU8sSUFBUCxJQUFlLEdBQWY7QUFDRDtBQUVELFlBQUksU0FBSixFQUFlO0FBQ2IsaUJBQUssSUFBSSxJQUFJLENBQWIsRUFBZ0IsSUFBSSxlQUFlLE1BQW5DLEVBQTJDLEdBQTNDLEVBQWdEO0FBQzlDLG9CQUFJLE9BQU8sZUFBZSxDQUFmLENBQVg7QUFDQSxvQkFBSSxTQUFTLElBQUksQ0FBakI7QUFDQSxvQkFBSSxRQUFRLFVBQVUsSUFBVixDQUFaO0FBRUEsb0JBQUksVUFBVSxTQUFkLEVBQXlCLGFBQWEsSUFBYixDQUFrQixNQUFsQixFQUEwQixLQUExQjtBQUMxQjtBQUNGO0FBRUQscUJBQWEsY0FBYixDQUE0QixNQUE1QjtBQUVBLFdBQUcsU0FBSCxHQS9CRixDQStCa0I7QUFDaEIsV0FBRyxJQUFILENBQVEsUUFBUjtBQUNEO0FBQ0YsQ0F0REgsRUF1REUsS0F2REYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IEFQUEVORF9PUENPREVTIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5pbXBvcnQgeyBQYXJ0aWFsRGVmaW5pdGlvbiB9IGZyb20gJ0BnbGltbWVyL29wY29kZS1jb21waWxlcic7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IGNoZWNrIH0gZnJvbSAnQGdsaW1tZXIvZGVidWcnO1xuaW1wb3J0IHsgT3AsIERpY3QgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENoZWNrUmVmZXJlbmNlIH0gZnJvbSAnLi8tZGVidWctc3RyaXAnO1xuaW1wb3J0IHsgQ09OU1RBTlRTIH0gZnJvbSAnLi4vLi4vc3ltYm9scyc7XG5cbkFQUEVORF9PUENPREVTLmFkZChcbiAgT3AuSW52b2tlUGFydGlhbCxcbiAgKHZtLCB7IG9wMTogX21ldGEsIG9wMjogX3N5bWJvbHMsIG9wMzogX2V2YWxJbmZvIH0pID0+IHtcbiAgICBsZXQgeyBbQ09OU1RBTlRTXTogY29uc3RhbnRzLCBzdGFjayB9ID0gdm07XG5cbiAgICBsZXQgbmFtZSA9IGNoZWNrKHN0YWNrLnBvcCgpLCBDaGVja1JlZmVyZW5jZSkudmFsdWUoKTtcbiAgICBhc3NlcnQodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnLCBgQ291bGQgbm90IGZpbmQgYSBwYXJ0aWFsIG5hbWVkIFwiJHtTdHJpbmcobmFtZSl9XCJgKTtcblxuICAgIGxldCBtZXRhID0gY29uc3RhbnRzLmdldFRlbXBsYXRlTWV0YShfbWV0YSk7XG4gICAgbGV0IG91dGVyU3ltYm9scyA9IGNvbnN0YW50cy5nZXRTdHJpbmdBcnJheShfc3ltYm9scyk7XG4gICAgbGV0IGV2YWxJbmZvID0gY29uc3RhbnRzLmdldEFycmF5KF9ldmFsSW5mbyk7XG5cbiAgICBsZXQgaGFuZGxlID0gdm0ucnVudGltZS5yZXNvbHZlci5sb29rdXBQYXJ0aWFsKG5hbWUgYXMgc3RyaW5nLCBtZXRhKTtcblxuICAgIGFzc2VydChoYW5kbGUgIT09IG51bGwsIGBDb3VsZCBub3QgZmluZCBhIHBhcnRpYWwgbmFtZWQgXCIke25hbWV9XCJgKTtcblxuICAgIGxldCBkZWZpbml0aW9uID0gdm0ucnVudGltZS5yZXNvbHZlci5yZXNvbHZlPFBhcnRpYWxEZWZpbml0aW9uPihoYW5kbGUhKTtcblxuICAgIGxldCB7IHN5bWJvbFRhYmxlLCBoYW5kbGU6IHZtSGFuZGxlIH0gPSBkZWZpbml0aW9uLmdldFBhcnRpYWwodm0uY29udGV4dCk7XG5cbiAgICB7XG4gICAgICBsZXQgcGFydGlhbFN5bWJvbHMgPSBzeW1ib2xUYWJsZS5zeW1ib2xzO1xuICAgICAgbGV0IG91dGVyU2NvcGUgPSB2bS5zY29wZSgpO1xuICAgICAgbGV0IHBhcnRpYWxTY29wZSA9IHZtLnB1c2hSb290U2NvcGUocGFydGlhbFN5bWJvbHMubGVuZ3RoKTtcbiAgICAgIGxldCBldmFsU2NvcGUgPSBvdXRlclNjb3BlLmdldEV2YWxTY29wZSgpO1xuICAgICAgcGFydGlhbFNjb3BlLmJpbmRFdmFsU2NvcGUoZXZhbFNjb3BlKTtcbiAgICAgIHBhcnRpYWxTY29wZS5iaW5kU2VsZihvdXRlclNjb3BlLmdldFNlbGYoKSk7XG5cbiAgICAgIGxldCBsb2NhbHMgPSBPYmplY3QuY3JlYXRlKG91dGVyU2NvcGUuZ2V0UGFydGlhbE1hcCgpKSBhcyBEaWN0PFxuICAgICAgICBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPHVua25vd24+XG4gICAgICA+O1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2YWxJbmZvLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzbG90ID0gZXZhbEluZm9baV07XG4gICAgICAgIGxldCBuYW1lID0gb3V0ZXJTeW1ib2xzW3Nsb3QgLSAxXTtcbiAgICAgICAgbGV0IHJlZiA9IG91dGVyU2NvcGUuZ2V0U3ltYm9sKHNsb3QpO1xuICAgICAgICBsb2NhbHNbbmFtZV0gPSByZWY7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmFsU2NvcGUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWFsU3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGxldCBuYW1lID0gcGFydGlhbFN5bWJvbHNbaV07XG4gICAgICAgICAgbGV0IHN5bWJvbCA9IGkgKyAxO1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGV2YWxTY29wZVtuYW1lXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSBwYXJ0aWFsU2NvcGUuYmluZChzeW1ib2wsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwYXJ0aWFsU2NvcGUuYmluZFBhcnRpYWxNYXAobG9jYWxzKTtcblxuICAgICAgdm0ucHVzaEZyYW1lKCk7IC8vIHNwICs9IDJcbiAgICAgIHZtLmNhbGwodm1IYW5kbGUhKTtcbiAgICB9XG4gIH0sXG4gICdqaXQnXG4pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==