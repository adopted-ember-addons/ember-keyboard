import { isConst } from '@glimmer/reference';

import { APPEND_OPCODES } from '../../opcodes';
import { ConditionalReference } from '../../references';
import { isCurriedComponentDefinition, isComponentDefinition } from '../../component/curried-component';

import { isEmpty, isSafeString, isFragment, isNode, shouldCoerce } from '../../dom/normalize';
import DynamicTextContent from '../../vm/content/text';
export class IsCurriedComponentDefinitionReference extends ConditionalReference {
    static create(inner) {
        return new ConditionalReference(inner, isCurriedComponentDefinition);
    }
}
export class ContentTypeReference {
    constructor(inner) {
        this.inner = inner;
        this.tag = inner.tag;
    }
    value() {
        let value = this.inner.value();
        if (shouldCoerce(value)) {
            return 1 /* String */;
        } else if (isComponentDefinition(value)) {
            return 0 /* Component */;
        } else if (isSafeString(value)) {
            return 3 /* SafeString */;
        } else if (isFragment(value)) {
            return 4 /* Fragment */;
        } else if (isNode(value)) {
            return 5 /* Node */;
        } else {
                return 1 /* String */;
            }
    }
}
APPEND_OPCODES.add(42 /* AppendHTML */, vm => {
    let reference = vm.stack.pop();
    let rawValue = reference.value();
    let value = isEmpty(rawValue) ? '' : String(rawValue);
    vm.elements().appendDynamicHTML(value);
});
APPEND_OPCODES.add(43 /* AppendSafeHTML */, vm => {
    let reference = vm.stack.pop();
    let rawValue = reference.value().toHTML();
    let value = isEmpty(rawValue) ? '' : rawValue;
    vm.elements().appendDynamicHTML(value);
});
APPEND_OPCODES.add(46 /* AppendText */, vm => {
    let reference = vm.stack.pop();
    let rawValue = reference.value();
    let value = isEmpty(rawValue) ? '' : String(rawValue);
    let node = vm.elements().appendDynamicText(value);
    if (!isConst(reference)) {
        vm.updateWith(new DynamicTextContent(node, reference, value));
    }
});
APPEND_OPCODES.add(44 /* AppendDocumentFragment */, vm => {
    let reference = vm.stack.pop();
    let value = reference.value();
    vm.elements().appendDynamicFragment(value);
});
APPEND_OPCODES.add(45 /* AppendNode */, vm => {
    let reference = vm.stack.pop();
    let value = reference.value();
    vm.elements().appendDynamicNode(value);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvY29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUF5QixPQUF6QixRQUF3QyxvQkFBeEM7O0FBU0EsU0FBUyxjQUFULFFBQStCLGVBQS9CO0FBQ0EsU0FBUyxvQkFBVCxRQUFxQyxrQkFBckM7QUFDQSxTQUNFLDRCQURGLEVBRUUscUJBRkYsUUFHTyxtQ0FIUDs7QUFLQSxTQUFTLE9BQVQsRUFBa0IsWUFBbEIsRUFBZ0MsVUFBaEMsRUFBNEMsTUFBNUMsRUFBb0QsWUFBcEQsUUFBd0UscUJBQXhFO0FBQ0EsT0FBTyxrQkFBUCxNQUErQix1QkFBL0I7QUFHQSxPQUFNLE1BQU8scUNBQVAsU0FBcUQsb0JBQXJELENBQXlFO0FBQzdFLFdBQU8sTUFBUCxDQUFjLEtBQWQsRUFBdUM7QUFDckMsZUFBTyxJQUFJLG9CQUFKLENBQXlCLEtBQXpCLEVBQWdDLDRCQUFoQyxDQUFQO0FBQ0Q7QUFINEU7QUFNL0UsT0FBTSxNQUFPLG9CQUFQLENBQTJCO0FBRy9CLGdCQUFvQixLQUFwQixFQUE2QztBQUF6QixhQUFBLEtBQUEsR0FBQSxLQUFBO0FBQ2xCLGFBQUssR0FBTCxHQUFXLE1BQU0sR0FBakI7QUFDRDtBQUVELFlBQUs7QUFDSCxZQUFJLFFBQVEsS0FBSyxLQUFMLENBQVcsS0FBWCxFQUFaO0FBRUEsWUFBSSxhQUFhLEtBQWIsQ0FBSixFQUF5QjtBQUN2QixtQkFBQSxDQUFBLENBQUEsWUFBQTtBQUNELFNBRkQsTUFFTyxJQUFJLHNCQUFzQixLQUF0QixDQUFKLEVBQWtDO0FBQ3ZDLG1CQUFBLENBQUEsQ0FBQSxlQUFBO0FBQ0QsU0FGTSxNQUVBLElBQUksYUFBYSxLQUFiLENBQUosRUFBeUI7QUFDOUIsbUJBQUEsQ0FBQSxDQUFBLGdCQUFBO0FBQ0QsU0FGTSxNQUVBLElBQUksV0FBVyxLQUFYLENBQUosRUFBdUI7QUFDNUIsbUJBQUEsQ0FBQSxDQUFBLGNBQUE7QUFDRCxTQUZNLE1BRUEsSUFBSSxPQUFPLEtBQVAsQ0FBSixFQUFtQjtBQUN4QixtQkFBQSxDQUFBLENBQUEsVUFBQTtBQUNELFNBRk0sTUFFQTtBQUNMLHVCQUFBLENBQUEsQ0FBQSxZQUFBO0FBQ0Q7QUFDRjtBQXZCOEI7QUEwQmpDLGVBQWUsR0FBZixDQUFrQixFQUFsQixDQUFrQixnQkFBbEIsRUFBa0MsTUFBSztBQUNyQyxRQUFJLFlBQWtCLEdBQUcsS0FBSCxDQUFTLEdBQVQsRUFBdEI7QUFFQSxRQUFJLFdBQVcsVUFBVSxLQUFWLEVBQWY7QUFDQSxRQUFJLFFBQVEsUUFBUSxRQUFSLElBQW9CLEVBQXBCLEdBQXlCLE9BQU8sUUFBUCxDQUFyQztBQUVBLE9BQUcsUUFBSCxHQUFjLGlCQUFkLENBQWdDLEtBQWhDO0FBQ0QsQ0FQRDtBQVNBLGVBQWUsR0FBZixDQUFrQixFQUFsQixDQUFrQixvQkFBbEIsRUFBc0MsTUFBSztBQUN6QyxRQUFJLFlBQWtCLEdBQUcsS0FBSCxDQUFTLEdBQVQsRUFBdEI7QUFFQSxRQUFJLFdBQWlCLFVBQVUsS0FBVixFQUFOLENBQTBDLE1BQTFDLEVBQWY7QUFDQSxRQUFJLFFBQVEsUUFBUSxRQUFSLElBQW9CLEVBQXBCLEdBQStCLFFBQTNDO0FBRUEsT0FBRyxRQUFILEdBQWMsaUJBQWQsQ0FBZ0MsS0FBaEM7QUFDRCxDQVBEO0FBU0EsZUFBZSxHQUFmLENBQWtCLEVBQWxCLENBQWtCLGdCQUFsQixFQUFrQyxNQUFLO0FBQ3JDLFFBQUksWUFBa0IsR0FBRyxLQUFILENBQVMsR0FBVCxFQUF0QjtBQUVBLFFBQUksV0FBVyxVQUFVLEtBQVYsRUFBZjtBQUNBLFFBQUksUUFBUSxRQUFRLFFBQVIsSUFBb0IsRUFBcEIsR0FBeUIsT0FBTyxRQUFQLENBQXJDO0FBRUEsUUFBSSxPQUFPLEdBQUcsUUFBSCxHQUFjLGlCQUFkLENBQWdDLEtBQWhDLENBQVg7QUFFQSxRQUFJLENBQUMsUUFBUSxTQUFSLENBQUwsRUFBeUI7QUFDdkIsV0FBRyxVQUFILENBQWMsSUFBSSxrQkFBSixDQUF1QixJQUF2QixFQUE2QixTQUE3QixFQUF3QyxLQUF4QyxDQUFkO0FBQ0Q7QUFDRixDQVhEO0FBYUEsZUFBZSxHQUFmLENBQWtCLEVBQWxCLENBQWtCLDRCQUFsQixFQUE4QyxNQUFLO0FBQ2pELFFBQUksWUFBa0IsR0FBRyxLQUFILENBQVMsR0FBVCxFQUF0QjtBQUVBLFFBQUksUUFBYyxVQUFVLEtBQVYsRUFBbEI7QUFFQSxPQUFHLFFBQUgsR0FBYyxxQkFBZCxDQUFvQyxLQUFwQztBQUNELENBTkQ7QUFRQSxlQUFlLEdBQWYsQ0FBa0IsRUFBbEIsQ0FBa0IsZ0JBQWxCLEVBQWtDLE1BQUs7QUFDckMsUUFBSSxZQUFrQixHQUFHLEtBQUgsQ0FBUyxHQUFULEVBQXRCO0FBRUEsUUFBSSxRQUFjLFVBQVUsS0FBVixFQUFsQjtBQUVBLE9BQUcsUUFBSCxHQUFjLGlCQUFkLENBQWdDLEtBQWhDO0FBQ0QsQ0FORCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZmVyZW5jZSwgVGFnLCBpc0NvbnN0IH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7XG4gIGNoZWNrLFxuICBDaGVja1N0cmluZyxcbiAgQ2hlY2tTYWZlU3RyaW5nLFxuICBDaGVja05vZGUsXG4gIENoZWNrRG9jdW1lbnRGcmFnbWVudCxcbn0gZnJvbSAnQGdsaW1tZXIvZGVidWcnO1xuXG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUyB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuaW1wb3J0IHsgQ29uZGl0aW9uYWxSZWZlcmVuY2UgfSBmcm9tICcuLi8uLi9yZWZlcmVuY2VzJztcbmltcG9ydCB7XG4gIGlzQ3VycmllZENvbXBvbmVudERlZmluaXRpb24sXG4gIGlzQ29tcG9uZW50RGVmaW5pdGlvbixcbn0gZnJvbSAnLi4vLi4vY29tcG9uZW50L2N1cnJpZWQtY29tcG9uZW50JztcbmltcG9ydCB7IENoZWNrUGF0aFJlZmVyZW5jZSB9IGZyb20gJy4vLWRlYnVnLXN0cmlwJztcbmltcG9ydCB7IGlzRW1wdHksIGlzU2FmZVN0cmluZywgaXNGcmFnbWVudCwgaXNOb2RlLCBzaG91bGRDb2VyY2UgfSBmcm9tICcuLi8uLi9kb20vbm9ybWFsaXplJztcbmltcG9ydCBEeW5hbWljVGV4dENvbnRlbnQgZnJvbSAnLi4vLi4vdm0vY29udGVudC90ZXh0JztcbmltcG9ydCB7IENvbnRlbnRUeXBlLCBPcCwgRGljdCwgTWF5YmUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIElzQ3VycmllZENvbXBvbmVudERlZmluaXRpb25SZWZlcmVuY2UgZXh0ZW5kcyBDb25kaXRpb25hbFJlZmVyZW5jZSB7XG4gIHN0YXRpYyBjcmVhdGUoaW5uZXI6IFJlZmVyZW5jZTx1bmtub3duPik6IElzQ3VycmllZENvbXBvbmVudERlZmluaXRpb25SZWZlcmVuY2Uge1xuICAgIHJldHVybiBuZXcgQ29uZGl0aW9uYWxSZWZlcmVuY2UoaW5uZXIsIGlzQ3VycmllZENvbXBvbmVudERlZmluaXRpb24pO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb250ZW50VHlwZVJlZmVyZW5jZSBpbXBsZW1lbnRzIFJlZmVyZW5jZTxDb250ZW50VHlwZT4ge1xuICBwdWJsaWMgdGFnOiBUYWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbm5lcjogUmVmZXJlbmNlPHVua25vd24+KSB7XG4gICAgdGhpcy50YWcgPSBpbm5lci50YWc7XG4gIH1cblxuICB2YWx1ZSgpOiBDb250ZW50VHlwZSB7XG4gICAgbGV0IHZhbHVlID0gdGhpcy5pbm5lci52YWx1ZSgpIGFzIE1heWJlPERpY3Q+O1xuXG4gICAgaWYgKHNob3VsZENvZXJjZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBDb250ZW50VHlwZS5TdHJpbmc7XG4gICAgfSBlbHNlIGlmIChpc0NvbXBvbmVudERlZmluaXRpb24odmFsdWUpKSB7XG4gICAgICByZXR1cm4gQ29udGVudFR5cGUuQ29tcG9uZW50O1xuICAgIH0gZWxzZSBpZiAoaXNTYWZlU3RyaW5nKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIENvbnRlbnRUeXBlLlNhZmVTdHJpbmc7XG4gICAgfSBlbHNlIGlmIChpc0ZyYWdtZW50KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIENvbnRlbnRUeXBlLkZyYWdtZW50O1xuICAgIH0gZWxzZSBpZiAoaXNOb2RlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIENvbnRlbnRUeXBlLk5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDb250ZW50VHlwZS5TdHJpbmc7XG4gICAgfVxuICB9XG59XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5BcHBlbmRIVE1MLCB2bSA9PiB7XG4gIGxldCByZWZlcmVuY2UgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tQYXRoUmVmZXJlbmNlKTtcblxuICBsZXQgcmF3VmFsdWUgPSByZWZlcmVuY2UudmFsdWUoKTtcbiAgbGV0IHZhbHVlID0gaXNFbXB0eShyYXdWYWx1ZSkgPyAnJyA6IFN0cmluZyhyYXdWYWx1ZSk7XG5cbiAgdm0uZWxlbWVudHMoKS5hcHBlbmREeW5hbWljSFRNTCh2YWx1ZSk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkFwcGVuZFNhZmVIVE1MLCB2bSA9PiB7XG4gIGxldCByZWZlcmVuY2UgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tQYXRoUmVmZXJlbmNlKTtcblxuICBsZXQgcmF3VmFsdWUgPSBjaGVjayhyZWZlcmVuY2UudmFsdWUoKSwgQ2hlY2tTYWZlU3RyaW5nKS50b0hUTUwoKTtcbiAgbGV0IHZhbHVlID0gaXNFbXB0eShyYXdWYWx1ZSkgPyAnJyA6IGNoZWNrKHJhd1ZhbHVlLCBDaGVja1N0cmluZyk7XG5cbiAgdm0uZWxlbWVudHMoKS5hcHBlbmREeW5hbWljSFRNTCh2YWx1ZSk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkFwcGVuZFRleHQsIHZtID0+IHtcbiAgbGV0IHJlZmVyZW5jZSA9IGNoZWNrKHZtLnN0YWNrLnBvcCgpLCBDaGVja1BhdGhSZWZlcmVuY2UpO1xuXG4gIGxldCByYXdWYWx1ZSA9IHJlZmVyZW5jZS52YWx1ZSgpO1xuICBsZXQgdmFsdWUgPSBpc0VtcHR5KHJhd1ZhbHVlKSA/ICcnIDogU3RyaW5nKHJhd1ZhbHVlKTtcblxuICBsZXQgbm9kZSA9IHZtLmVsZW1lbnRzKCkuYXBwZW5kRHluYW1pY1RleHQodmFsdWUpO1xuXG4gIGlmICghaXNDb25zdChyZWZlcmVuY2UpKSB7XG4gICAgdm0udXBkYXRlV2l0aChuZXcgRHluYW1pY1RleHRDb250ZW50KG5vZGUsIHJlZmVyZW5jZSwgdmFsdWUpKTtcbiAgfVxufSk7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5BcHBlbmREb2N1bWVudEZyYWdtZW50LCB2bSA9PiB7XG4gIGxldCByZWZlcmVuY2UgPSBjaGVjayh2bS5zdGFjay5wb3AoKSwgQ2hlY2tQYXRoUmVmZXJlbmNlKTtcblxuICBsZXQgdmFsdWUgPSBjaGVjayhyZWZlcmVuY2UudmFsdWUoKSwgQ2hlY2tEb2N1bWVudEZyYWdtZW50KTtcblxuICB2bS5lbGVtZW50cygpLmFwcGVuZER5bmFtaWNGcmFnbWVudCh2YWx1ZSk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkFwcGVuZE5vZGUsIHZtID0+IHtcbiAgbGV0IHJlZmVyZW5jZSA9IGNoZWNrKHZtLnN0YWNrLnBvcCgpLCBDaGVja1BhdGhSZWZlcmVuY2UpO1xuXG4gIGxldCB2YWx1ZSA9IGNoZWNrKHJlZmVyZW5jZS52YWx1ZSgpLCBDaGVja05vZGUpO1xuXG4gIHZtLmVsZW1lbnRzKCkuYXBwZW5kRHluYW1pY05vZGUodmFsdWUpO1xufSk7XG4iXSwic291cmNlUm9vdCI6IiJ9