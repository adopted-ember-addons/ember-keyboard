"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IteratorSynchronizer = exports.END = exports.ReferenceIterator = exports.IterationArtifacts = exports.ListItem = undefined;

var _util = require("@glimmer/util");

class ListItem extends _util.ListNode {
    constructor(iterable, result) {
        super(iterable.valueReferenceFor(result));
        this.retained = false;
        this.seen = false;
        this.key = result.key;
        this.iterable = iterable;
        this.memo = iterable.memoReferenceFor(result);
    }
    update(item) {
        this.retained = true;
        this.iterable.updateValueReference(this.value, item);
        this.iterable.updateMemoReference(this.memo, item);
    }
    shouldRemove() {
        return !this.retained;
    }
    reset() {
        this.retained = false;
        this.seen = false;
    }
}
exports.ListItem = ListItem;
class IterationArtifacts {
    constructor(iterable) {
        this.iterator = null;
        this.map = new Map();
        this.list = new _util.LinkedList();
        this.tag = iterable.tag;
        this.iterable = iterable;
    }
    isEmpty() {
        let iterator = this.iterator = this.iterable.iterate();
        return iterator.isEmpty();
    }
    iterate() {
        let iterator;
        if (this.iterator === null) {
            iterator = this.iterable.iterate();
        } else {
            iterator = this.iterator;
        }
        this.iterator = null;
        return iterator;
    }
    advanceToKey(key, current) {
        let seek = current;
        while (seek !== null && seek.key !== key) {
            seek = this.advanceNode(seek);
        }
        return seek;
    }
    has(key) {
        return this.map.has(key);
    }
    get(key) {
        return this.map.get(key);
    }
    wasSeen(key) {
        let node = this.map.get(key);
        return node !== undefined && node.seen;
    }
    update(item) {
        let found = this.get(item.key);
        found.update(item);
        return found;
    }
    append(item) {
        let { map, list, iterable } = this;
        let node = new ListItem(iterable, item);
        map.set(item.key, node);
        list.append(node);
        return node;
    }
    insertBefore(item, reference) {
        let { map, list, iterable } = this;
        let node = new ListItem(iterable, item);
        map.set(item.key, node);
        node.retained = true;
        list.insertBefore(node, reference);
        return node;
    }
    move(item, reference) {
        let { list } = this;
        item.retained = true;
        list.remove(item);
        list.insertBefore(item, reference);
    }
    remove(item) {
        let { list } = this;
        list.remove(item);
        this.map.delete(item.key);
    }
    nextNode(item) {
        return this.list.nextNode(item);
    }
    advanceNode(item) {
        item.seen = true;
        return this.list.nextNode(item);
    }
    head() {
        return this.list.head();
    }
}
exports.IterationArtifacts = IterationArtifacts;
class ReferenceIterator {
    // if anyone needs to construct this object with something other than
    // an iterable, let @wycats know.
    constructor(iterable) {
        this.iterator = null;
        let artifacts = new IterationArtifacts(iterable);
        this.artifacts = artifacts;
    }
    next() {
        let { artifacts } = this;
        let iterator = this.iterator = this.iterator || artifacts.iterate();
        let item = iterator.next();
        if (item === null) return null;
        return artifacts.append(item);
    }
}
exports.ReferenceIterator = ReferenceIterator;
var Phase;
(function (Phase) {
    Phase[Phase["Append"] = 0] = "Append";
    Phase[Phase["Prune"] = 1] = "Prune";
    Phase[Phase["Done"] = 2] = "Done";
})(Phase || (Phase = {}));
const END = exports.END = 'END [2600abdf-889f-4406-b059-b44ecbafa5c5]';
class IteratorSynchronizer {
    constructor({ target, artifacts, env }) {
        this.target = target;
        this.artifacts = artifacts;
        this.iterator = artifacts.iterate();
        this.current = artifacts.head();
        this.env = env;
    }
    sync() {
        let phase = Phase.Append;
        while (true) {
            switch (phase) {
                case Phase.Append:
                    phase = this.nextAppend();
                    break;
                case Phase.Prune:
                    phase = this.nextPrune();
                    break;
                case Phase.Done:
                    this.nextDone();
                    return;
            }
        }
    }
    advanceToKey(key) {
        let { current, artifacts } = this;
        if (current === null) return;
        let next = artifacts.advanceNode(current);
        if (next.key === key) {
            this.current = artifacts.advanceNode(next);
            return;
        }
        let seek = artifacts.advanceToKey(key, current);
        if (seek) {
            this.move(seek, current);
            this.current = artifacts.nextNode(current);
        }
    }
    move(item, reference) {
        if (item.next !== reference) {
            this.artifacts.move(item, reference);
            this.target.move(this.env, item.key, item.value, item.memo, reference ? reference.key : END);
        }
    }
    nextAppend() {
        let { iterator, current, artifacts } = this;
        let item = iterator.next();
        if (item === null) {
            return this.startPrune();
        }
        let { key } = item;
        if (current !== null && current.key === key) {
            this.nextRetain(item, current);
        } else if (artifacts.has(key)) {
            this.nextMove(item);
        } else {
            this.nextInsert(item);
        }
        return Phase.Append;
    }
    nextRetain(item, current) {
        let { artifacts } = this;
        // current = expect(current, 'BUG: current is empty');
        current.update(item);
        this.current = artifacts.nextNode(current);
        this.target.retain(this.env, item.key, current.value, current.memo);
    }
    nextMove(item) {
        let { current, artifacts } = this;
        let { key } = item;
        let found = artifacts.update(item);
        if (artifacts.wasSeen(key)) {
            this.move(found, current);
        } else {
            this.advanceToKey(key);
        }
    }
    nextInsert(item) {
        let { artifacts, target, current } = this;
        let node = artifacts.insertBefore(item, current);
        target.insert(this.env, node.key, node.value, node.memo, current ? current.key : null);
    }
    startPrune() {
        this.current = this.artifacts.head();
        return Phase.Prune;
    }
    nextPrune() {
        let { artifacts, target, current } = this;
        if (current === null) {
            return Phase.Done;
        }
        let node = current;
        this.current = artifacts.nextNode(node);
        if (node.shouldRemove()) {
            artifacts.remove(node);
            target.delete(this.env, node.key);
        } else {
            node.reset();
        }
        return Phase.Prune;
    }
    nextDone() {
        this.target.done(this.env);
    }
}
exports.IteratorSynchronizer = IteratorSynchronizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,