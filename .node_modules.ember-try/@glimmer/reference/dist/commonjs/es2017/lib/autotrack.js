'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.pushTrackFrame = pushTrackFrame;
exports.popTrackFrame = popTrackFrame;
exports.trackedData = trackedData;

var _validators = require('./validators');

var _tracked = require('./tracked');

var _tags = require('./tags');

class Tracker {
    constructor() {
        this.tags = new Set();
        this.last = null;
    }
    add(tag) {
        this.tags.add(tag);
        this.last = tag;
    }
    get size() {
        return this.tags.size;
    }
    combine() {
        let { tags } = this;
        let tag = (0, _validators.createUpdatableTag)();
        if (tags.size === 1) {
            (0, _validators.update)(tag, this.last);
        } else if (tags.size > 1) {
            let tags = [];
            this.tags.forEach(tag => tags.push(tag));
            (0, _validators.update)(tag, (0, _validators.combine)(tags));
        }
        return tag;
    }
}
function pushTrackFrame() {
    let old = CURRENT_TRACKER;
    let tracker = new Tracker();
    CURRENT_TRACKER = tracker;
    return old;
}
function popTrackFrame(old) {
    let tag = CURRENT_TRACKER.combine();
    CURRENT_TRACKER = old;
    if (CURRENT_TRACKER) CURRENT_TRACKER.add(tag);
    return tag;
}
let CURRENT_TRACKER = null;
function trackedData(key) {
    function getter(self) {
        if (CURRENT_TRACKER) CURRENT_TRACKER.add((0, _tags.tagFor)(self, key));
        return (0, _tracked.getStateFor)(self, key);
    }
    function setter(self, value) {
        (0, _tracked.setStateFor)(self, key, value);
    }
    return { getter, setter };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3JlZmVyZW5jZS9saWIvYXV0b3RyYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O1FBbUNNLGMsR0FBQSxjO1FBUUEsYSxHQUFBLGE7UUFZQSxXLEdBQUEsVzs7OztBQXJETjs7QUFDQTs7QUFFQSxNQUFBLE9BQUEsQ0FBYTtBQUFiLGtCQUFBO0FBQ1UsYUFBQSxJQUFBLEdBQU8sSUFBUCxHQUFPLEVBQVA7QUFDQSxhQUFBLElBQUEsR0FBQSxJQUFBO0FBMEJUO0FBeEJDLFFBQUEsR0FBQSxFQUFZO0FBQ1YsYUFBQSxJQUFBLENBQUEsR0FBQSxDQUFBLEdBQUE7QUFDQSxhQUFBLElBQUEsR0FBQSxHQUFBO0FBQ0Q7QUFFRCxRQUFBLElBQUEsR0FBUTtBQUNOLGVBQU8sS0FBQSxJQUFBLENBQVAsSUFBQTtBQUNEO0FBRUQsY0FBTztBQUNMLFlBQUksRUFBQSxJQUFBLEtBQUosSUFBQTtBQUNBLFlBQUksTUFBSixxQ0FBQTtBQUVBLFlBQUksS0FBQSxJQUFBLEtBQUosQ0FBQSxFQUFxQjtBQUNuQixvQ0FBQSxHQUFBLEVBQVksS0FBWixJQUFBO0FBREYsU0FBQSxNQUVPLElBQUksS0FBQSxJQUFBLEdBQUosQ0FBQSxFQUFtQjtBQUN4QixnQkFBSSxPQUFKLEVBQUE7QUFDQSxpQkFBQSxJQUFBLENBQUEsT0FBQSxDQUFrQixPQUFPLEtBQUEsSUFBQSxDQUF6QixHQUF5QixDQUF6QjtBQUVBLG9DQUFBLEdBQUEsRUFBWSx5QkFBWixJQUFZLENBQVo7QUFDRDtBQUVELGVBQUEsR0FBQTtBQUNEO0FBM0JVO0FBOEJQLFNBQUEsY0FBQSxHQUF3QjtBQUM1QixRQUFJLE1BQUosZUFBQTtBQUNBLFFBQUksVUFBVSxJQUFkLE9BQWMsRUFBZDtBQUVBLHNCQUFBLE9BQUE7QUFDQSxXQUFBLEdBQUE7QUFDRDtBQUVLLFNBQUEsYUFBQSxDQUFBLEdBQUEsRUFBNEM7QUFDaEQsUUFBSSxNQUFNLGdCQUFWLE9BQVUsRUFBVjtBQUNBLHNCQUFBLEdBQUE7QUFDQSxRQUFBLGVBQUEsRUFBcUIsZ0JBQUEsR0FBQSxDQUFBLEdBQUE7QUFDckIsV0FBQSxHQUFBO0FBQ0Q7QUFFRCxJQUFJLGtCQUFKLElBQUE7QUFLTSxTQUFBLFdBQUEsQ0FBQSxHQUFBLEVBQ0U7QUFFTixhQUFBLE1BQUEsQ0FBQSxJQUFBLEVBQXVCO0FBQ3JCLFlBQUEsZUFBQSxFQUFxQixnQkFBQSxHQUFBLENBQW9CLGtCQUFBLElBQUEsRUFBcEIsR0FBb0IsQ0FBcEI7QUFDckIsZUFBTywwQkFBQSxJQUFBLEVBQVAsR0FBTyxDQUFQO0FBQ0Q7QUFFRCxhQUFBLE1BQUEsQ0FBQSxJQUFBLEVBQUEsS0FBQSxFQUFvQztBQUNsQyxrQ0FBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEtBQUE7QUFDRDtBQUVELFdBQU8sRUFBQSxNQUFBLEVBQVAsTUFBTyxFQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUYWcsIGNvbWJpbmUsIHVwZGF0ZSwgVXBkYXRhYmxlVGFnLCBjcmVhdGVVcGRhdGFibGVUYWcgfSBmcm9tICcuL3ZhbGlkYXRvcnMnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBnZXRTdGF0ZUZvciwgc2V0U3RhdGVGb3IgfSBmcm9tICcuL3RyYWNrZWQnO1xuaW1wb3J0IHsgdGFnRm9yIH0gZnJvbSAnLi90YWdzJztcblxuY2xhc3MgVHJhY2tlciB7XG4gIHByaXZhdGUgdGFncyA9IG5ldyBTZXQ8VGFnPigpO1xuICBwcml2YXRlIGxhc3Q6IE9wdGlvbjxUYWc+ID0gbnVsbDtcblxuICBhZGQodGFnOiBUYWcpOiB2b2lkIHtcbiAgICB0aGlzLnRhZ3MuYWRkKHRhZyk7XG4gICAgdGhpcy5sYXN0ID0gdGFnO1xuICB9XG5cbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy50YWdzLnNpemU7XG4gIH1cblxuICBjb21iaW5lKCk6IFVwZGF0YWJsZVRhZyB7XG4gICAgbGV0IHsgdGFncyB9ID0gdGhpcztcbiAgICBsZXQgdGFnID0gY3JlYXRlVXBkYXRhYmxlVGFnKCk7XG5cbiAgICBpZiAodGFncy5zaXplID09PSAxKSB7XG4gICAgICB1cGRhdGUodGFnLCB0aGlzLmxhc3QhKTtcbiAgICB9IGVsc2UgaWYgKHRhZ3Muc2l6ZSA+IDEpIHtcbiAgICAgIGxldCB0YWdzOiBUYWdbXSA9IFtdO1xuICAgICAgdGhpcy50YWdzLmZvckVhY2godGFnID0+IHRhZ3MucHVzaCh0YWcpKTtcblxuICAgICAgdXBkYXRlKHRhZywgY29tYmluZSh0YWdzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhZztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVzaFRyYWNrRnJhbWUoKTogT3B0aW9uPFRyYWNrZXI+IHtcbiAgbGV0IG9sZCA9IENVUlJFTlRfVFJBQ0tFUjtcbiAgbGV0IHRyYWNrZXIgPSBuZXcgVHJhY2tlcigpO1xuXG4gIENVUlJFTlRfVFJBQ0tFUiA9IHRyYWNrZXI7XG4gIHJldHVybiBvbGQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BUcmFja0ZyYW1lKG9sZDogT3B0aW9uPFRyYWNrZXI+KTogVXBkYXRhYmxlVGFnIHtcbiAgbGV0IHRhZyA9IENVUlJFTlRfVFJBQ0tFUiEuY29tYmluZSgpO1xuICBDVVJSRU5UX1RSQUNLRVIgPSBvbGQ7XG4gIGlmIChDVVJSRU5UX1RSQUNLRVIpIENVUlJFTlRfVFJBQ0tFUi5hZGQodGFnKTtcbiAgcmV0dXJuIHRhZztcbn1cblxubGV0IENVUlJFTlRfVFJBQ0tFUjogT3B0aW9uPFRyYWNrZXI+ID0gbnVsbDtcblxuZXhwb3J0IHR5cGUgR2V0dGVyPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IChzZWxmOiBUKSA9PiBUW0tdIHwgdW5kZWZpbmVkO1xuZXhwb3J0IHR5cGUgU2V0dGVyPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPiA9IChzZWxmOiBULCB2YWx1ZTogVFtLXSkgPT4gdm9pZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNrZWREYXRhPFQgZXh0ZW5kcyBvYmplY3QsIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAga2V5OiBLXG4pOiB7IGdldHRlcjogR2V0dGVyPFQsIEs+OyBzZXR0ZXI6IFNldHRlcjxULCBLPiB9IHtcbiAgZnVuY3Rpb24gZ2V0dGVyKHNlbGY6IFQpIHtcbiAgICBpZiAoQ1VSUkVOVF9UUkFDS0VSKSBDVVJSRU5UX1RSQUNLRVIuYWRkKHRhZ0ZvcihzZWxmLCBrZXkpKTtcbiAgICByZXR1cm4gZ2V0U3RhdGVGb3Ioc2VsZiwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldHRlcihzZWxmOiBULCB2YWx1ZTogVFtLXSk6IHZvaWQge1xuICAgIHNldFN0YXRlRm9yKHNlbGYsIGtleSwgdmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHsgZ2V0dGVyLCBzZXR0ZXIgfTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=