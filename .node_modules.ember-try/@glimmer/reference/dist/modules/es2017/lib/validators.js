import { assert } from '@glimmer/util';

const symbol = typeof Symbol !== 'undefined' ? Symbol : key => `__${key}${Math.floor(Math.random() * Date.now())}__`;
export const CONSTANT = 0;
export const INITIAL = 1;
export const VOLATILE = 9007199254740991; // MAX_INT
let $REVISION = INITIAL;
export function bump() {
    $REVISION++;
}
//////////
export const COMPUTE = symbol('TAG_COMPUTE');
//////////
/**
 * `value` receives a tag and returns an opaque Revision based on that tag. This
 * snapshot can then later be passed to `validate` with the same tag to
 * determine if the tag has changed at all since the time that `value` was
 * called.
 *
 * The current implementation returns the global revision count directly for
 * performance reasons. This is an implementation detail, and should not be
 * relied on directly by users of these APIs. Instead, Revisions should be
 * treated as if they are opaque/unknown, and should only be interacted with via
 * the `value`/`validate` API.
 *
 * @param tag
 */
export function value(_tag) {
    return $REVISION;
}
/**
 * `validate` receives a tag and a snapshot from a previous call to `value` with
 * the same tag, and determines if the tag is still valid compared to the
 * snapshot. If the tag's state has changed at all since then, `validate` will
 * return false, otherwise it will return true. This is used to determine if a
 * calculation related to the tags should be rerun.
 *
 * @param tag
 * @param snapshot
 */
export function validate(tag, snapshot) {
    return snapshot >= tag[COMPUTE]();
}
const TYPE = symbol('TAG_TYPE');
export let ALLOW_CYCLES;
if (false) {
    ALLOW_CYCLES = new WeakSet();
}
export class MonomorphicTagImpl {
    constructor(type) {
        this.revision = INITIAL;
        this.lastChecked = INITIAL;
        this.lastValue = INITIAL;
        this.isUpdating = false;
        this.subtag = null;
        this.subtags = null;
        this[TYPE] = type;
    }
    [COMPUTE]() {
        let { lastChecked } = this;
        if (lastChecked !== $REVISION) {
            this.isUpdating = true;
            this.lastChecked = $REVISION;
            try {
                let { subtags, subtag, revision } = this;
                if (subtag !== null) {
                    revision = Math.max(revision, subtag[COMPUTE]());
                }
                if (subtags !== null) {
                    for (let i = 0; i < subtags.length; i++) {
                        let value = subtags[i][COMPUTE]();
                        revision = Math.max(value, revision);
                    }
                }
                this.lastValue = revision;
            } finally {
                this.isUpdating = false;
            }
        }
        if (this.isUpdating === true) {
            if (false && !ALLOW_CYCLES.has(this)) {
                throw new Error('Cycles in tags are not allowed');
            }
            this.lastChecked = ++$REVISION;
        }
        return this.lastValue;
    }
    static update(_tag, subtag) {
        if (false) {
            (false && assert(_tag[TYPE] === 1 /* Updatable */, 'Attempted to update a tag that was not updatable'));
        }
        // TODO: TS 3.7 should allow us to do this via assertion
        let tag = _tag;
        if (subtag === CONSTANT_TAG) {
            tag.subtag = null;
        } else {
            tag.subtag = subtag;
            // subtag could be another type of tag, e.g. CURRENT_TAG or VOLATILE_TAG.
            // If so, lastChecked/lastValue will be undefined, result in these being
            // NaN. This is fine, it will force the system to recompute.
            tag.lastChecked = Math.min(tag.lastChecked, subtag.lastChecked);
            tag.lastValue = Math.max(tag.lastValue, subtag.lastValue);
        }
    }
    static dirty(tag) {
        if (false) {
            (false && assert(tag[TYPE] === 1 /* Updatable */ || tag[TYPE] === 0 /* Dirtyable */, 'Attempted to dirty a tag that was not dirtyable'));
        }
        tag.revision = ++$REVISION;
    }
}
export const dirty = MonomorphicTagImpl.dirty;
export const update = MonomorphicTagImpl.update;
//////////
export function createTag() {
    return new MonomorphicTagImpl(0 /* Dirtyable */);
}
export function createUpdatableTag() {
    return new MonomorphicTagImpl(1 /* Updatable */);
}
//////////
export const CONSTANT_TAG = new MonomorphicTagImpl(3 /* Constant */);
export function isConst({ tag }) {
    return tag === CONSTANT_TAG;
}
export function isConstTag(tag) {
    return tag === CONSTANT_TAG;
}
//////////
class VolatileTag {
    [COMPUTE]() {
        return VOLATILE;
    }
}
export const VOLATILE_TAG = new VolatileTag();
//////////
class CurrentTag {
    [COMPUTE]() {
        return $REVISION;
    }
}
export const CURRENT_TAG = new CurrentTag();
//////////
export function combineTagged(tagged) {
    let optimized = [];
    for (let i = 0, l = tagged.length; i < l; i++) {
        let tag = tagged[i].tag;
        if (tag === CONSTANT_TAG) continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
export function combineSlice(slice) {
    let optimized = [];
    let node = slice.head();
    while (node !== null) {
        let tag = node.tag;
        if (tag !== CONSTANT_TAG) optimized.push(tag);
        node = slice.nextNode(node);
    }
    return _combine(optimized);
}
export function combine(tags) {
    let optimized = [];
    for (let i = 0, l = tags.length; i < l; i++) {
        let tag = tags[i];
        if (tag === CONSTANT_TAG) continue;
        optimized.push(tag);
    }
    return _combine(optimized);
}
function _combine(tags) {
    switch (tags.length) {
        case 0:
            return CONSTANT_TAG;
        case 1:
            return tags[0];
        default:
            let tag = new MonomorphicTagImpl(2 /* Combinator */);
            tag.subtags = tags;
            return tag;
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,