import { combine, update, createUpdatableTag } from './validators';
import { getStateFor, setStateFor } from './tracked';
import { tagFor } from './tags';
class Tracker {
    constructor() {
        this.tags = new Set();
        this.last = null;
    }
    add(tag) {
        this.tags.add(tag);
        this.last = tag;
    }
    get size() {
        return this.tags.size;
    }
    combine() {
        let { tags } = this;
        let tag = createUpdatableTag();
        if (tags.size === 1) {
            update(tag, this.last);
        } else if (tags.size > 1) {
            let tags = [];
            this.tags.forEach(tag => tags.push(tag));
            update(tag, combine(tags));
        }
        return tag;
    }
}
export function pushTrackFrame() {
    let old = CURRENT_TRACKER;
    let tracker = new Tracker();
    CURRENT_TRACKER = tracker;
    return old;
}
export function popTrackFrame(old) {
    let tag = CURRENT_TRACKER.combine();
    CURRENT_TRACKER = old;
    if (CURRENT_TRACKER) CURRENT_TRACKER.add(tag);
    return tag;
}
let CURRENT_TRACKER = null;
export function trackedData(key) {
    function getter(self) {
        if (CURRENT_TRACKER) CURRENT_TRACKER.add(tagFor(self, key));
        return getStateFor(self, key);
    }
    function setter(self, value) {
        setStateFor(self, key, value);
    }
    return { getter, setter };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3JlZmVyZW5jZS9saWIvYXV0b3RyYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQWMsT0FBZCxFQUF1QixNQUF2QixFQUE2QyxrQkFBN0MsUUFBdUUsY0FBdkU7QUFFQSxTQUFTLFdBQVQsRUFBc0IsV0FBdEIsUUFBeUMsV0FBekM7QUFDQSxTQUFTLE1BQVQsUUFBdUIsUUFBdkI7QUFFQSxNQUFNLE9BQU4sQ0FBYTtBQUFiLGtCQUFBO0FBQ1UsYUFBQSxJQUFBLEdBQU8sSUFBSSxHQUFKLEVBQVA7QUFDQSxhQUFBLElBQUEsR0FBb0IsSUFBcEI7QUEwQlQ7QUF4QkMsUUFBSSxHQUFKLEVBQVk7QUFDVixhQUFLLElBQUwsQ0FBVSxHQUFWLENBQWMsR0FBZDtBQUNBLGFBQUssSUFBTCxHQUFZLEdBQVo7QUFDRDtBQUVELFFBQUksSUFBSixHQUFRO0FBQ04sZUFBTyxLQUFLLElBQUwsQ0FBVSxJQUFqQjtBQUNEO0FBRUQsY0FBTztBQUNMLFlBQUksRUFBRSxJQUFGLEtBQVcsSUFBZjtBQUNBLFlBQUksTUFBTSxvQkFBVjtBQUVBLFlBQUksS0FBSyxJQUFMLEtBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsbUJBQU8sR0FBUCxFQUFZLEtBQUssSUFBakI7QUFDRCxTQUZELE1BRU8sSUFBSSxLQUFLLElBQUwsR0FBWSxDQUFoQixFQUFtQjtBQUN4QixnQkFBSSxPQUFjLEVBQWxCO0FBQ0EsaUJBQUssSUFBTCxDQUFVLE9BQVYsQ0FBa0IsT0FBTyxLQUFLLElBQUwsQ0FBVSxHQUFWLENBQXpCO0FBRUEsbUJBQU8sR0FBUCxFQUFZLFFBQVEsSUFBUixDQUFaO0FBQ0Q7QUFFRCxlQUFPLEdBQVA7QUFDRDtBQTNCVTtBQThCYixPQUFNLFNBQVUsY0FBVixHQUF3QjtBQUM1QixRQUFJLE1BQU0sZUFBVjtBQUNBLFFBQUksVUFBVSxJQUFJLE9BQUosRUFBZDtBQUVBLHNCQUFrQixPQUFsQjtBQUNBLFdBQU8sR0FBUDtBQUNEO0FBRUQsT0FBTSxTQUFVLGFBQVYsQ0FBd0IsR0FBeEIsRUFBNEM7QUFDaEQsUUFBSSxNQUFNLGdCQUFpQixPQUFqQixFQUFWO0FBQ0Esc0JBQWtCLEdBQWxCO0FBQ0EsUUFBSSxlQUFKLEVBQXFCLGdCQUFnQixHQUFoQixDQUFvQixHQUFwQjtBQUNyQixXQUFPLEdBQVA7QUFDRDtBQUVELElBQUksa0JBQW1DLElBQXZDO0FBS0EsT0FBTSxTQUFVLFdBQVYsQ0FDSixHQURJLEVBQ0U7QUFFTixhQUFTLE1BQVQsQ0FBZ0IsSUFBaEIsRUFBdUI7QUFDckIsWUFBSSxlQUFKLEVBQXFCLGdCQUFnQixHQUFoQixDQUFvQixPQUFPLElBQVAsRUFBYSxHQUFiLENBQXBCO0FBQ3JCLGVBQU8sWUFBWSxJQUFaLEVBQWtCLEdBQWxCLENBQVA7QUFDRDtBQUVELGFBQVMsTUFBVCxDQUFnQixJQUFoQixFQUF5QixLQUF6QixFQUFvQztBQUNsQyxvQkFBWSxJQUFaLEVBQWtCLEdBQWxCLEVBQXVCLEtBQXZCO0FBQ0Q7QUFFRCxXQUFPLEVBQUUsTUFBRixFQUFVLE1BQVYsRUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGFnLCBjb21iaW5lLCB1cGRhdGUsIFVwZGF0YWJsZVRhZywgY3JlYXRlVXBkYXRhYmxlVGFnIH0gZnJvbSAnLi92YWxpZGF0b3JzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZ2V0U3RhdGVGb3IsIHNldFN0YXRlRm9yIH0gZnJvbSAnLi90cmFja2VkJztcbmltcG9ydCB7IHRhZ0ZvciB9IGZyb20gJy4vdGFncyc7XG5cbmNsYXNzIFRyYWNrZXIge1xuICBwcml2YXRlIHRhZ3MgPSBuZXcgU2V0PFRhZz4oKTtcbiAgcHJpdmF0ZSBsYXN0OiBPcHRpb248VGFnPiA9IG51bGw7XG5cbiAgYWRkKHRhZzogVGFnKTogdm9pZCB7XG4gICAgdGhpcy50YWdzLmFkZCh0YWcpO1xuICAgIHRoaXMubGFzdCA9IHRhZztcbiAgfVxuXG4gIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudGFncy5zaXplO1xuICB9XG5cbiAgY29tYmluZSgpOiBVcGRhdGFibGVUYWcge1xuICAgIGxldCB7IHRhZ3MgfSA9IHRoaXM7XG4gICAgbGV0IHRhZyA9IGNyZWF0ZVVwZGF0YWJsZVRhZygpO1xuXG4gICAgaWYgKHRhZ3Muc2l6ZSA9PT0gMSkge1xuICAgICAgdXBkYXRlKHRhZywgdGhpcy5sYXN0ISk7XG4gICAgfSBlbHNlIGlmICh0YWdzLnNpemUgPiAxKSB7XG4gICAgICBsZXQgdGFnczogVGFnW10gPSBbXTtcbiAgICAgIHRoaXMudGFncy5mb3JFYWNoKHRhZyA9PiB0YWdzLnB1c2godGFnKSk7XG5cbiAgICAgIHVwZGF0ZSh0YWcsIGNvbWJpbmUodGFncykpO1xuICAgIH1cblxuICAgIHJldHVybiB0YWc7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1c2hUcmFja0ZyYW1lKCk6IE9wdGlvbjxUcmFja2VyPiB7XG4gIGxldCBvbGQgPSBDVVJSRU5UX1RSQUNLRVI7XG4gIGxldCB0cmFja2VyID0gbmV3IFRyYWNrZXIoKTtcblxuICBDVVJSRU5UX1RSQUNLRVIgPSB0cmFja2VyO1xuICByZXR1cm4gb2xkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wVHJhY2tGcmFtZShvbGQ6IE9wdGlvbjxUcmFja2VyPik6IFVwZGF0YWJsZVRhZyB7XG4gIGxldCB0YWcgPSBDVVJSRU5UX1RSQUNLRVIhLmNvbWJpbmUoKTtcbiAgQ1VSUkVOVF9UUkFDS0VSID0gb2xkO1xuICBpZiAoQ1VSUkVOVF9UUkFDS0VSKSBDVVJSRU5UX1RSQUNLRVIuYWRkKHRhZyk7XG4gIHJldHVybiB0YWc7XG59XG5cbmxldCBDVVJSRU5UX1RSQUNLRVI6IE9wdGlvbjxUcmFja2VyPiA9IG51bGw7XG5cbmV4cG9ydCB0eXBlIEdldHRlcjxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSAoc2VsZjogVCkgPT4gVFtLXSB8IHVuZGVmaW5lZDtcbmV4cG9ydCB0eXBlIFNldHRlcjxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSAoc2VsZjogVCwgdmFsdWU6IFRbS10pID0+IHZvaWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFja2VkRGF0YTxUIGV4dGVuZHMgb2JqZWN0LCBLIGV4dGVuZHMga2V5b2YgVD4oXG4gIGtleTogS1xuKTogeyBnZXR0ZXI6IEdldHRlcjxULCBLPjsgc2V0dGVyOiBTZXR0ZXI8VCwgSz4gfSB7XG4gIGZ1bmN0aW9uIGdldHRlcihzZWxmOiBUKSB7XG4gICAgaWYgKENVUlJFTlRfVFJBQ0tFUikgQ1VSUkVOVF9UUkFDS0VSLmFkZCh0YWdGb3Ioc2VsZiwga2V5KSk7XG4gICAgcmV0dXJuIGdldFN0YXRlRm9yKHNlbGYsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXR0ZXIoc2VsZjogVCwgdmFsdWU6IFRbS10pOiB2b2lkIHtcbiAgICBzZXRTdGF0ZUZvcihzZWxmLCBrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiB7IGdldHRlciwgc2V0dGVyIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9