{
  "project": {
    "name": "The Ember API",
    "description": "The Ember API: a framework for building ambitious web applications",
    "url": "https://emberjs.com/",
    "version": "3.22.0"
  },
  "files": {
    "node_modules/rsvp/lib/rsvp/promise/all.js": {
      "name": "node_modules/rsvp/lib/rsvp/promise/all.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Promise": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/promise/race.js": {
      "name": "node_modules/rsvp/lib/rsvp/promise/race.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Promise": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/promise/reject.js": {
      "name": "node_modules/rsvp/lib/rsvp/promise/reject.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Promise": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/promise/resolve.js": {
      "name": "node_modules/rsvp/lib/rsvp/promise/resolve.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Promise": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/all-settled.js": {
      "name": "node_modules/rsvp/lib/rsvp/all-settled.js",
      "modules": {
        "rsvp": 1
      },
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/all.js": {
      "name": "node_modules/rsvp/lib/rsvp/all.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/defer.js": {
      "name": "node_modules/rsvp/lib/rsvp/defer.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/events.js": {
      "name": "node_modules/rsvp/lib/rsvp/events.js",
      "modules": {},
      "classes": {
        "EventTarget": 1
      },
      "fors": {
        "rsvp": 1,
        "EventTarget": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/filter.js": {
      "name": "node_modules/rsvp/lib/rsvp/filter.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/hash-settled.js": {
      "name": "node_modules/rsvp/lib/rsvp/hash-settled.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/hash.js": {
      "name": "node_modules/rsvp/lib/rsvp/hash.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/map.js": {
      "name": "node_modules/rsvp/lib/rsvp/map.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/node.js": {
      "name": "node_modules/rsvp/lib/rsvp/node.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/promise.js": {
      "name": "node_modules/rsvp/lib/rsvp/promise.js",
      "modules": {},
      "classes": {
        "Promise": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/race.js": {
      "name": "node_modules/rsvp/lib/rsvp/race.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/reject.js": {
      "name": "node_modules/rsvp/lib/rsvp/reject.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/resolve.js": {
      "name": "node_modules/rsvp/lib/rsvp/resolve.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "node_modules/rsvp/lib/rsvp/rethrow.js": {
      "name": "node_modules/rsvp/lib/rsvp/rethrow.js",
      "modules": {},
      "classes": {},
      "fors": {
        "rsvp": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/console/index.js": {
      "name": "packages/@ember/-internals/console/index.js",
      "modules": {},
      "classes": {
        "Ember.Logger": 1
      },
      "fors": {
        "Ember.Logger": 1
      },
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/container/lib/container.ts": {
      "name": "packages/@ember/-internals/container/lib/container.ts",
      "modules": {},
      "classes": {
        "Ember.Container": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/container/lib/registry.ts": {
      "name": "packages/@ember/-internals/container/lib/registry.ts",
      "modules": {},
      "classes": {
        "Ember.Registry": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/environment/lib/env.ts": {
      "name": "packages/@ember/-internals/environment/lib/env.ts",
      "modules": {},
      "classes": {
        "Ember.EmberENV": 1
      },
      "fors": {
        "Ember.EmberENV": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/extension-support/lib/container_debug_adapter.js": {
      "name": "packages/@ember/-internals/extension-support/lib/container_debug_adapter.js",
      "modules": {},
      "classes": {
        "ContainerDebugAdapter": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/extension-support/lib/data_adapter.js": {
      "name": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "modules": {},
      "classes": {
        "DataAdapter": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/component-managers/custom.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/component-managers/custom.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/components/checkbox.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "modules": {},
      "classes": {
        "Checkbox": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/components/input.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/components/input.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1,
        "Ember.Templates.components": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/components/link-to.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "modules": {},
      "classes": {
        "LinkComponent": 1
      },
      "fors": {
        "Ember.Templates.components": 1,
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/components/text-field.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "modules": {},
      "classes": {
        "TextField": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/components/textarea.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
      "modules": {},
      "classes": {
        "TextArea": 1
      },
      "fors": {
        "Ember.Templates.components": 1,
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/-track-array.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/-track-array.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/action.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/action.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/array.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/array.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/component.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/component.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/concat.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/concat.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/fn.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/fn.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/get.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/get.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/hash.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/hash.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/loc.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/loc.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/log.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/log.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/mut.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/mut.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/query-param.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/query-param.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/readonly.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/readonly.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helpers/unbound.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helpers/unbound.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/modifiers/custom.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/modifiers/custom.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/modifiers/on.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/modifiers/on.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/syntax/in-element.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/syntax/in-element.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/syntax/let.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/syntax/let.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/syntax/mount.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/syntax/mount.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/syntax/outlet.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/syntax/outlet.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/utils/curly-component-state-bucket.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/utils/curly-component-state-bucket.ts",
      "modules": {},
      "classes": {
        "ComponentStateBucket": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/utils/outlet.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/utils/string.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
      "modules": {
        "@ember/template": 1
      },
      "classes": {},
      "fors": {
        "@ember/template": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/views/outlet.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/views/outlet.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/component.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/component.ts",
      "modules": {},
      "classes": {
        "Component": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/glimmer-component-docs.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/glimmer-component-docs.ts",
      "modules": {
        "@glimmer/component": 1
      },
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/glimmer-tracking-docs.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/glimmer-tracking-docs.ts",
      "modules": {
        "@glimmer/tracking": 1
      },
      "classes": {},
      "fors": {
        "@glimmer/tracking": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/helper.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "modules": {},
      "classes": {
        "Helper": 1
      },
      "fors": {
        "@ember/component/helper": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/lib/resolver.ts": {
      "name": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/glimmer/index.ts": {
      "name": "packages/@ember/-internals/glimmer/index.ts",
      "modules": {
        "@ember/component": 1
      },
      "classes": {
        "Ember.Templates.helpers": 1
      },
      "fors": {
        "Ember.Templates.helpers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/meta/lib/meta.ts": {
      "name": "packages/@ember/-internals/meta/lib/meta.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/cache.ts": {
      "name": "packages/@ember/-internals/metal/lib/cache.ts",
      "modules": {
        "@glimmer/tracking/primitives/cache": 1
      },
      "classes": {},
      "fors": {
        "@glimmer/tracking/primitives/cache": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/computed.ts": {
      "name": "packages/@ember/-internals/metal/lib/computed.ts",
      "modules": {},
      "classes": {
        "ComputedProperty": 1
      },
      "fors": {
        "@ember/object": 1,
        "@ember/debug": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/decorator.ts": {
      "name": "packages/@ember/-internals/metal/lib/decorator.ts",
      "modules": {},
      "classes": {
        "Descriptor": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/deprecate_property.ts": {
      "name": "packages/@ember/-internals/metal/lib/deprecate_property.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/events.ts": {
      "name": "packages/@ember/-internals/metal/lib/events.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object/events": 1,
        "@ember/object/evented": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/expand_properties.ts": {
      "name": "packages/@ember/-internals/metal/lib/expand_properties.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object/computed": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/get_properties.ts": {
      "name": "packages/@ember/-internals/metal/lib/get_properties.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/injected_property.ts": {
      "name": "packages/@ember/-internals/metal/lib/injected_property.ts",
      "modules": {},
      "classes": {
        "Ember.InjectedProperty": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/metal/lib/is_blank.ts": {
      "name": "packages/@ember/-internals/metal/lib/is_blank.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/is_empty.ts": {
      "name": "packages/@ember/-internals/metal/lib/is_empty.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/is_none.ts": {
      "name": "packages/@ember/-internals/metal/lib/is_none.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/is_present.ts": {
      "name": "packages/@ember/-internals/metal/lib/is_present.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/libraries.ts": {
      "name": "packages/@ember/-internals/metal/lib/libraries.ts",
      "modules": {},
      "classes": {
        "Libraries": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/mixin.ts": {
      "name": "packages/@ember/-internals/metal/lib/mixin.ts",
      "modules": {},
      "classes": {
        "Mixin": 1
      },
      "fors": {
        "@ember/object/mixin": 1,
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/observer.ts": {
      "name": "packages/@ember/-internals/metal/lib/observer.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object/observers": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/properties.ts": {
      "name": "packages/@ember/-internals/metal/lib/properties.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/property_events.ts": {
      "name": "packages/@ember/-internals/metal/lib/property_events.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/property_get.ts": {
      "name": "packages/@ember/-internals/metal/lib/property_get.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/property_set.ts": {
      "name": "packages/@ember/-internals/metal/lib/property_set.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/set_properties.ts": {
      "name": "packages/@ember/-internals/metal/lib/set_properties.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/metal/lib/tracked.ts": {
      "name": "packages/@ember/-internals/metal/lib/tracked.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/owner/index.ts": {
      "name": "packages/@ember/-internals/owner/index.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/application": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/ext/controller.ts": {
      "name": "packages/@ember/-internals/routing/lib/ext/controller.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.ControllerMixin": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/location/api.ts": {
      "name": "packages/@ember/-internals/routing/lib/location/api.ts",
      "modules": {},
      "classes": {
        "Location": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/location/auto_location.ts": {
      "name": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "modules": {},
      "classes": {
        "AutoLocation": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/location/hash_location.ts": {
      "name": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "modules": {},
      "classes": {
        "HashLocation": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/location/history_location.ts": {
      "name": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "modules": {},
      "classes": {
        "HistoryLocation": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/location/none_location.ts": {
      "name": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "modules": {},
      "classes": {
        "NoneLocation": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/location/util.ts": {
      "name": "packages/@ember/-internals/routing/lib/location/util.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/services/router.ts": {
      "name": "packages/@ember/-internals/routing/lib/services/router.ts",
      "modules": {},
      "classes": {
        "RouterService": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/services/routing.ts": {
      "name": "packages/@ember/-internals/routing/lib/services/routing.ts",
      "modules": {},
      "classes": {
        "RoutingService": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/cache.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/cache.ts",
      "modules": {},
      "classes": {
        "BucketCache": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/controller_for.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/controller_for.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/generate_controller.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/generate_controller.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/route-info.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "modules": {},
      "classes": {
        "RouteInfoWithAttributes": 1,
        "RouteInfo": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/route.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/route.ts",
      "modules": {
        "@ember/routing": 1
      },
      "classes": {
        "Route": 1
      },
      "fors": {
        "Route": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/router.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/router.ts",
      "modules": {},
      "classes": {
        "EmberRouter": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/routing/lib/system/transition.ts": {
      "name": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "modules": {},
      "classes": {
        "Transition": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/ext/function.js": {
      "name": "packages/@ember/-internals/runtime/lib/ext/function.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Function": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/-proxy.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/-proxy.js",
      "modules": {},
      "classes": {
        "Ember.ProxyMixin": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/mixins/action_handler.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/action_handler.js",
      "modules": {},
      "classes": {
        "Ember.ActionHandler": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/mixins/array.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "modules": {},
      "classes": {
        "EmberArray": 1,
        "MutableArray": 1,
        "Ember.NativeArray": 1
      },
      "fors": {
        "@ember/array": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/comparable.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/comparable.js",
      "modules": {},
      "classes": {
        "Ember.Comparable": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "modules": {},
      "classes": {
        "ContainerProxyMixin": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/copyable.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/copyable.js",
      "modules": {},
      "classes": {
        "Ember.Copyable": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/mixins/enumerable.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/enumerable.js",
      "modules": {
        "@ember/enumerable": 1
      },
      "classes": {
        "Enumerable": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/evented.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "modules": {},
      "classes": {
        "Evented": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/mutable_enumerable.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/mutable_enumerable.js",
      "modules": {},
      "classes": {
        "Ember.MutableEnumerable": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/mixins/observable.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "modules": {},
      "classes": {
        "Observable": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "modules": {},
      "classes": {
        "PromiseProxyMixin": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "modules": {},
      "classes": {
        "RegistryProxyMixin": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/mixins/target_action_support.js": {
      "name": "packages/@ember/-internals/runtime/lib/mixins/target_action_support.js",
      "modules": {},
      "classes": {
        "Ember.TargetActionSupport": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/system/array_proxy.js": {
      "name": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "modules": {},
      "classes": {
        "ArrayProxy": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/system/core_object.js": {
      "name": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "modules": {},
      "classes": {
        "CoreObject": 1
      },
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/system/namespace.js": {
      "name": "packages/@ember/-internals/runtime/lib/system/namespace.js",
      "modules": {},
      "classes": {
        "Ember.Namespace": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/runtime/lib/system/object.js": {
      "name": "packages/@ember/-internals/runtime/lib/system/object.js",
      "modules": {},
      "classes": {
        "EmberObject": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/system/object_proxy.js": {
      "name": "packages/@ember/-internals/runtime/lib/system/object_proxy.js",
      "modules": {},
      "classes": {
        "ObjectProxy": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/compare.js": {
      "name": "packages/@ember/-internals/runtime/lib/compare.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/copy.js": {
      "name": "packages/@ember/-internals/runtime/lib/copy.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object/internals": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/is-equal.js": {
      "name": "packages/@ember/-internals/runtime/lib/is-equal.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/runtime/lib/type-of.js": {
      "name": "packages/@ember/-internals/runtime/lib/type-of.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/guid.ts": {
      "name": "packages/@ember/-internals/utils/lib/guid.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember": 1,
        "@ember/object/internals": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/inspect.ts": {
      "name": "packages/@ember/-internals/utils/lib/inspect.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/intern.ts": {
      "name": "packages/@ember/-internals/utils/lib/intern.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/invoke.ts": {
      "name": "packages/@ember/-internals/utils/lib/invoke.ts",
      "modules": {
        "@ember/utils": 1
      },
      "classes": {},
      "fors": {
        "Ember": 1,
        "@ember/utils": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/make-array.ts": {
      "name": "packages/@ember/-internals/utils/lib/make-array.ts",
      "modules": {
        "@ember/array": 1
      },
      "classes": {},
      "fors": {
        "@ember/array": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/spec.ts": {
      "name": "packages/@ember/-internals/utils/lib/spec.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/utils/lib/super.ts": {
      "name": "packages/@ember/-internals/utils/lib/super.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember": 1
      },
      "namespaces": {}
    },
    "packages/@ember/-internals/views/lib/mixins/action_support.js": {
      "name": "packages/@ember/-internals/views/lib/mixins/action_support.js",
      "modules": {},
      "classes": {
        "Ember.ActionSupport": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/views/lib/mixins/child_views_support.js": {
      "name": "packages/@ember/-internals/views/lib/mixins/child_views_support.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/views/lib/mixins/class_names_support.js": {
      "name": "packages/@ember/-internals/views/lib/mixins/class_names_support.js",
      "modules": {},
      "classes": {
        "Ember.ClassNamesSupport": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/views/lib/mixins/text_support.js": {
      "name": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "modules": {},
      "classes": {
        "Ember.TextSupport": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/views/lib/mixins/view_state_support.js": {
      "name": "packages/@ember/-internals/views/lib/mixins/view_state_support.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/views/lib/mixins/view_support.js": {
      "name": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "modules": {},
      "classes": {
        "Ember.ViewMixin": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/views/lib/system/action_manager.js": {
      "name": "packages/@ember/-internals/views/lib/system/action_manager.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/views/lib/system/event_dispatcher.js": {
      "name": "packages/@ember/-internals/views/lib/system/event_dispatcher.js",
      "modules": {},
      "classes": {
        "Ember.EventDispatcher": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/-internals/views/lib/system/utils.ts": {
      "name": "packages/@ember/-internals/views/lib/system/utils.ts",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/-internals/views/lib/views/core_view.js": {
      "name": "packages/@ember/-internals/views/lib/views/core_view.js",
      "modules": {},
      "classes": {
        "Ember.CoreView": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/application/lib/application.js": {
      "name": "packages/@ember/application/lib/application.js",
      "modules": {
        "@ember/application": 1
      },
      "classes": {
        "Application": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/application/lib/lazy_load.js": {
      "name": "packages/@ember/application/lib/lazy_load.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/application": 1
      },
      "namespaces": {}
    },
    "packages/@ember/application/globals-resolver.js": {
      "name": "packages/@ember/application/globals-resolver.js",
      "modules": {},
      "classes": {
        "GlobalsResolver": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/application/instance.js": {
      "name": "packages/@ember/application/instance.js",
      "modules": {},
      "classes": {
        "ApplicationInstance": 1,
        "ApplicationInstance.BootOptions": 1
      },
      "fors": {},
      "namespaces": {
        "ApplicationInstance": 1
      }
    },
    "packages/@ember/canary-features/index.ts": {
      "name": "packages/@ember/canary-features/index.ts",
      "modules": {
        "@ember/canary-features": 1
      },
      "classes": {
        "FEATURES": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/component/template-only.ts": {
      "name": "packages/@ember/component/template-only.ts",
      "modules": {
        "@ember/component/template-only": 1
      },
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/controller/lib/controller_mixin.js": {
      "name": "packages/@ember/controller/lib/controller_mixin.js",
      "modules": {},
      "classes": {
        "Ember.ControllerMixin": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/controller/index.js": {
      "name": "packages/@ember/controller/index.js",
      "modules": {
        "@ember/controller": 1
      },
      "classes": {
        "Controller": 1
      },
      "fors": {
        "@ember/controller": 1
      },
      "namespaces": {}
    },
    "packages/@ember/debug/lib/capture-render-tree.ts": {
      "name": "packages/@ember/debug/lib/capture-render-tree.ts",
      "modules": {
        "@ember/debug": 1
      },
      "classes": {},
      "fors": {
        "@ember/debug": 1
      },
      "namespaces": {}
    },
    "packages/@ember/debug/lib/deprecate.ts": {
      "name": "packages/@ember/debug/lib/deprecate.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/debug": 1
      },
      "namespaces": {}
    },
    "packages/@ember/debug/lib/warn.ts": {
      "name": "packages/@ember/debug/lib/warn.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/debug": 1
      },
      "namespaces": {}
    },
    "packages/@ember/debug/index.ts": {
      "name": "packages/@ember/debug/index.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/debug": 1
      },
      "namespaces": {}
    },
    "packages/@ember/destroyable/index.ts": {
      "name": "packages/@ember/destroyable/index.ts",
      "modules": {
        "@ember/destroyable": 1
      },
      "classes": {},
      "fors": {
        "@ember/destroyable": 1
      },
      "namespaces": {}
    },
    "packages/@ember/engine/lib/engine-parent.js": {
      "name": "packages/@ember/engine/lib/engine-parent.js",
      "modules": {
        "@ember/engine": 1
      },
      "classes": {},
      "fors": {
        "@ember/engine": 1
      },
      "namespaces": {}
    },
    "packages/@ember/engine/index.js": {
      "name": "packages/@ember/engine/index.js",
      "modules": {},
      "classes": {
        "Engine": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/engine/instance.js": {
      "name": "packages/@ember/engine/instance.js",
      "modules": {},
      "classes": {
        "EngineInstance": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/@ember/error/index.ts": {
      "name": "packages/@ember/error/index.ts",
      "modules": {
        "@ember/error": 1
      },
      "classes": {
        "Ember.Error": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/@ember/instrumentation/index.ts": {
      "name": "packages/@ember/instrumentation/index.ts",
      "modules": {
        "@ember/instrumentation": 1
      },
      "classes": {
        "Instrumentation": 1
      },
      "fors": {
        "@ember/instrumentation": 1
      },
      "namespaces": {}
    },
    "packages/@ember/object/lib/computed/computed_macros.js": {
      "name": "packages/@ember/object/lib/computed/computed_macros.js",
      "modules": {
        "@ember/object": 1
      },
      "classes": {},
      "fors": {
        "@ember/object/computed": 1
      },
      "namespaces": {}
    },
    "packages/@ember/object/lib/computed/reduce_computed_macros.js": {
      "name": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object/computed": 1
      },
      "namespaces": {}
    },
    "packages/@ember/object/compat.ts": {
      "name": "packages/@ember/object/compat.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object/compat": 1
      },
      "namespaces": {}
    },
    "packages/@ember/object/index.js": {
      "name": "packages/@ember/object/index.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/object": 1
      },
      "namespaces": {}
    },
    "packages/@ember/polyfills/lib/assign.ts": {
      "name": "packages/@ember/polyfills/lib/assign.ts",
      "modules": {
        "@ember/polyfills": 1
      },
      "classes": {},
      "fors": {
        "@ember/polyfills": 1
      },
      "namespaces": {}
    },
    "packages/@ember/polyfills/lib/merge.ts": {
      "name": "packages/@ember/polyfills/lib/merge.ts",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/polyfills": 1
      },
      "namespaces": {}
    },
    "packages/@ember/runloop/index.js": {
      "name": "packages/@ember/runloop/index.js",
      "modules": {
        "@ember/runloop": 1
      },
      "classes": {},
      "fors": {
        "@ember/runloop": 1
      },
      "namespaces": {}
    },
    "packages/@ember/service/index.js": {
      "name": "packages/@ember/service/index.js",
      "modules": {
        "@ember/service": 1
      },
      "classes": {
        "Service": 1
      },
      "fors": {
        "@ember/service": 1
      },
      "namespaces": {}
    },
    "packages/@ember/string/index.ts": {
      "name": "packages/@ember/string/index.ts",
      "modules": {
        "@ember/string": 1
      },
      "classes": {
        "String": 1
      },
      "fors": {
        "@ember/string": 1
      },
      "namespaces": {}
    },
    "packages/ember-testing/lib/adapters/adapter.js": {
      "name": "packages/ember-testing/lib/adapters/adapter.js",
      "modules": {},
      "classes": {
        "TestAdapter": 1
      },
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/adapters/qunit.js": {
      "name": "packages/ember-testing/lib/adapters/qunit.js",
      "modules": {},
      "classes": {
        "Ember.Test.QUnitAdapter": 1
      },
      "fors": {},
      "namespaces": {
        "Ember.Test": 1
      }
    },
    "packages/ember-testing/lib/ext/application.js": {
      "name": "packages/ember-testing/lib/ext/application.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/-is-form-control.js": {
      "name": "packages/ember-testing/lib/helpers/-is-form-control.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/click.js": {
      "name": "packages/ember-testing/lib/helpers/click.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/current_path.js": {
      "name": "packages/ember-testing/lib/helpers/current_path.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/current_route_name.js": {
      "name": "packages/ember-testing/lib/helpers/current_route_name.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/current_url.js": {
      "name": "packages/ember-testing/lib/helpers/current_url.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/fill_in.js": {
      "name": "packages/ember-testing/lib/helpers/fill_in.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/find.js": {
      "name": "packages/ember-testing/lib/helpers/find.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/find_with_assert.js": {
      "name": "packages/ember-testing/lib/helpers/find_with_assert.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/key_event.js": {
      "name": "packages/ember-testing/lib/helpers/key_event.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/pause_test.js": {
      "name": "packages/ember-testing/lib/helpers/pause_test.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/trigger_event.js": {
      "name": "packages/ember-testing/lib/helpers/trigger_event.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/visit.js": {
      "name": "packages/ember-testing/lib/helpers/visit.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/helpers/wait.js": {
      "name": "packages/ember-testing/lib/helpers/wait.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/test/helpers.js": {
      "name": "packages/ember-testing/lib/test/helpers.js",
      "modules": {
        "@ember/test": 1
      },
      "classes": {},
      "fors": {
        "@ember/test": 1
      },
      "namespaces": {}
    },
    "packages/ember-testing/lib/test/on_inject_helpers.js": {
      "name": "packages/ember-testing/lib/test/on_inject_helpers.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Test": 1
      },
      "namespaces": {}
    },
    "packages/ember-testing/lib/test/promise.js": {
      "name": "packages/ember-testing/lib/test/promise.js",
      "modules": {},
      "classes": {},
      "fors": {
        "Ember.Test": 1
      },
      "namespaces": {}
    },
    "packages/ember-testing/lib/test/waiters.js": {
      "name": "packages/ember-testing/lib/test/waiters.js",
      "modules": {},
      "classes": {},
      "fors": {
        "@ember/test": 1
      },
      "namespaces": {}
    },
    "packages/ember-testing/lib/setup_for_testing.js": {
      "name": "packages/ember-testing/lib/setup_for_testing.js",
      "modules": {},
      "classes": {},
      "fors": {},
      "namespaces": {
        "Ember": 1
      }
    },
    "packages/ember-testing/lib/support.js": {
      "name": "packages/ember-testing/lib/support.js",
      "modules": {
        "ember": 1
      },
      "classes": {},
      "fors": {},
      "namespaces": {}
    },
    "packages/ember-testing/lib/test.js": {
      "name": "packages/ember-testing/lib/test.js",
      "modules": {},
      "classes": {
        "Ember.Test": 1
      },
      "fors": {
        "Ember.Test": 1
      },
      "namespaces": {
        "Ember": 1
      }
    }
  },
  "modules": {
    "rsvp": {
      "name": "rsvp",
      "submodules": {},
      "elements": {},
      "classes": {
        "Promise": 1,
        "rsvp": 1,
        "EventTarget": 1
      },
      "fors": {
        "rsvp": 1,
        "EventTarget": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "node_modules/rsvp/lib/rsvp/events.js",
      "line": 12,
      "access": "public",
      "tagname": ""
    },
    "ember": {
      "name": "ember",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/array": 1,
        "Ember.Logger": 1,
        "Ember.Container": 1,
        "Ember.Registry": 1,
        "Ember.EmberENV": 1,
        "Ember.Templates.helpers": 1,
        "ComponentStateBucket": 1,
        "Ember.InjectedProperty": 1,
        "Libraries": 1,
        "Ember.ControllerMixin": 1,
        "RoutingService": 1,
        "BucketCache": 1,
        "RouteInfoWithAttributes": 1,
        "RouteInfo": 1,
        "Function": 1,
        "Ember.ProxyMixin": 1,
        "Ember.ActionHandler": 1,
        "Ember.NativeArray": 1,
        "Ember.Comparable": 1,
        "ContainerProxyMixin": 1,
        "Ember.Copyable": 1,
        "Ember.MutableEnumerable": 1,
        "RegistryProxyMixin": 1,
        "Ember.TargetActionSupport": 1,
        "Ember.Namespace": 1,
        "Ember.ActionSupport": 1,
        "Ember.ClassNamesSupport": 1,
        "Ember.TextSupport": 1,
        "Ember.ViewMixin": 1,
        "Ember.EventDispatcher": 1,
        "Ember.CoreView": 1,
        "Ember.Test.QUnitAdapter": 1,
        "Ember.Test": 1
      },
      "fors": {
        "Ember.Logger": 1,
        "Ember.EmberENV": 1,
        "Ember.Templates.components": 1,
        "Ember.Templates.helpers": 1,
        "Ember": 1,
        "@ember/object": 1,
        "Ember.ControllerMixin": 1,
        "Function": 1,
        "Ember.Test": 1
      },
      "namespaces": {
        "Ember": 1,
        "Ember.Test": 1
      },
      "tag": "module",
      "file": "packages/ember-testing/lib/test.js",
      "line": 11,
      "access": "private",
      "tagname": ""
    },
    "@ember/debug": {
      "name": "@ember/debug",
      "submodules": {
        "undefined": 1
      },
      "elements": {},
      "classes": {
        "@ember/debug": 1,
        "ContainerDebugAdapter": 1,
        "DataAdapter": 1
      },
      "fors": {
        "Ember": 1,
        "@ember/debug": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 11,
      "access": "public",
      "tagname": ""
    },
    "@ember/component": {
      "name": "@ember/component",
      "submodules": {},
      "elements": {},
      "classes": {
        "Checkbox": 1,
        "TextField": 1,
        "TextArea": 1,
        "Component": 1,
        "Helper": 1,
        "@ember/component/helper": 1
      },
      "fors": {
        "Ember.Templates.helpers": 1,
        "Ember.Templates.components": 1,
        "@ember/component/helper": 1
      },
      "namespaces": {},
      "tag": "main",
      "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "line": 45,
      "description": "[Glimmer](https://github.com/tildeio/glimmer) is a templating engine used by Ember.js that is compatible with a subset of the [Handlebars](http://handlebarsjs.com/) syntax.\n\n### Showing a property\n\nTemplates manage the flow of an application's UI, and display state (through\nthe DOM) to a user. For example, given a component with the property \"name\",\nthat component's template can use the name in several ways:\n\n```app/components/person-profile.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  name: 'Jill'\n});\n```\n\n```app/components/person-profile.hbs\n{{this.name}}\n<div>{{this.name}}</div>\n<span data-name={{this.name}}></span>\n```\n\nAny time the \"name\" property on the component changes, the DOM will be\nupdated.\n\nProperties can be chained as well:\n\n```handlebars\n{{@aUserModel.name}}\n<div>{{@listOfUsers.firstObject.name}}</div>\n```\n\n### Using Ember helpers\n\nWhen content is passed in mustaches `{{}}`, Ember will first try to find a helper\nor component with that name. For example, the `if` helper:\n\n```app/components/person-profile.hbs\n{{if this.name \"I have a name\" \"I have no name\"}}\n<span data-has-name={{if this.name true}}></span>\n```\n\nThe returned value is placed where the `{{}}` is called. The above style is\ncalled \"inline\". A second style of helper usage is called \"block\". For example:\n\n```handlebars\n{{#if this.name}}\n  I have a name\n{{else}}\n  I have no name\n{{/if}}\n```\n\nThe block form of helpers allows you to control how the UI is created based\non the values of properties.\nA third form of helper is called \"nested\". For example here the concat\nhelper will add \" Doe\" to a displayed name if the person has no last name:\n\n```handlebars\n<span data-name={{concat this.firstName (\n  if this.lastName (concat \" \" this.lastName) \"Doe\"\n)}}></span>\n```\n\nEmber's built-in helpers are described under the [Ember.Templates.helpers](/ember/release/classes/Ember.Templates.helpers)\nnamespace. Documentation on creating custom helpers can be found under\n[helper](/ember/release/functions/@ember%2Fcomponent%2Fhelper/helper) (or\nunder [Helper](/ember/release/classes/Helper) if a helper requires access to\ndependency injection).\n\n### Invoking a Component\n\nEmber components represent state to the UI of an application. Further\nreading on components can be found under [Component](/ember/release/classes/Component).",
      "itemtype": "main"
    },
    "@ember/routing": {
      "name": "@ember/routing",
      "submodules": {},
      "elements": {},
      "classes": {
        "Ember.Templates.components": 1,
        "LinkComponent": 1,
        "Location": 1,
        "AutoLocation": 1,
        "HashLocation": 1,
        "HistoryLocation": 1,
        "NoneLocation": 1,
        "RouterService": 1,
        "Route": 1,
        "EmberRouter": 1,
        "Transition": 1
      },
      "fors": {
        "Ember.Templates.helpers": 1,
        "Route": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 1
    },
    "@ember/template": {
      "name": "@ember/template",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/template": 1
      },
      "fors": {
        "@ember/template": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
      "line": 1
    },
    "@glimmer/component": {
      "name": "@glimmer/component",
      "submodules": {},
      "elements": {},
      "classes": {},
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/glimmer/lib/glimmer-component-docs.ts",
      "line": 1,
      "description": "A component is a reusable UI element that consists of a `.hbs` template and an\noptional JavaScript class that defines its behavior. For example, someone\nmight make a `button` in the template and handle the click behavior in the\nJavaScript file that shares the same name as the template.\n\nThe APIs available in a component vary depending on whether they import from\n`@glimmer/component` or the older \"classic\" type, `@ember/component`. The\ndocumentation below covers 100% of the available methods, hooks, and\nproperties of `@glimmer/component`. The source code can be found in\n[`@glimmer/component`](https://github.com/glimmerjs/glimmer.js/tree/master/packages/%40glimmer/component).\n\n## Defining a component\n\nTo define a component, subclass `Component` and add your own properties,\nmethods and lifecycle hooks:\n\n```javascript\nimport Component from '@glimmer/component';\n\nexport default class SomeComponent extends Component {\n  // your code here\n}\n```\n\n## `constructor`\n\nparams: `owner` object and `args` object\n\nConstructs a new component and assigns itself the passed properties. The\nconstructor is run whenever a new instance of the component is created, and\ncan be used to setup the initial state of the component.\n\n```javascript\nimport Component from '@glimmer/component';\n\nexport default class SomeComponent extends Component {\n  constructor(owner, args) {\n    super(owner, args);\n\n    if (this.args.displayMode === 'list') {\n      this.items = [];\n    }\n  }\n}\n```\n\nService injections and arguments are available in the constructor.\n\n```javascript\nimport Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\n\nexport default class SomeComponent extends Component {\n  @service myAnimations;\n\n  constructor(owner, args) {\n    super(owner, args);\n\n    if (this.args.fadeIn === true) {\n      this.myAnimations.register(this, 'fade-in');\n    }\n  }\n}\n```\n\n## `willDestroy`\n\n`willDestroy` is called after the component has been removed from the DOM, but\nbefore the component is fully destroyed. This lifecycle hook can be used to\ncleanup the component and any related state.\n\n```javascript\nimport Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\n\nexport default class SomeComponent extends Component {\n  @service myAnimations;\n\n  willDestroy() {\n    this.myAnimations.unregister(this);\n  }\n}\n```\n\n## `args`\n\nThe `args` property of Glimmer components is an object that contains the\n_arguments_ that are passed to the component. For instance, the\nfollowing component usage:\n\n```handlebars\n<SomeComponent @fadeIn={{true}} />\n```\n\nWould result in the following `args` object to be passed to the component:\n\n```javascript\n{ fadeIn: true }\n```\n\n`args` can be accessed at any point in the component lifecycle, including\n`constructor` and `willDestroy`. They are also automatically marked as tracked\nproperties, and they can be depended on as computed property dependencies:\n\n```javascript\nimport Component from '@glimmer/component';\nimport { computed } from '@ember/object';\n\nexport default class SomeComponent extends Component {\n\n  @computed('args.someValue')\n  get computedGetter() {\n    // updates whenever args.someValue updates\n    return this.args.someValue;\n  }\n\n  get standardGetter() {\n    // updates whenever args.anotherValue updates (Ember 3.13+)\n    return this.args.anotherValue;\n  }\n}\n```\n\n## `isDestroying`\n\nA boolean flag to tell if the component is in the process of destroying. This is set to\ntrue before `willDestroy` is called.\n\n## `isDestroyed`\nA boolean to tell if the component has been fully destroyed. This is set to true\nafter `willDestroy` is called.",
      "access": "public",
      "tagname": ""
    },
    "@glimmer/tracking": {
      "name": "@glimmer/tracking",
      "submodules": {},
      "elements": {},
      "classes": {
        "@glimmer/tracking": 1
      },
      "fors": {
        "@glimmer/tracking": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/glimmer/lib/glimmer-tracking-docs.ts",
      "line": 1,
      "description": "In order to tell Ember a value might change, we need to mark it as trackable.\nTrackable values are values that:\n\n- Can change over their component’s lifetime and\n- Should cause Ember to rerender if and when they change\n\nWe can do this by marking the field with the `@tracked` decorator.",
      "access": "public",
      "tagname": ""
    },
    "@glimmer/tracking/primitives/cache": {
      "name": "@glimmer/tracking/primitives/cache",
      "submodules": {},
      "elements": {},
      "classes": {
        "@glimmer/tracking/primitives/cache": 1
      },
      "fors": {
        "@glimmer/tracking/primitives/cache": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/metal/lib/cache.ts",
      "line": 3,
      "description": "Ember uses caching based on trackable values to avoid updating large portions\nof the application. This caching is exposed via a cache primitive that can be\nused to cache a specific computation, so that it will not update and will\nreturn the cached value until a tracked value used in its computation has\nupdated.",
      "category": [
        "EMBER_CACHE_API"
      ],
      "access": "public",
      "tagname": ""
    },
    "@ember/object": {
      "name": "@ember/object",
      "submodules": {},
      "elements": {},
      "classes": {
        "ComputedProperty": 1,
        "@ember/object": 1,
        "Descriptor": 1,
        "@ember/object/events": 1,
        "@ember/object/evented": 1,
        "@ember/object/computed": 1,
        "Mixin": 1,
        "@ember/object/mixin": 1,
        "@ember/object/observers": 1,
        "Evented": 1,
        "Observable": 1,
        "PromiseProxyMixin": 1,
        "CoreObject": 1,
        "EmberObject": 1,
        "ObjectProxy": 1,
        "@ember/object/internals": 1,
        "@ember/object/compat": 1
      },
      "fors": {
        "@ember/object": 1,
        "@ember/debug": 1,
        "@ember/object/events": 1,
        "@ember/object/evented": 1,
        "@ember/object/computed": 1,
        "@ember/object/mixin": 1,
        "@ember/object/observers": 1,
        "@ember/object/internals": 1,
        "Ember": 1,
        "@ember/object/compat": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/runtime/lib/system/object_proxy.js",
      "line": 4
    },
    "@ember/utils": {
      "name": "@ember/utils",
      "submodules": {
        "undefined": 1
      },
      "elements": {},
      "classes": {
        "Ember": 1,
        "@ember/utils": 1
      },
      "fors": {
        "@ember/utils": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/utils/lib/invoke.ts",
      "line": 23
    },
    "@ember/application": {
      "name": "@ember/application",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/application": 1,
        "Application": 1,
        "GlobalsResolver": 1,
        "ApplicationInstance": 1,
        "ApplicationInstance.BootOptions": 1
      },
      "fors": {
        "@ember/application": 1
      },
      "namespaces": {
        "ApplicationInstance": 1
      },
      "tag": "module",
      "file": "packages/@ember/application/instance.js",
      "line": 314
    },
    "@ember/array": {
      "name": "@ember/array",
      "submodules": {},
      "elements": {},
      "classes": {
        "EmberArray": 1,
        "MutableArray": 1,
        "ArrayProxy": 1
      },
      "fors": {
        "@ember/array": 1,
        "Ember": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "line": 28
    },
    "@ember/enumerable": {
      "name": "@ember/enumerable",
      "submodules": {},
      "elements": {},
      "classes": {
        "Enumerable": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/-internals/runtime/lib/mixins/enumerable.js",
      "line": 8,
      "access": "private",
      "tagname": ""
    },
    "@ember/canary-features": {
      "name": "@ember/canary-features",
      "submodules": {},
      "elements": {},
      "classes": {
        "FEATURES": 1
      },
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/canary-features/index.ts",
      "line": 27,
      "description": "Set `EmberENV.FEATURES` in your application's `config/environment.js` file\nto enable canary features in your application.\n\nSee the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)\nfor more details.",
      "access": "public",
      "tagname": ""
    },
    "@ember/component/template-only": {
      "name": "@ember/component/template-only",
      "submodules": {},
      "elements": {},
      "classes": {},
      "fors": {},
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/component/template-only.ts",
      "line": 10,
      "access": "public",
      "tagname": ""
    },
    "@ember/controller": {
      "name": "@ember/controller",
      "submodules": {},
      "elements": {},
      "classes": {
        "Controller": 1,
        "@ember/controller": 1
      },
      "fors": {
        "@ember/controller": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/controller/index.js",
      "line": 9
    },
    "@ember/destroyable": {
      "name": "@ember/destroyable",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/destroyable": 1
      },
      "fors": {
        "@ember/destroyable": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/destroyable/index.ts",
      "line": 15,
      "description": "Ember manages the lifecycles and lifetimes of many built in constructs, such\nas components, and does so in a hierarchical way - when a parent component is\ndestroyed, all of its children are destroyed as well.\n\nThis destroyables API exposes the basic building blocks for destruction:\n\n* registering a function to be ran when an object is destroyyed\n* checking if an object is in a destroying state\n* associate an object as a child of another so that the child object will be destroyed\n  when the associated parent object is destroyed.",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "access": "public",
      "tagname": ""
    },
    "@ember/engine": {
      "name": "@ember/engine",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/engine": 1,
        "Engine": 1,
        "EngineInstance": 1
      },
      "fors": {
        "@ember/engine": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/engine/instance.js",
      "line": 17
    },
    "@ember/error": {
      "name": "@ember/error",
      "submodules": {},
      "elements": {},
      "classes": {
        "Ember.Error": 1
      },
      "fors": {},
      "namespaces": {
        "Ember": 1
      },
      "tag": "module",
      "file": "packages/@ember/error/index.ts",
      "line": 5
    },
    "@ember/instrumentation": {
      "name": "@ember/instrumentation",
      "submodules": {},
      "elements": {},
      "classes": {
        "Instrumentation": 1,
        "@ember/instrumentation": 1
      },
      "fors": {
        "@ember/instrumentation": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/instrumentation/index.ts",
      "line": 39,
      "access": "private",
      "tagname": ""
    },
    "@ember/polyfills": {
      "name": "@ember/polyfills",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/polyfills": 1
      },
      "fors": {
        "@ember/polyfills": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/polyfills/lib/assign.ts",
      "line": 1
    },
    "@ember/runloop": {
      "name": "@ember/runloop",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/runloop": 1
      },
      "fors": {
        "@ember/runloop": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/runloop/index.js",
      "line": 67
    },
    "@ember/service": {
      "name": "@ember/service",
      "submodules": {},
      "elements": {},
      "classes": {
        "@ember/service": 1,
        "Service": 1
      },
      "fors": {
        "@ember/service": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/service/index.js",
      "line": 60,
      "access": "public",
      "tagname": ""
    },
    "@ember/string": {
      "name": "@ember/string",
      "submodules": {},
      "elements": {},
      "classes": {
        "String": 1,
        "@ember/string": 1
      },
      "fors": {
        "@ember/string": 1
      },
      "namespaces": {},
      "tag": "module",
      "file": "packages/@ember/string/index.ts",
      "line": 68
    },
    "@ember/test": {
      "name": "@ember/test",
      "submodules": {},
      "elements": {},
      "classes": {
        "TestAdapter": 1,
        "@ember/test": 1
      },
      "fors": {
        "@ember/test": 1,
        "Ember.Test": 1
      },
      "namespaces": {
        "Ember": 1
      },
      "tag": "module",
      "file": "packages/ember-testing/lib/adapters/adapter.js",
      "line": 11
    }
  },
  "classes": {
    "Promise": {
      "name": "Promise",
      "shortname": "Promise",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "rsvp",
      "file": "node_modules/rsvp/lib/rsvp/promise.js",
      "line": 26,
      "description": "Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its `then` method, which\nregisters callbacks to receive either a promise’s eventual value or the reason\nwhy the promise cannot be fulfilled.\n\nTerminology\n-----------\n\n- `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n- `thenable` is an object or function that defines a `then` method.\n- `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n- `exception` is a value that is thrown using the throw statement.\n- `reason` is a value that indicates why a promise was rejected.\n- `settled` the final resting state of a promise, fulfilled or rejected.\n\nA promise can be in one of three states: pending, fulfilled, or rejected.\n\nPromises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.\n\nPromises can also be said to *resolve* a value.  If this value is also a\npromise, then the original promise's settled state will match the value's\nsettled state.  So a promise that *resolves* a promise that rejects will\nitself reject, and a promise that *resolves* a promise that fulfills will\nitself fulfill.\n\n\nBasic Usage:\n------------\n\n```js\nlet promise = new Promise(function(resolve, reject) {\n  // on success\n  resolve(value);\n\n  // on failure\n  reject(reason);\n});\n\npromise.then(function(value) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nAdvanced Usage:\n---------------\n\nPromises shine when abstracting away asynchronous interactions such as\n`XMLHttpRequest`s.\n\n```js\nfunction getJSON(url) {\n  return new Promise(function(resolve, reject){\n    let xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n\n    function handler() {\n      if (this.readyState === this.DONE) {\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n        }\n      }\n    };\n  });\n}\n\ngetJSON('/posts.json').then(function(json) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nUnlike callbacks, promises are great composable primitives.\n\n```js\nPromise.all([\n  getJSON('/posts'),\n  getJSON('/comments')\n]).then(function(values){\n  values[0] // => postsJSON\n  values[1] // => commentsJSON\n\n  return values;\n});\n```",
      "access": "public",
      "tagname": "",
      "params": [
        {
          "name": "resolver",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "is_constructor": 1
    },
    "rsvp": {
      "name": "rsvp",
      "shortname": "rsvp",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "rsvp",
      "namespace": ""
    },
    "EventTarget": {
      "name": "EventTarget",
      "shortname": "EventTarget",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "rsvp",
      "namespace": "",
      "file": "node_modules/rsvp/lib/rsvp/events.js",
      "line": 12,
      "access": "public",
      "tagname": ""
    },
    "Ember.Logger": {
      "name": "Ember.Logger",
      "shortname": "Ember.Logger",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/console/index.js",
      "line": 14,
      "description": "Inside Ember-Metal, simply uses the methods from `imports.console`.\nOverride this to provide more robust logging functionality.",
      "deprecated": true,
      "deprecationMessage": "Use 'console' instead",
      "access": "public",
      "tagname": ""
    },
    "Ember.Container": {
      "name": "Ember.Container",
      "shortname": "Container",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 60,
      "description": "A container used to instantiate and cache objects.\n\nEvery `Container` must be associated with a `Registry`, which is referenced\nto determine the factory and options that should be used to instantiate\nobjects.\n\nThe public API for `Container` is still in flux and should not be considered\nstable.",
      "access": "private",
      "tagname": ""
    },
    "Ember.Registry": {
      "name": "Ember.Registry",
      "shortname": "Registry",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 84,
      "description": "A registry used to store factory and option information keyed\nby type.\n\nA `Registry` stores the factory and option information needed by a\n`Container` to instantiate and cache objects.\n\nThe API for `Registry` is still in flux and should not be considered stable.",
      "access": "private",
      "tagname": "",
      "since": "1.11.0"
    },
    "Ember.EmberENV": {
      "name": "Ember.EmberENV",
      "shortname": "EmberENV",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 5,
      "description": "The hash of environment variables used to control various configuration\nsettings. To specify your own or override default settings, add the\ndesired properties to a global hash named `EmberENV` (or `ENV` for\nbackwards compatibility with earlier versions of Ember). The `EmberENV`\nhash must be created before loading Ember.",
      "type": "Object",
      "access": "public",
      "tagname": ""
    },
    "ContainerDebugAdapter": {
      "name": "ContainerDebugAdapter",
      "shortname": "ContainerDebugAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/debug",
      "namespace": "",
      "file": "packages/@ember/-internals/extension-support/lib/container_debug_adapter.js",
      "line": 8,
      "description": "The `ContainerDebugAdapter` helps the container and resolver interface\nwith tools that debug Ember such as the\n[Ember Inspector](https://github.com/emberjs/ember-inspector)\nfor Chrome and Firefox.\n\nThis class can be extended by a custom resolver implementer\nto override some of the methods with library-specific code.\n\nThe methods likely to be overridden are:\n\n* `canCatalogEntriesByType`\n* `catalogEntriesByType`\n\nThe adapter will need to be registered\nin the application's container as `container-debug-adapter:main`.\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"containerDebugAdapter\",\n\n  initialize(application) {\n    application.register('container-debug-adapter:main', require('app/container-debug-adapter'));\n  }\n});\n```",
      "extends": "EmberObject",
      "since": "1.5.0",
      "access": "public",
      "tagname": ""
    },
    "DataAdapter": {
      "name": "DataAdapter",
      "shortname": "DataAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/debug",
      "namespace": "",
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 11,
      "description": "The `DataAdapter` helps a data persistence library\ninterface with tools that debug Ember such\nas the [Ember Inspector](https://github.com/emberjs/ember-inspector)\nfor Chrome and Firefox.\n\nThis class will be extended by a persistence library\nwhich will override some of the methods with\nlibrary-specific code.\n\nThe methods likely to be overridden are:\n\n* `getFilters`\n* `detect`\n* `columnsForType`\n* `getRecords`\n* `getRecordColumnValues`\n* `getRecordKeywords`\n* `getRecordFilterValues`\n* `getRecordColor`\n* `observeRecord`\n\nThe adapter will need to be registered\nin the application's container as `dataAdapter:main`.\n\nExample:\n\n```javascript\nApplication.initializer({\n  name: \"data-adapter\",\n\n  initialize: function(application) {\n    application.register('data-adapter:main', DS.DataAdapter);\n  }\n});\n```",
      "extends": "EmberObject",
      "access": "public",
      "tagname": ""
    },
    "Checkbox": {
      "name": "Checkbox",
      "shortname": "Checkbox",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 11,
      "description": "The internal class used to create text inputs when the `{{input}}`\nhelper is used with `type` of `checkbox`.\n\nSee [Ember.Templates.helpers.input](/ember/release/classes/Ember.Templates.helpers/methods/input?anchor=input)  for usage details.\n\n## Direct manipulation of `checked`\n\nThe `checked` attribute of an `Checkbox` object should always be set\nthrough the Ember object or by interacting with its rendered element\nrepresentation via the mouse, keyboard, or touch. Updating the value of the\ncheckbox via jQuery will result in the checked value of the object and its\nelement losing synchronization.\n\n## Layout and LayoutName properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties will not be applied.",
      "extends": "Component",
      "access": "public",
      "tagname": ""
    },
    "Ember.Templates.helpers": {
      "name": "Ember.Templates.helpers",
      "shortname": "Ember.Templates.helpers",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 86,
      "access": "public",
      "tagname": ""
    },
    "Ember.Templates.components": {
      "name": "Ember.Templates.components",
      "shortname": "Ember.Templates.components",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": ""
    },
    "LinkComponent": {
      "name": "LinkComponent",
      "shortname": "LinkComponent",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 271,
      "description": "`LinkComponent` is the internal component invoked with `<LinkTo>` or `{{link-to}}`.",
      "extends": "Component",
      "see": [
        "{Ember.Templates.components.LinkTo}"
      ],
      "access": "public",
      "tagname": ""
    },
    "TextField": {
      "name": "TextField",
      "shortname": "TextField",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 33,
      "description": "The internal class used to create text inputs when the `Input` component is used with `type` of `text`.\n\nSee [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input) for usage details.\n\n## Layout and LayoutName properties\n\nBecause HTML `input` elements are self closing `layout` and `layoutName`\nproperties will not be applied.",
      "extends": "Component",
      "uses": [
        "Ember.TextSupport"
      ],
      "access": "public",
      "tagname": ""
    },
    "TextArea": {
      "name": "TextArea",
      "shortname": "TextArea",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
      "line": 131,
      "description": "The internal representation used for `Textarea` invocations.",
      "extends": "Component",
      "see": [
        "{Ember.Templates.components.Textarea}"
      ],
      "uses": [
        "Ember.TextSupport"
      ],
      "access": "public",
      "tagname": ""
    },
    "ComponentStateBucket": {
      "name": "ComponentStateBucket",
      "shortname": "ComponentStateBucket",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/utils/curly-component-state-bucket.ts",
      "line": 36,
      "description": "Represents the internal state of the component.",
      "access": "private",
      "tagname": ""
    },
    "@ember/template": {
      "name": "@ember/template",
      "shortname": "@ember/template",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/template",
      "namespace": ""
    },
    "Component": {
      "name": "Component",
      "shortname": "Component",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 32,
      "description": "A component is an isolated piece of UI, represented by a template and an\noptional class. When a component has a class, its template's `this` value\nis an instance of the component class.\n\n## Template-only Components\n\nThe simplest way to create a component is to create a template file in\n`app/templates/components`. For example, if you name a template\n`app/templates/components/person-profile.hbs`:\n\n```app/templates/components/person-profile.hbs\n<h1>{{@person.name}}</h1>\n<img src={{@person.avatar}}>\n<p class='signature'>{{@person.signature}}</p>\n```\n\nYou will be able to use `<PersonProfile />` to invoke this component elsewhere\nin your application:\n\n```app/templates/application.hbs\n<PersonProfile @person={{this.currentUser}} />\n```\n\nNote that component names are capitalized here in order to distinguish them\nfrom regular HTML elements, but they are dasherized in the file system.\n\nWhile the angle bracket invocation form is generally preferred, it is also\npossible to invoke the same component with the `{{person-profile}}` syntax:\n\n```app/templates/application.hbs\n{{person-profile person=this.currentUser}}\n```\n\nNote that with this syntax, you use dashes in the component name and\narguments are passed without the `@` sign.\n\nIn both cases, Ember will render the content of the component template we\ncreated above. The end result will be something like this:\n\n```html\n<h1>Tomster</h1>\n<img src=\"https://emberjs.com/tomster.jpg\">\n<p class='signature'>Out of office this week</p>\n```\n\n## File System Nesting\n\nComponents can be nested inside sub-folders for logical groupping. For\nexample, if we placed our template in\n`app/templates/components/person/short-profile.hbs`, we can invoke it as\n`<Person::ShortProfile />`:\n\n```app/templates/application.hbs\n<Person::ShortProfile @person={{this.currentUser}} />\n```\n\nOr equivalently, `{{person/short-profile}}`:\n\n```app/templates/application.hbs\n{{person/short-profile person=this.currentUser}}\n```\n\n## Yielding Contents\n\nYou can use `yield` inside a template to include the **contents** of any block\nattached to the component. The block will be executed in its original context:\n\n```handlebars\n<PersonProfile @person={{this.currentUser}}>\n  <p>Admin mode</p>\n  {{! Executed in the current context. }}\n</PersonProfile>\n```\n\nor\n\n```handlebars\n{{#person-profile person=this.currentUser}}\n  <p>Admin mode</p>\n  {{! Executed in the current context. }}\n{{/person-profile}}\n```\n\n```app/templates/components/person-profile.hbs\n<h1>{{@person.name}}</h1>\n{{yield}}\n```\n\n## Customizing Components With JavaScript\n\nIf you want to customize the component in order to handle events, transform\narguments or maintain internal state, you implement a subclass of `Component`.\n\nOne example is to add computed properties to your component:\n\n```app/components/person-profile.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  displayName: computed('person.title', 'person.firstName', 'person.lastName', function() {\n    let { title, firstName, lastName } = this;\n\n    if (title) {\n      return `${title} ${lastName}`;\n    } else {\n      return `${firstName} ${lastName}`;\n    }\n  })\n});\n```\n\nAnd then use it in the component's template:\n\n```app/templates/components/person-profile.hbs\n<h1>{{this.displayName}}</h1>\n{{yield}}\n```\n\n## Customizing a Component's HTML Element in JavaScript\n\n### HTML Tag\n\nThe default HTML tag name used for a component's HTML representation is `div`.\nThis can be customized by setting the `tagName` property.\n\nConsider the following component class:\n\n```app/components/emphasized-paragraph.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'em'\n});\n```\n\nWhen invoked, this component would produce output that looks something like\nthis:\n\n```html\n<em id=\"ember1\" class=\"ember-view\"></em>\n```\n\n### HTML `class` Attribute\n\nThe HTML `class` attribute of a component's tag can be set by providing a\n`classNames` property that is set to an array of strings:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNames: ['my-class', 'my-other-class']\n});\n```\n\nInvoking this component will produce output that looks like this:\n\n```html\n<div id=\"ember1\" class=\"ember-view my-class my-other-class\"></div>\n```\n\n`class` attribute values can also be set by providing a `classNameBindings`\nproperty set to an array of properties names for the component. The return\nvalue of these properties will be added as part of the value for the\ncomponents's `class` attribute. These properties can be computed properties:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\nimport { computed } from '@ember/object';\n\nexport default Component.extend({\n  classNames: ['my-class', 'my-other-class'],\n  classNameBindings: ['propertyA', 'propertyB'],\n\n  propertyA: 'from-a',\n  propertyB: computed(function() {\n    if (someLogic) { return 'from-b'; }\n  })\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view my-class my-other-class from-a from-b\"></div>\n```\n\nNote that `classNames` and `classNameBindings` is in addition to the `class`\nattribute passed with the angle bracket invocation syntax. Therefore, if this\ncomponent was invoked like so:\n\n```handlebars\n<MyWidget class=\"from-invocation\" />\n```\n\nThe resulting HTML will look similar to this:\n\n```html\n<div id=\"ember1\" class=\"from-invocation ember-view my-class my-other-class from-a from-b\"></div>\n```\n\nIf the value of a class name binding returns a boolean the property name\nitself will be used as the class name if the property is true. The class name\nwill not be added if the value is `false` or `undefined`.\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['hovered'],\n\n  hovered: true\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view hovered\"></div>\n```\n\n### Custom Class Names for Boolean Values\n\nWhen using boolean class name bindings you can supply a string value other\nthan the property name for use as the `class` HTML attribute by appending the\npreferred value after a \":\" character when defining the binding:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['awesome:so-very-cool'],\n\n  awesome: true\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view so-very-cool\"></div>\n```\n\nBoolean value class name bindings whose property names are in a\ncamelCase-style format will be converted to a dasherized format:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['isUrgent'],\n\n  isUrgent: true\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view is-urgent\"></div>\n```\n\nClass name bindings can also refer to object values that are found by\ntraversing a path relative to the component itself:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\nimport EmberObject from '@ember/object';\n\nexport default Component.extend({\n  classNameBindings: ['messages.empty'],\n\n  messages: EmberObject.create({\n    empty: true\n  })\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view empty\"></div>\n```\n\nIf you want to add a class name for a property which evaluates to true and\nand a different class name if it evaluates to false, you can pass a binding\nlike this:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  classNameBindings: ['isEnabled:enabled:disabled'],\n  isEnabled: true\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view enabled\"></div>\n```\n\nWhen isEnabled is `false`, the resulting HTML representation looks like this:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nThis syntax offers the convenience to add a class if a property is `false`:\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\n// Applies no class when isEnabled is true and class 'disabled' when isEnabled is false\nexport default Component.extend({\n  classNameBindings: ['isEnabled::disabled'],\n  isEnabled: true\n});\n```\n\nInvoking this component when the `isEnabled` property is true will produce\nHTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view\"></div>\n```\n\nInvoking it when the `isEnabled` property on the component is `false` will\nproduce HTML that looks like:\n\n```html\n<div id=\"ember1\" class=\"ember-view disabled\"></div>\n```\n\nUpdates to the value of a class name binding will result in automatic update\nof the  HTML `class` attribute in the component's rendered HTML\nrepresentation. If the value becomes `false` or `undefined` the class name\nwill be removed.\n\nBoth `classNames` and `classNameBindings` are concatenated properties. See\n[EmberObject](/ember/release/classes/EmberObject) documentation for more\ninformation about concatenated properties.\n\n### Other HTML Attributes\n\nThe HTML attribute section of a component's tag can be set by providing an\n`attributeBindings` property set to an array of property names on the component.\nThe return value of these properties will be used as the value of the component's\nHTML associated attribute:\n\n```app/components/my-anchor.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'a',\n  attributeBindings: ['href'],\n\n  href: 'http://google.com'\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nOne property can be mapped on to another by placing a \":\" between\nthe source property and the destination property:\n\n```app/components/my-anchor.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'a',\n  attributeBindings: ['url:href'],\n\n  url: 'http://google.com'\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://google.com\"></a>\n```\n\nHTML attributes passed with angle bracket invocations will take precedence\nover those specified in `attributeBindings`. Therefore, if this component was\ninvoked like so:\n\n```handlebars\n<MyAnchor href=\"http://bing.com\" @url=\"http://google.com\" />\n```\n\nThe resulting HTML will looks like this:\n\n```html\n<a id=\"ember1\" class=\"ember-view\" href=\"http://bing.com\"></a>\n```\n\nNote that the `href` attribute is ultimately set to `http://bing.com`,\ndespite it having attribute binidng to the `url` property, which was\nset to `http://google.com`.\n\nNamespaced attributes (e.g. `xlink:href`) are supported, but have to be\nmapped, since `:` is not a valid character for properties in Javascript:\n\n```app/components/my-use.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'use',\n  attributeBindings: ['xlinkHref:xlink:href'],\n\n  xlinkHref: '#triangle'\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<use xlink:href=\"#triangle\"></use>\n```\n\nIf the value of a property monitored by `attributeBindings` is a boolean, the\nattribute will be present or absent depending on the value:\n\n```app/components/my-text-input.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n\n  disabled: false\n});\n```\n\nInvoking this component will produce HTML that looks like:\n\n```html\n<input id=\"ember1\" class=\"ember-view\" />\n```\n\n`attributeBindings` can refer to computed properties:\n\n```app/components/my-text-input.js\nimport Component from '@ember/component';\nimport { computed } from '@ember/object';\n\nexport default Component.extend({\n  tagName: 'input',\n  attributeBindings: ['disabled'],\n\n  disabled: computed(function() {\n    if (someLogic) {\n      return true;\n    } else {\n      return false;\n    }\n  })\n});\n```\n\nTo prevent setting an attribute altogether, use `null` or `undefined` as the\nvalue of the property used in `attributeBindings`:\n\n```app/components/my-text-input.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  tagName: 'form',\n  attributeBindings: ['novalidate'],\n  novalidate: null\n});\n```\n\nUpdates to the property of an attribute binding will result in automatic\nupdate of the  HTML attribute in the component's HTML output.\n\n`attributeBindings` is a concatenated property. See\n[EmberObject](/ember/release/classes/EmberObject) documentation for more\ninformation about concatenated properties.\n\n## Layouts\n\nThe `layout` property can be used to dynamically specify a template associated\nwith a component class, instead of relying on Ember to link together a\ncomponent class and a template based on file names.\n\nIn general, applications should not use this feature, but it's commonly used\nin addons for historical reasons.\n\nThe `layout` property should be set to the default export of a template\nmodule, which is the name of a template file without the `.hbs` extension.\n\n```app/templates/components/person-profile.hbs\n<h1>Person's Title</h1>\n<div class='details'>{{yield}}</div>\n```\n\n```app/components/person-profile.js\n  import Component from '@ember/component';\n  import layout from '../templates/components/person-profile';\n\n  export default Component.extend({\n    layout\n  });\n```\n\nIf you invoke the component:\n\n```handlebars\n<PersonProfile>\n  <h2>Chief Basket Weaver</h2>\n  <h3>Fisherman Industries</h3>\n</PersonProfile>\n```\n\nor\n\n```handlebars\n{{#person-profile}}\n  <h2>Chief Basket Weaver</h2>\n  <h3>Fisherman Industries</h3>\n{{/person-profile}}\n```\n\nIt will result in the following HTML output:\n\n```html\n<h1>Person's Title</h1>\n  <div class=\"details\">\n  <h2>Chief Basket Weaver</h2>\n  <h3>Fisherman Industries</h3>\n</div>\n```\n\n## Handling Browser Events\n\nComponents can respond to user-initiated events in one of three ways: passing\nactions with angle bracket invocation, adding event handler methods to the\ncomponent's class, or adding actions to the component's template.\n\n### Passing Actions With Angle Bracket Invocation\n\nFor one-off events specific to particular instance of a component, it is possible\nto pass actions to the component's element using angle bracket invocation syntax.\n\n```handlebars\n<MyWidget {{action 'firstWidgetClicked'}} />\n\n<MyWidget {{action 'secondWidgetClicked'}} />\n```\n\nIn this case, when the first component is clicked on, Ember will invoke the\n`firstWidgetClicked` action. When the second component is clicked on, Ember\nwill invoke the `secondWidgetClicked` action instead.\n\nBesides `{{action}}`, it is also possible to pass any arbitrary element modifiers\nusing the angle bracket invocation syntax.\n\n### Event Handler Methods\n\nComponents can also respond to user-initiated events by implementing a method\nthat matches the event name. This approach is appropriate when the same event\nshould be handled by all instances of the same component.\n\nAn event object will be passed as the argument to the event handler method.\n\n```app/components/my-widget.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click(event) {\n    // `event.target` is either the component's element or one of its children\n    let tag = event.target.tagName.toLowerCase();\n    console.log('clicked on a `<${tag}>` HTML element!');\n  }\n});\n```\n\nIn this example, whenever the user clicked anywhere inside the component, it\nwill log a message to the console.\n\nIt is possible to handle event types other than `click` by implementing the\nfollowing event handler methods. In addition, custom events can be registered\nby using `Application.customEvents`.\n\nTouch events:\n\n* `touchStart`\n* `touchMove`\n* `touchEnd`\n* `touchCancel`\n\nKeyboard events:\n\n* `keyDown`\n* `keyUp`\n* `keyPress`\n\nMouse events:\n\n* `mouseDown`\n* `mouseUp`\n* `contextMenu`\n* `click`\n* `doubleClick`\n* `focusIn`\n* `focusOut`\n\nForm events:\n\n* `submit`\n* `change`\n* `focusIn`\n* `focusOut`\n* `input`\n\nDrag and drop events:\n\n* `dragStart`\n* `drag`\n* `dragEnter`\n* `dragLeave`\n* `dragOver`\n* `dragEnd`\n* `drop`\n\n### `{{action}}` Helper\n\nInstead of handling all events of a particular type anywhere inside the\ncomponent's element, you may instead want to limit it to a particular\nelement in the component's template. In this case, it would be more\nconvenient to implement an action instead.\n\nFor example, you could implement the action `hello` for the `person-profile`\ncomponent:\n\n```app/components/person-profile.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  actions: {\n    hello(name) {\n      console.log(\"Hello\", name);\n    }\n  }\n});\n```\n\nAnd then use it in the component's template:\n\n```app/templates/components/person-profile.hbs\n<h1>{{@person.name}}</h1>\n\n<button {{action 'hello' @person.name}}>\n  Say Hello to {{@person.name}}\n</button>\n```\n\nWhen the user clicks the button, Ember will invoke the `hello` action,\npassing in the current value of `@person.name` as an argument.\n\nSee [Ember.Templates.helpers.action](/ember/release/classes/Ember.Templates.helpers/methods/action?anchor=action).",
      "extends": "Ember.CoreView",
      "uses": [
        "Ember.TargetActionSupport",
        "Ember.ClassNamesSupport",
        "Ember.ActionSupport",
        "Ember.ViewMixin",
        "Ember.ViewStateSupport"
      ],
      "access": "public",
      "tagname": ""
    },
    "@glimmer/tracking": {
      "name": "@glimmer/tracking",
      "shortname": "@glimmer/tracking",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@glimmer/tracking",
      "namespace": ""
    },
    "Helper": {
      "name": "Helper",
      "shortname": "Helper",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": "",
      "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "line": 45,
      "description": "Ember Helpers are functions that can compute values, and are used in templates.\nFor example, this code calls a helper named `format-currency`:\n\n```app/templates/application.hbs\n<Cost @cents={{230}} />\n```\n\n```app/components/cost.hbs\n<div>{{format-currency @cents currency=\"$\"}}</div>\n```\n\nAdditionally a helper can be called as a nested helper.\nIn this example, we show the formatted currency value if the `showMoney`\nnamed argument is truthy.\n\n```handlebars\n{{if @showMoney (format-currency @cents currency=\"$\")}}\n```\n\nHelpers defined using a class must provide a `compute` function. For example:\n\n```app/helpers/format-currency.js\nimport Helper from '@ember/component/helper';\n\nexport default class extends Helper {\n  compute([cents], { currency }) {\n    return `${currency}${cents * 0.01}`;\n  }\n}\n```\n\nEach time the input to a helper changes, the `compute` function will be\ncalled again.\n\nAs instances, these helpers also have access to the container and will accept\ninjected dependencies.\n\nAdditionally, class helpers can call `recompute` to force a new computation.",
      "access": "public",
      "tagname": "",
      "since": "1.13.0"
    },
    "@ember/component/helper": {
      "name": "@ember/component/helper",
      "shortname": "@ember/component/helper",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/component",
      "namespace": ""
    },
    "Ember": {
      "name": "Ember",
      "shortname": "Ember",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/utils",
      "namespace": ""
    },
    "@glimmer/tracking/primitives/cache": {
      "name": "@glimmer/tracking/primitives/cache",
      "shortname": "@glimmer/tracking/primitives/cache",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@glimmer/tracking/primitives/cache",
      "namespace": ""
    },
    "ComputedProperty": {
      "name": "ComputedProperty",
      "shortname": "ComputedProperty",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 57,
      "description": "`@computed` is a decorator that turns a JavaScript getter and setter into a\ncomputed property, which is a _cached, trackable value_. By default the getter\nwill only be called once and the result will be cached. You can specify\nvarious properties that your computed property depends on. This will force the\ncached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.\n\nIn the following example we decorate a getter - `fullName` -  by calling\n`computed` with the property dependencies (`firstName` and `lastName`) as\narguments. The `fullName` getter will be called once (regardless of how many\ntimes it is accessed) as long as its dependencies do not change. Once\n`firstName` or `lastName` are updated any future calls to `fullName` will\nincorporate the new values, and any watchers of the value such as templates\nwill be updated:\n\n```javascript\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n});\n\nlet tom = new Person('Tom', 'Dale');\n\ntom.fullName; // 'Tom Dale'\n```\n\nYou can also provide a setter, which will be used when updating the computed\nproperty. Ember's `set` function must be used to update the property\nsince it will also notify observers of the property:\n\n```javascript\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  set fullName(value) {\n    let [firstName, lastName] = value.split(' ');\n\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n});\n\nlet person = new Person();\n\nset(person, 'fullName', 'Peter Wagenet');\nperson.firstName; // 'Peter'\nperson.lastName;  // 'Wagenet'\n```\n\nYou can also pass a getter function or object with `get` and `set` functions\nas the last argument to the computed decorator. This allows you to define\ncomputed property _macros_:\n\n```js\nimport { computed } from '@ember/object';\n\nfunction join(...keys) {\n  return computed(...keys, function() {\n    return keys.map(key => this[key]).join(' ');\n  });\n}\n\nclass Person {\n  @join('firstName', 'lastName')\n  fullName;\n}\n```\n\nNote that when defined this way, getters and setters receive the _key_ of the\nproperty they are decorating as the first argument. Setters receive the value\nthey are setting to as the second argument instead. Additionally, setters must\n_return_ the value that should be cached:\n\n```javascript\nimport { computed, set } from '@ember/object';\n\nfunction fullNameMacro(firstNameKey, lastNameKey) {\n  return computed(firstNameKey, lastNameKey, {\n    get() {\n      return `${this[firstNameKey]} ${this[lastNameKey]}`;\n    }\n\n    set(key, value) {\n      let [firstName, lastName] = value.split(' ');\n\n      set(this, firstNameKey, firstName);\n      set(this, lastNameKey, lastName);\n\n      return value;\n    }\n  });\n}\n\nclass Person {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @fullNameMacro('firstName', 'lastName') fullName;\n});\n\nlet person = new Person();\n\nset(person, 'fullName', 'Peter Wagenet');\nperson.firstName; // 'Peter'\nperson.lastName;  // 'Wagenet'\n```\n\nComputed properties can also be used in classic classes. To do this, we\nprovide the getter and setter as the last argument like we would for a macro,\nand we assign it to a property on the class definition. This is an _anonymous_\ncomputed macro:\n\n```javascript\nimport EmberObject, { computed, set } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  // these will be supplied by `create`\n  firstName: null,\n  lastName: null,\n\n  fullName: computed('firstName', 'lastName', {\n    get() {\n      return `${this.firstName} ${this.lastName}`;\n    }\n\n    set(key, value) {\n      let [firstName, lastName] = value.split(' ');\n\n      set(this, 'firstName', firstName);\n      set(this, 'lastName', lastName);\n\n      return value;\n    }\n  })\n});\n\nlet tom = Person.create({\n  firstName: 'Tom',\n  lastName: 'Dale'\n});\n\ntom.get('fullName') // 'Tom Dale'\n```\n\nYou can overwrite computed property without setters with a normal property (no\nlonger computed) that won't change if dependencies change. You can also mark\ncomputed property as `.readOnly()` and block all attempts to set it.\n\n```javascript\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @computed('firstName', 'lastName').readOnly()\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n});\n\nlet person = new Person();\nperson.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property \"fullName\" on object: <(...):emberXXX>\n```\n\nAdditional resources:\n- [Decorators RFC](https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md)\n- [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)\n- [New computed syntax explained in \"Ember 1.12 released\" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)",
      "access": "public",
      "tagname": ""
    },
    "@ember/object": {
      "name": "@ember/object",
      "shortname": "@ember/object",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "@ember/debug": {
      "name": "@ember/debug",
      "shortname": "@ember/debug",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/debug",
      "namespace": ""
    },
    "Descriptor": {
      "name": "Descriptor",
      "shortname": "Descriptor",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/metal/lib/decorator.ts",
      "line": 42,
      "description": "Objects of this type can implement an interface to respond to requests to\nget and set. The default implementation handles simple properties.",
      "access": "private",
      "tagname": ""
    },
    "@ember/object/events": {
      "name": "@ember/object/events",
      "shortname": "@ember/object/events",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "@ember/object/evented": {
      "name": "@ember/object/evented",
      "shortname": "@ember/object/evented",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "@ember/object/computed": {
      "name": "@ember/object/computed",
      "shortname": "@ember/object/computed",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "Ember.InjectedProperty": {
      "name": "Ember.InjectedProperty",
      "shortname": "Ember.InjectedProperty",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/metal/lib/injected_property.ts",
      "line": 24,
      "description": "Read-only property that returns the result of a container lookup.",
      "is_constructor": 1,
      "params": [
        {
          "name": "type",
          "description": "The container type the property will lookup",
          "type": "String"
        },
        {
          "name": "nameOrDesc",
          "description": "(optional) The name the property will lookup, defaults\n       to the property's name",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": ""
    },
    "@ember/utils": {
      "name": "@ember/utils",
      "shortname": "@ember/utils",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/utils",
      "namespace": ""
    },
    "Libraries": {
      "name": "Libraries",
      "shortname": "Libraries",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/metal/lib/libraries.ts",
      "line": 15,
      "description": "Helper class that allows you to register your library with Ember.\n\nSingleton created at `Ember.libraries`.",
      "is_constructor": 1,
      "access": "private",
      "tagname": ""
    },
    "Mixin": {
      "name": "Mixin",
      "shortname": "Mixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 479,
      "description": "The `Mixin` class allows you to create mixins, whose properties can be\nadded to other classes. For instance,\n\n```javascript\nimport Mixin from '@ember/object/mixin';\n\nconst EditableMixin = Mixin.create({\n  edit() {\n    console.log('starting to edit');\n    this.set('isEditing', true);\n  },\n  isEditing: false\n});\n```\n\n```javascript\nimport EmberObject from '@ember/object';\nimport EditableMixin from '../mixins/editable';\n\n// Mix mixins into classes by passing them as the first arguments to\n// `.extend.`\nconst Comment = EmberObject.extend(EditableMixin, {\n  post: null\n});\n\nlet comment = Comment.create({\n  post: somePost\n});\n\ncomment.edit(); // outputs 'starting to edit'\n```\n\nNote that Mixins are created with `Mixin.create`, not\n`Mixin.extend`.\n\nNote that mixins extend a constructor's prototype so arrays and object literals\ndefined as properties will be shared amongst objects that implement the mixin.\nIf you want to define a property in a mixin that is not shared, you can define\nit either as a computed property or have it be created on initialization of the object.\n\n```javascript\n// filters array will be shared amongst any object implementing mixin\nimport Mixin from '@ember/object/mixin';\nimport { A } from '@ember/array';\n\nconst FilterableMixin = Mixin.create({\n  filters: A()\n});\n```\n\n```javascript\nimport Mixin from '@ember/object/mixin';\nimport { A } from '@ember/array';\nimport { computed } from '@ember/object';\n\n// filters will be a separate array for every object implementing the mixin\nconst FilterableMixin = Mixin.create({\n  filters: computed(function() {\n    return A();\n  })\n});\n```\n\n```javascript\nimport Mixin from '@ember/object/mixin';\nimport { A } from '@ember/array';\n\n// filters will be created as a separate array during the object's initialization\nconst Filterable = Mixin.create({\n  filters: null,\n\n  init() {\n    this._super(...arguments);\n    this.set(\"filters\", A());\n  }\n});\n```",
      "access": "public",
      "tagname": ""
    },
    "@ember/object/mixin": {
      "name": "@ember/object/mixin",
      "shortname": "@ember/object/mixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "@ember/object/observers": {
      "name": "@ember/object/observers",
      "shortname": "@ember/object/observers",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "@ember/application": {
      "name": "@ember/application",
      "shortname": "@ember/application",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": ""
    },
    "Ember.ControllerMixin": {
      "name": "Ember.ControllerMixin",
      "shortname": "Ember.ControllerMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Controller"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/controller/lib/controller_mixin.js",
      "line": 11,
      "uses": [
        "Ember.ActionHandler"
      ],
      "access": "private",
      "tagname": ""
    },
    "Location": {
      "name": "Location",
      "shortname": "Location",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/location/api.ts",
      "line": 20,
      "description": "Location returns an instance of the correct implementation of\nthe `location` API.\n\n## Implementations\n\nYou can pass an implementation name (`hash`, `history`, `none`, `auto`) to force a\nparticular implementation to be used in your application.\n\nSee [HashLocation](/ember/release/classes/HashLocation).\nSee [HistoryLocation](/ember/release/classes/HistoryLocation).\nSee [NoneLocation](/ember/release/classes/NoneLocation).\nSee [AutoLocation](/ember/release/classes/AutoLocation).\n\n## Location API\n\nEach location implementation must provide the following methods:\n\n* implementation: returns the string name used to reference the implementation.\n* getURL: returns the current URL.\n* setURL(path): sets the current URL.\n* replaceURL(path): replace the current URL (optional).\n* onUpdateURL(callback): triggers the callback when the URL changes.\n* formatURL(url): formats `url` to be placed into `href` attribute.\n* detect() (optional): instructs the location to do any feature detection\n    necessary. If the location needs to redirect to a different URL, it\n    can cancel routing by setting the `cancelRouterSetup` property on itself\n    to `false`.\n\nCalling setURL or replaceURL will not trigger onUpdateURL callbacks.\n\n## Custom implementation\n\nEmber scans `app/locations/*` for extending the Location API.\n\nExample:\n\n```javascript\nimport HistoryLocation from '@ember/routing/history-location';\n\nexport default class MyHistory {\n  implementation: 'my-custom-history',\n  constructor() {\n    this._history = HistoryLocation.create(...arguments);\n  }\n  create() {\n    return new this(...arguments);\n  }\n  pushState(path) {\n     this._history.pushState(path);\n  }\n}\n```",
      "access": "private",
      "tagname": ""
    },
    "AutoLocation": {
      "name": "AutoLocation",
      "shortname": "AutoLocation",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 22,
      "description": "AutoLocation will select the best location option based off browser\nsupport with the priority order: history, hash, none.\n\nClean pushState paths accessed by hashchange-only browsers will be redirected\nto the hash-equivalent and vice versa so future transitions are consistent.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.\n\nBrowsers that support the `history` API will use `HistoryLocation`, those that\ndo not, but still support the `hashchange` event will use `HashLocation`, and\nin the rare case neither is supported will use `NoneLocation`.\n\nExample:\n\n```app/router.js\nRouter.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nRouter.reopen({\n  location: 'auto'\n});\n```\n\nThis will result in a posts.new url of `/posts/new` for modern browsers that\nsupport the `history` api or `/#/posts/new` for older ones, like Internet\nExplorer 9 and below.\n\nWhen a user visits a link to your application, they will be automatically\nupgraded or downgraded to the appropriate `Location` class, with the URL\ntransformed accordingly, if needed.\n\nKeep in mind that since some of your users will use `HistoryLocation`, your\nserver must serve the Ember app at all the routes you define.",
      "static": 1,
      "access": "protected",
      "tagname": ""
    },
    "HashLocation": {
      "name": "HashLocation",
      "shortname": "HashLocation",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 11,
      "description": "`HashLocation` implements the location API using the browser's\nhash. At present, it relies on a `hashchange` event existing in the\nbrowser.\n\nUsing `HashLocation` results in URLs with a `#` (hash sign) separating the\nserver side URL portion of the URL from the portion that is used by Ember.\n\nExample:\n\n```app/router.js\nRouter.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nRouter.reopen({\n  location: 'hash'\n});\n```\n\nThis will result in a posts.new url of `/#/posts/new`.",
      "extends": "EmberObject",
      "access": "protected",
      "tagname": ""
    },
    "HistoryLocation": {
      "name": "HistoryLocation",
      "shortname": "HistoryLocation",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 21,
      "description": "HistoryLocation implements the location API using the browser's\nhistory.pushState API.\n\nUsing `HistoryLocation` results in URLs that are indistinguishable from a\nstandard URL. This relies upon the browser's `history` API.\n\nExample:\n\n```app/router.js\nRouter.map(function() {\n  this.route('posts', function() {\n    this.route('new');\n  });\n});\n\nRouter.reopen({\n  location: 'history'\n});\n```\n\nThis will result in a posts.new url of `/posts/new`.\n\nKeep in mind that your server must serve the Ember app at all the routes you\ndefine.",
      "extends": "EmberObject",
      "access": "protected",
      "tagname": ""
    },
    "NoneLocation": {
      "name": "NoneLocation",
      "shortname": "NoneLocation",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 10,
      "description": "NoneLocation does not interact with the browser. It is useful for\ntesting, or when you need to manage state with your Router, but temporarily\ndon't want it to muck with the URL (for example when you embed your\napplication in a larger page).\n\nUsing `NoneLocation` causes Ember to not store the applications URL state\nin the actual URL. This is generally used for testing purposes, and is one\nof the changes made when calling `App.setupForTesting()`.",
      "extends": "EmberObject",
      "access": "protected",
      "tagname": ""
    },
    "RouterService": {
      "name": "RouterService",
      "shortname": "RouterService",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 33,
      "description": "The Router service is the public API that provides access to the router.\n\nThe immediate benefit of the Router service is that you can inject it into components,\ngiving them a friendly way to initiate transitions and ask questions about the current\nglobal router state.\n\nIn this example, the Router service is injected into a component to initiate a transition\nto a dedicated route:\n\n```app/components/example.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { inject as service } from '@ember/service';\n\nexport default class ExampleComponent extends Component {\n  @service router;\n\n  @action\n  next() {\n    this.router.transitionTo('other.route');\n  }\n}\n```\n\nLike any service, it can also be injected into helpers, routes, etc.",
      "access": "public",
      "tagname": "",
      "extends": "Service"
    },
    "RoutingService": {
      "name": "RoutingService",
      "shortname": "RoutingService",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/services/routing.ts",
      "line": 10,
      "description": "The Routing service is used by LinkComponent, and provides facilities for\nthe component/view layer to interact with the router.\n\nThis is a private service for internal usage only. For public usage,\nrefer to the `Router` service.",
      "access": "private",
      "tagname": ""
    },
    "BucketCache": {
      "name": "BucketCache",
      "shortname": "BucketCache",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/system/cache.ts",
      "line": 1,
      "description": "A two-tiered cache with support for fallback values when doing lookups.\nUses \"buckets\" and then \"keys\" to cache values.",
      "access": "private",
      "tagname": ""
    },
    "RouteInfoWithAttributes": {
      "name": "RouteInfoWithAttributes",
      "shortname": "RouteInfoWithAttributes",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 1,
      "description": "A `RouteInfoWithAttributes` is an object that contains\nmetadata, including the resolved value from the routes\n`model` hook. Like `RouteInfo`, a `RouteInfoWithAttributes`\nrepresents a specific route within a Transition.\nIt is read-only and internally immutable. It is also not\nobservable, because a Transition instance is never\nchanged after creation.",
      "access": "public",
      "tagname": ""
    },
    "RouteInfo": {
      "name": "RouteInfo",
      "shortname": "RouteInfo",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 118,
      "description": "A RouteInfo is an object that contains metadata\nabout a specific route within a Transition. It is\nread-only and internally immutable. It is also not\nobservable, because a Transition instance is never\nchanged after creation.",
      "access": "public",
      "tagname": ""
    },
    "Route": {
      "name": "Route",
      "shortname": "Route",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 78,
      "description": "The `Route` class is used to define individual routes. Refer to\nthe [routing guide](https://guides.emberjs.com/release/routing/) for documentation.",
      "extends": "EmberObject",
      "uses": [
        "ActionHandler",
        "Evented"
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": ""
    },
    "EmberRouter": {
      "name": "EmberRouter",
      "shortname": "EmberRouter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 117,
      "description": "The `EmberRouter` class manages the application state and URLs. Refer to\nthe [routing guide](https://guides.emberjs.com/release/routing/) for documentation.",
      "extends": "EmberObject",
      "uses": [
        "Evented"
      ],
      "access": "public",
      "tagname": ""
    },
    "Transition": {
      "name": "Transition",
      "shortname": "Transition",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/routing",
      "namespace": "",
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 1,
      "description": "A Transition is a thennable (a promise-like object) that represents\nan attempt to transition to another route. It can be aborted, either\nexplicitly via `abort` or by attempting another transition while a\nprevious one is still underway. An aborted transition can also\nbe `retry()`d later.",
      "access": "public",
      "tagname": ""
    },
    "Function": {
      "name": "Function",
      "shortname": "Function",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": ""
    },
    "Ember.ProxyMixin": {
      "name": "Ember.ProxyMixin",
      "shortname": "Ember.ProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "ObjectProxy"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/mixins/-proxy.js",
      "line": 27,
      "description": "`Ember.ProxyMixin` forwards all properties not defined by the proxy itself\nto a proxied `content` object.  See ObjectProxy for more details.",
      "access": "private",
      "tagname": ""
    },
    "Ember.ActionHandler": {
      "name": "Ember.ActionHandler",
      "shortname": "Ember.ActionHandler",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Ember.ControllerMixin",
        "Ember.CoreView"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/mixins/action_handler.js",
      "line": 8,
      "description": "`Ember.ActionHandler` is available on some familiar classes including\n`Route`, `Component`, and `Controller`.\n(Internally the mixin is used by `Ember.CoreView`, `Ember.ControllerMixin`,\nand `Route` and available to the above classes through\ninheritance.)",
      "access": "private",
      "tagname": ""
    },
    "@ember/array": {
      "name": "@ember/array",
      "shortname": "@ember/array",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": ""
    },
    "EmberArray": {
      "name": "EmberArray",
      "shortname": "EmberArray",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "MutableArray"
      ],
      "module": "@ember/array",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 185,
      "description": "This mixin implements Observer-friendly Array-like behavior. It is not a\nconcrete implementation, but it can be used up by other classes that want\nto appear like arrays.\n\nFor example, ArrayProxy is a concrete class that can be instantiated to\nimplement array-like behavior. This class uses the Array Mixin by way of\nthe MutableArray mixin, which allows observable changes to be made to the\nunderlying array.\n\nThis mixin defines methods specifically for collections that provide\nindex-ordered access to their contents. When you are designing code that\nneeds to accept any kind of Array-like object, you should use these methods\ninstead of Array primitives because these will properly notify observers of\nchanges to the array.\n\nAlthough these methods are efficient, they do add a layer of indirection to\nyour application so it is a good idea to use them only when you need the\nflexibility of using both true JavaScript arrays and \"virtual\" arrays such\nas controllers and collections.\n\nYou can use the methods defined in this module to access and modify array\ncontents in an observable-friendly way. You can also be notified whenever\nthe membership of an array changes by using `.observes('myArray.[]')`.\n\nTo support `EmberArray` in your own class, you must override two\nprimitives to use it: `length()` and `objectAt()`.",
      "uses": [
        "Enumerable"
      ],
      "since": "Ember 0.9.0",
      "access": "public",
      "tagname": ""
    },
    "MutableArray": {
      "name": "MutableArray",
      "shortname": "MutableArray",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Ember.NativeArray",
        "ArrayProxy"
      ],
      "module": "@ember/array",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1527,
      "description": "This mixin defines the API for modifying array-like objects. These methods\ncan be applied only to a collection that keeps its items in an ordered set.\nIt builds upon the Array mixin and adds methods to modify the array.\nOne concrete implementations of this class include ArrayProxy.\n\nIt is important to use the methods in this class to modify arrays so that\nchanges are observable. This allows the binding system in Ember to function\ncorrectly.\n\n\nNote that an Array can change even if it does not implement this mixin.\nFor example, one might implement a SparseArray that cannot be directly\nmodified, but if its underlying enumerable changes, it will change also.",
      "uses": [
        "EmberArray",
        "MutableEnumerable"
      ],
      "access": "public",
      "tagname": ""
    },
    "Ember.NativeArray": {
      "name": "Ember.NativeArray",
      "shortname": "Ember.NativeArray",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1948,
      "description": "The NativeArray mixin contains the properties needed to make the native\nArray support MutableArray and all of its dependent APIs. Unless you\nhave `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Array` set to\nfalse, this will be applied automatically. Otherwise you can apply the mixin\nat anytime by calling `Ember.NativeArray.apply(Array.prototype)`.",
      "uses": [
        "MutableArray",
        "Observable"
      ],
      "access": "public",
      "tagname": ""
    },
    "Ember.Comparable": {
      "name": "Ember.Comparable",
      "shortname": "Ember.Comparable",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/mixins/comparable.js",
      "line": 7,
      "description": "Implements some standard methods for comparing objects. Add this mixin to\nany class you create that can compare its instances.\n\nYou should implement the `compare()` method.",
      "since": "Ember 0.9",
      "access": "private",
      "tagname": ""
    },
    "ContainerProxyMixin": {
      "name": "ContainerProxyMixin",
      "shortname": "ContainerProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "EngineInstance"
      ],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "line": 7,
      "description": "ContainerProxyMixin is used to provide public access to specific\ncontainer functionality.",
      "access": "private",
      "tagname": ""
    },
    "Ember.Copyable": {
      "name": "Ember.Copyable",
      "shortname": "Ember.Copyable",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/mixins/copyable.js",
      "line": 7,
      "description": "Implements some standard methods for copying an object. Add this mixin to\nany object you create that can create a copy of itself. This mixin is\nadded automatically to the built-in array.\n\nYou should generally implement the `copy()` method to return a copy of the\nreceiver.",
      "since": "Ember 0.9",
      "deprecated": true,
      "deprecationMessage": "Use 'ember-copy' addon instead",
      "access": "private",
      "tagname": ""
    },
    "Enumerable": {
      "name": "Enumerable",
      "shortname": "Enumerable",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "EmberArray",
        "Ember.MutableEnumerable"
      ],
      "module": "@ember/enumerable",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/enumerable.js",
      "line": 8,
      "description": "The methods in this mixin have been moved to [MutableArray](/ember/release/classes/MutableArray). This mixin has\nbeen intentionally preserved to avoid breaking Enumerable.detect checks\nuntil the community migrates away from them.",
      "access": "private",
      "tagname": ""
    },
    "Evented": {
      "name": "Evented",
      "shortname": "Evented",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Route",
        "EmberRouter",
        "Ember.CoreView"
      ],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "line": 13,
      "description": "This mixin allows for Ember objects to subscribe to and emit events.\n\n```app/utils/person.js\nimport EmberObject from '@ember/object';\nimport Evented from '@ember/object/evented';\n\nexport default EmberObject.extend(Evented, {\n  greet() {\n    // ...\n    this.trigger('greet');\n  }\n});\n```\n\n```javascript\nvar person = Person.create();\n\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n});\n\nperson.greet();\n\n// outputs: 'Our person has greeted'\n```\n\nYou can also chain multiple event subscriptions:\n\n```javascript\nperson.on('greet', function() {\n  console.log('Our person has greeted');\n}).one('greet', function() {\n  console.log('Offer one-time special');\n}).off('event', this, forgetThis);\n```",
      "access": "public",
      "tagname": ""
    },
    "Ember.MutableEnumerable": {
      "name": "Ember.MutableEnumerable",
      "shortname": "Ember.MutableEnumerable",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/mixins/mutable_enumerable.js",
      "line": 8,
      "description": "The methods in this mixin have been moved to MutableArray. This mixin has\nbeen intentionally preserved to avoid breaking MutableEnumerable.detect\nchecks until the community migrates away from them.",
      "uses": [
        "Enumerable"
      ],
      "access": "private",
      "tagname": ""
    },
    "Observable": {
      "name": "Observable",
      "shortname": "Observable",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Ember.NativeArray",
        "EmberObject"
      ],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 22,
      "description": "## Overview\n\nThis mixin provides properties and property observing functionality, core\nfeatures of the Ember object model.\n\nProperties and observers allow one object to observe changes to a\nproperty on another object. This is one of the fundamental ways that\nmodels, controllers and views communicate with each other in an Ember\napplication.\n\nAny object that has this mixin applied can be used in observer\noperations. That includes `EmberObject` and most objects you will\ninteract with as you write your Ember application.\n\nNote that you will not generally apply this mixin to classes yourself,\nbut you will use the features provided by this module frequently, so it\nis important to understand how to use it.\n\n## Using `get()` and `set()`\n\nBecause of Ember's support for bindings and observers, you will always\naccess properties using the get method, and set properties using the\nset method. This allows the observing objects to be notified and\ncomputed properties to be handled properly.\n\nMore documentation about `get` and `set` are below.\n\n## Observing Property Changes\n\nYou typically observe property changes simply by using the `observer`\nfunction in classes that you write.\n\nFor example:\n\n```javascript\nimport { observer } from '@ember/object';\nimport EmberObject from '@ember/object';\n\nEmberObject.extend({\n  valueObserver: observer('value', function(sender, key, value, rev) {\n    // Executes whenever the \"value\" property changes\n    // See the addObserver method for more information about the callback arguments\n  })\n});\n```\n\nAlthough this is the most common way to add an observer, this capability\nis actually built into the `EmberObject` class on top of two methods\ndefined in this mixin: `addObserver` and `removeObserver`. You can use\nthese two methods to add and remove observers yourself if you need to\ndo so at runtime.\n\nTo add an observer for a property, call:\n\n```javascript\nobject.addObserver('propertyKey', targetObject, targetAction)\n```\n\nThis will call the `targetAction` method on the `targetObject` whenever\nthe value of the `propertyKey` changes.\n\nNote that if `propertyKey` is a computed property, the observer will be\ncalled when any of the property dependencies are changed, even if the\nresulting value of the computed property is unchanged. This is necessary\nbecause computed properties are not computed until `get` is called.",
      "access": "public",
      "tagname": ""
    },
    "PromiseProxyMixin": {
      "name": "PromiseProxyMixin",
      "shortname": "PromiseProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 37,
      "description": "A low level mixin making ObjectProxy promise-aware.\n\n```javascript\nimport { resolve } from 'rsvp';\nimport $ from 'jquery';\nimport ObjectProxy from '@ember/object/proxy';\nimport PromiseProxyMixin from '@ember/object/promise-proxy-mixin';\n\nlet ObjectPromiseProxy = ObjectProxy.extend(PromiseProxyMixin);\n\nlet proxy = ObjectPromiseProxy.create({\n  promise: resolve($.getJSON('/some/remote/data.json'))\n});\n\nproxy.then(function(json){\n   // the json\n}, function(reason) {\n   // the reason why you have no json\n});\n```\n\nthe proxy has bindable attributes which\ntrack the promises life cycle\n\n```javascript\nproxy.get('isPending')   //=> true\nproxy.get('isSettled')  //=> false\nproxy.get('isRejected')  //=> false\nproxy.get('isFulfilled') //=> false\n```\n\nWhen the $.getJSON completes, and the promise is fulfilled\nwith json, the life cycle attributes will update accordingly.\nNote that $.getJSON doesn't return an ECMA specified promise,\nit is useful to wrap this with an `RSVP.resolve` so that it behaves\nas a spec compliant promise.\n\n```javascript\nproxy.get('isPending')   //=> false\nproxy.get('isSettled')   //=> true\nproxy.get('isRejected')  //=> false\nproxy.get('isFulfilled') //=> true\n```\n\nAs the proxy is an ObjectProxy, and the json now its content,\nall the json properties will be available directly from the proxy.\n\n```javascript\n// Assuming the following json:\n{\n  firstName: 'Stefan',\n  lastName: 'Penner'\n}\n\n// both properties will accessible on the proxy\nproxy.get('firstName') //=> 'Stefan'\nproxy.get('lastName')  //=> 'Penner'\n```",
      "access": "public",
      "tagname": ""
    },
    "RegistryProxyMixin": {
      "name": "RegistryProxyMixin",
      "shortname": "RegistryProxyMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Application",
        "EngineInstance"
      ],
      "module": "ember",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 8,
      "description": "RegistryProxyMixin is used to provide public access to specific\nregistry functionality.",
      "access": "private",
      "tagname": ""
    },
    "Ember.TargetActionSupport": {
      "name": "Ember.TargetActionSupport",
      "shortname": "Ember.TargetActionSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Component",
        "Ember.TextSupport"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/mixins/target_action_support.js",
      "line": 8,
      "description": "`Ember.TargetActionSupport` is a mixin that can be included in a class\nto add a `triggerAction` method with semantics similar to the Handlebars\n`{{action}}` helper. In normal Ember usage, the `{{action}}` helper is\nusually the best choice. This mixin is most often useful when you are\ndoing more complex event handling in Components.",
      "extends": "Mixin",
      "access": "private",
      "tagname": ""
    },
    "ArrayProxy": {
      "name": "ArrayProxy",
      "shortname": "ArrayProxy",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/array",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "line": 28,
      "description": "An ArrayProxy wraps any other object that implements `Array` and/or\n`MutableArray,` forwarding all requests. This makes it very useful for\na number of binding use cases or other cases where being able to swap\nout the underlying array is useful.\n\nA simple example of usage:\n\n```javascript\nimport { A } from '@ember/array';\nimport ArrayProxy from '@ember/array/proxy';\n\nlet pets = ['dog', 'cat', 'fish'];\nlet ap = ArrayProxy.create({ content: A(pets) });\n\nap.get('firstObject');                        // 'dog'\nap.set('content', ['amoeba', 'paramecium']);\nap.get('firstObject');                        // 'amoeba'\n```\n\nThis class can also be useful as a layer to transform the contents of\nan array, as they are accessed. This can be done by overriding\n`objectAtContent`:\n\n```javascript\nimport { A } from '@ember/array';\nimport ArrayProxy from '@ember/array/proxy';\n\nlet pets = ['dog', 'cat', 'fish'];\nlet ap = ArrayProxy.create({\n    content: A(pets),\n    objectAtContent: function(idx) {\n        return this.get('content').objectAt(idx).toUpperCase();\n    }\n});\n\nap.get('firstObject'); // . 'DOG'\n```\n\nWhen overriding this class, it is important to place the call to\n`_super` *after* setting `content` so the internal observers have\na chance to fire properly:\n\n```javascript\nimport { A } from '@ember/array';\nimport ArrayProxy from '@ember/array/proxy';\n\nexport default ArrayProxy.extend({\n  init() {\n    this.set('content', A(['dog', 'cat', 'fish']));\n    this._super(...arguments);\n  }\n});\n```",
      "extends": "EmberObject",
      "uses": [
        "MutableArray"
      ],
      "access": "public",
      "tagname": ""
    },
    "CoreObject": {
      "name": "CoreObject",
      "shortname": "CoreObject",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 145,
      "description": "`CoreObject` is the base class for all Ember constructs. It establishes a\nclass system based on Ember's Mixin system, and provides the basis for the\nEmber Object Model. `CoreObject` should generally not be used directly,\ninstead you should use `EmberObject`.\n\n## Usage\n\nYou can define a class by extending from `CoreObject` using the `extend`\nmethod:\n\n```js\nconst Person = CoreObject.extend({\n  name: 'Tomster',\n});\n```\n\nFor detailed usage, see the [Object Model](https://guides.emberjs.com/release/object-model/)\nsection of the guides.\n\n## Usage with Native Classes\n\nNative JavaScript `class` syntax can be used to extend from any `CoreObject`\nbased class:\n\n```js\nclass Person extends CoreObject {\n  init() {\n    super.init(...arguments);\n    this.name = 'Tomster';\n  }\n}\n```\n\nSome notes about `class` usage:\n\n* `new` syntax is not currently supported with classes that extend from\n  `EmberObject` or `CoreObject`. You must continue to use the `create` method\n  when making new instances of classes, even if they are defined using native\n  class syntax. If you want to use `new` syntax, consider creating classes\n  which do _not_ extend from `EmberObject` or `CoreObject`. Ember features,\n  such as computed properties and decorators, will still work with base-less\n  classes.\n* Instead of using `this._super()`, you must use standard `super` syntax in\n  native classes. See the [MDN docs on classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Super_class_calls_with_super)\n  for more details.\n* Native classes support using [constructors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Constructor)\n  to set up newly-created instances. Ember uses these to, among other things,\n  support features that need to retrieve other entities by name, like Service\n  injection and `getOwner`. To ensure your custom instance setup logic takes\n  place after this important work is done, avoid using the `constructor` in\n  favor of `init`.\n* Properties passed to `create` will be available on the instance by the time\n  `init` runs, so any code that requires these values should work at that\n  time.\n* Using native classes, and switching back to the old Ember Object model is\n  fully supported.",
      "access": "public",
      "tagname": ""
    },
    "Ember.Namespace": {
      "name": "Ember.Namespace",
      "shortname": "Ember.Namespace",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/runtime/lib/system/namespace.js",
      "line": 18,
      "description": "A Namespace is an object usually used to contain other objects or methods\nsuch as an application or framework. Create a namespace anytime you want\nto define one of these new containers.\n\n# Example Usage\n\n```javascript\nMyFramework = Ember.Namespace.create({\n  VERSION: '1.0.0'\n});\n```",
      "extends": "EmberObject",
      "access": "public",
      "tagname": ""
    },
    "EmberObject": {
      "name": "EmberObject",
      "shortname": "EmberObject",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/system/object.js",
      "line": 13,
      "description": "`EmberObject` is the main base class for all Ember objects. It is a subclass\nof `CoreObject` with the `Observable` mixin applied. For details,\nsee the documentation for each of these.",
      "extends": "CoreObject",
      "uses": [
        "Observable"
      ],
      "access": "public",
      "tagname": ""
    },
    "ObjectProxy": {
      "name": "ObjectProxy",
      "shortname": "ObjectProxy",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": "",
      "file": "packages/@ember/-internals/runtime/lib/system/object_proxy.js",
      "line": 4,
      "description": "`ObjectProxy` forwards all properties not defined by the proxy itself\nto a proxied `content` object.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport ObjectProxy from '@ember/object/proxy';\n\nlet exampleObject = EmberObject.create({\n  name: 'Foo'\n});\n\nlet exampleProxy = ObjectProxy.create({\n  content: exampleObject\n});\n\n// Access and change existing properties\nexampleProxy.get('name');          // 'Foo'\nexampleProxy.set('name', 'Bar');\nexampleObject.get('name');         // 'Bar'\n\n// Create new 'description' property on `exampleObject`\nexampleProxy.set('description', 'Foo is a whizboo baz');\nexampleObject.get('description');  // 'Foo is a whizboo baz'\n```\n\nWhile `content` is unset, setting a property to be delegated will throw an\nError.\n\n```javascript\nimport ObjectProxy from '@ember/object/proxy';\n\nlet exampleProxy = ObjectProxy.create({\n  content: null,\n  flag: null\n});\nexampleProxy.set('flag', true);\nexampleProxy.get('flag');         // true\nexampleProxy.get('foo');          // undefined\nexampleProxy.set('foo', 'data');  // throws Error\n```\n\nDelegated properties can be bound to and will change when content is updated.\n\nComputed properties on the proxy itself can depend on delegated properties.\n\n```javascript\nimport { computed } from '@ember/object';\nimport ObjectProxy from '@ember/object/proxy';\n\nProxyWithComputedProperty = ObjectProxy.extend({\n  fullName: computed('firstName', 'lastName', function() {\n    var firstName = this.get('firstName'),\n        lastName = this.get('lastName');\n    if (firstName && lastName) {\n      return firstName + ' ' + lastName;\n    }\n    return firstName || lastName;\n  })\n});\n\nlet exampleProxy = ProxyWithComputedProperty.create();\n\nexampleProxy.get('fullName');  // undefined\nexampleProxy.set('content', {\n  firstName: 'Tom', lastName: 'Dale'\n}); // triggers property change for fullName on proxy\n\nexampleProxy.get('fullName');  // 'Tom Dale'\n```",
      "extends": "EmberObject",
      "uses": [
        "Ember.ProxyMixin"
      ],
      "access": "public",
      "tagname": ""
    },
    "@ember/object/internals": {
      "name": "@ember/object/internals",
      "shortname": "@ember/object/internals",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "Ember.ActionSupport": {
      "name": "Ember.ActionSupport",
      "shortname": "Ember.ActionSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Component"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/mixins/action_support.js",
      "line": 184,
      "access": "private",
      "tagname": ""
    },
    "Ember.ClassNamesSupport": {
      "name": "Ember.ClassNamesSupport",
      "shortname": "Ember.ClassNamesSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Component"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/mixins/class_names_support.js",
      "line": 9,
      "access": "private",
      "tagname": ""
    },
    "Ember.TextSupport": {
      "name": "Ember.TextSupport",
      "shortname": "Ember.TextSupport",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "TextField",
        "TextArea"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 16,
      "description": "`TextSupport` is a shared mixin used by both `TextField` and\n`TextArea`. `TextSupport` adds a number of methods that allow you to\nspecify a controller action to invoke when a certain event is fired on your\ntext field or textarea. The specified controller action would get the current\nvalue of the field passed in as the only argument unless the value of\nthe field is empty. In that case, the instance of the field itself is passed\nin as the only argument.\n\nLet's use the pressing of the escape key as an example. If you wanted to\ninvoke a controller action when a user presses the escape key while on your\nfield, you would use the `escape-press` attribute on your field like so:\n\n```handlebars\n  {{! application.hbs}}\n\n  {{input escape-press='alertUser'}}\n```\n\n```javascript\n    import Application from '@ember/application';\n    import Controller from '@ember/controller';\n    App = Application.create();\n\n    App.ApplicationController = Controller.extend({\n      actions: {\n        alertUser: function ( currentValue ) {\n          alert( 'escape pressed, current value: ' + currentValue );\n        }\n      }\n    });\n```\n\nThe following chart is a visual representation of what takes place when the\nescape key is pressed in this scenario:\n\n```\nThe Template\n+---------------------------+\n|                           |\n| escape-press='alertUser'  |\n|                           |          TextSupport Mixin\n+----+----------------------+          +-------------------------------+\n     |                                 | cancel method                 |\n     |      escape button pressed      |                               |\n     +-------------------------------> | checks for the `escape-press` |\n                                       | attribute and pulls out the   |\n     +-------------------------------+ | `alertUser` value             |\n     |     action name 'alertUser'     +-------------------------------+\n     |     sent to controller\n     v\nController\n+------------------------------------------ +\n|                                           |\n|  actions: {                               |\n|     alertUser: function( currentValue ){  |\n|       alert( 'the esc key was pressed!' ) |\n|     }                                     |\n|  }                                        |\n|                                           |\n+-------------------------------------------+\n```\n\nHere are the events that we currently support along with the name of the\nattribute you would need to use on your field. To reiterate, you would use the\nattribute name like so:\n\n```handlebars\n  {{input attribute-name='controllerAction'}}\n```\n\n```\n+--------------------+----------------+\n|                    |                |\n| event              | attribute name |\n+--------------------+----------------+\n| new line inserted  | insert-newline |\n|                    |                |\n| enter key pressed  | enter          |\n|                    |                |\n| cancel key pressed | escape-press   |\n|                    |                |\n| focusin            | focus-in       |\n|                    |                |\n| focusout           | focus-out      |\n|                    |                |\n| keypress           | key-press      |\n|                    |                |\n| keyup              | key-up         |\n|                    |                |\n| keydown            | key-down       |\n+--------------------+----------------+\n```",
      "uses": [
        "Ember.TargetActionSupport"
      ],
      "extends": "Mixin",
      "access": "private",
      "tagname": ""
    },
    "Ember.ViewMixin": {
      "name": "Ember.ViewMixin",
      "shortname": "Ember.ViewMixin",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [
        "Component"
      ],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 459,
      "access": "private",
      "tagname": ""
    },
    "Ember.EventDispatcher": {
      "name": "Ember.EventDispatcher",
      "shortname": "Ember.EventDispatcher",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/system/event_dispatcher.js",
      "line": 25,
      "description": "`Ember.EventDispatcher` handles delegating browser events to their\ncorresponding `Ember.Views.` For example, when you click on a view,\n`Ember.EventDispatcher` ensures that that view's `mouseDown` method gets\ncalled.",
      "access": "private",
      "tagname": "",
      "extends": "Ember.Object"
    },
    "Ember.CoreView": {
      "name": "Ember.CoreView",
      "shortname": "Ember.CoreView",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/@ember/-internals/views/lib/views/core_view.js",
      "line": 4,
      "description": "`Ember.CoreView` is an abstract class that exists to give view-like behavior\nto both Ember's main view class `Component` and other classes that don't need\nthe full functionality of `Component`.\n\nUnless you have specific needs for `CoreView`, you will use `Component`\nin your applications.",
      "extends": "EmberObject",
      "deprecated": true,
      "deprecationMessage": "Use `Component` instead.",
      "uses": [
        "Evented",
        "Ember.ActionHandler"
      ],
      "access": "private",
      "tagname": ""
    },
    "Application": {
      "name": "Application",
      "shortname": "Application",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "",
      "file": "packages/@ember/application/lib/application.js",
      "line": 37,
      "description": "An instance of `Application` is the starting point for every Ember\napplication. It instantiates, initializes and coordinates the\nobjects that make up your app.\n\nEach Ember app has one and only one `Application` object. Although\nEmber CLI creates this object implicitly, the `Application` class\nis defined in the `app/app.js`. You can define a `ready` method on the\n`Application` class, which will be run by Ember when the application is\ninitialized.\n\n```app/app.js\nconst App = Application.extend({\n  ready() {\n    // your code here\n  }\n})\n```\n\nBecause `Application` ultimately inherits from `Ember.Namespace`, any classes\nyou create will have useful string representations when calling `toString()`.\nSee the `Ember.Namespace` documentation for more information.\n\nWhile you can think of your `Application` as a container that holds the\nother classes in your application, there are several other responsibilities\ngoing on under-the-hood that you may want to understand. It is also important\nto understand that an `Application` is different from an `ApplicationInstance`.\nRefer to the Guides to understand the difference between these.\n\n### Event Delegation\n\nEmber uses a technique called _event delegation_. This allows the framework\nto set up a global, shared event listener instead of requiring each view to\ndo it manually. For example, instead of each view registering its own\n`mousedown` listener on its associated element, Ember sets up a `mousedown`\nlistener on the `body`.\n\nIf a `mousedown` event occurs, Ember will look at the target of the event and\nstart walking up the DOM node tree, finding corresponding views and invoking\ntheir `mouseDown` method as it goes.\n\n`Application` has a number of default events that it listens for, as\nwell as a mapping from lowercase events to camel-cased view method names. For\nexample, the `keypress` event causes the `keyPress` method on the view to be\ncalled, the `dblclick` event causes `doubleClick` to be called, and so on.\n\nIf there is a bubbling browser event that Ember does not listen for by\ndefault, you can specify custom events and their corresponding view method\nnames by setting the application's `customEvents` property:\n\n```app/app.js\nimport Application from '@ember/application';\n\nlet App = Application.extend({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n```\n\nTo prevent Ember from setting up a listener for a default event,\nspecify the event name with a `null` value in the `customEvents`\nproperty:\n\n```app/app.js\nimport Application from '@ember/application';\n\nlet App = Application.extend({\n  customEvents: {\n    // prevent listeners for mouseenter/mouseleave events\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n```\n\nBy default, the application sets up these event listeners on the document\nbody. However, in cases where you are embedding an Ember application inside\nan existing page, you may want it to set up the listeners on an element\ninside the body.\n\nFor example, if only events inside a DOM element with the ID of `ember-app`\nshould be delegated, set your application's `rootElement` property:\n\n```app/app.js\nimport Application from '@ember/application';\n\nlet App = Application.extend({\n  rootElement: '#ember-app'\n});\n```\n\nThe `rootElement` can be either a DOM element or a jQuery-compatible selector\nstring. Note that *views appended to the DOM outside the root element will\nnot receive events.* If you specify a custom root element, make sure you only\nappend views inside it!\n\nTo learn more about the events Ember components use, see\n\n[components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).\n\n### Initializers\n\nTo add behavior to the Application's boot process, you can define initializers in\nthe `app/initializers` directory, or with `ember generate initializer` using Ember CLI.\nThese files should export a named `initialize` function which will receive the created `application`\nobject as its first argument.\n\n```javascript\nexport function initialize(application) {\n  // application.inject('route', 'foo', 'service:foo');\n}\n```\n\nApplication initializers can be used for a variety of reasons including:\n\n- setting up external libraries\n- injecting dependencies\n- setting up event listeners in embedded apps\n- deferring the boot process using the `deferReadiness` and `advanceReadiness` APIs.\n\n### Routing\n\nIn addition to creating your application's router, `Application` is\nalso responsible for telling the router when to start routing. Transitions\nbetween routes can be logged with the `LOG_TRANSITIONS` flag, and more\ndetailed intra-transition logging can be logged with\nthe `LOG_TRANSITIONS_INTERNAL` flag:\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create({\n  LOG_TRANSITIONS: true, // basic logging of successful transitions\n  LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps\n});\n```\n\nBy default, the router will begin trying to translate the current URL into\napplication state once the browser emits the `DOMContentReady` event. If you\nneed to defer routing, you can call the application's `deferReadiness()`\nmethod. Once routing can begin, call the `advanceReadiness()` method.\n\nIf there is any setup required before routing begins, you can implement a\n`ready()` method on your app that will be invoked immediately before routing\nbegins.",
      "extends": "Engine",
      "uses": [
        "RegistryProxyMixin"
      ],
      "access": "public",
      "tagname": ""
    },
    "GlobalsResolver": {
      "name": "GlobalsResolver",
      "shortname": "GlobalsResolver",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "",
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 14,
      "description": "The DefaultResolver defines the default lookup rules to resolve\ncontainer lookups before consulting the container for registered\nitems:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after converting\n  the name. For example, `controller:post` looks up\n  `App.PostController` by default.\n* there are some nuances (see examples below)\n\n### How Resolving Works\n\nThe container calls this object's `resolve` method with the\n`fullName` argument.\n\nIt first parses the fullName into an object using `parseName`.\n\nThen it checks for the presence of a type-specific instance\nmethod of the form `resolve[Type]` and calls it if it exists.\nFor example if it was resolving 'template:post', it would call\nthe `resolveTemplate` method.\n\nIts last resort is to call the `resolveOther` method.\n\nThe methods of this object are designed to be easy to override\nin a subclass. For example, you could enhance how a template\nis resolved like so:\n\n```app/app.js\nimport Application from '@ember/application';\nimport GlobalsResolver from '@ember/application/globals-resolver';\n\nApp = Application.create({\n  Resolver: GlobalsResolver.extend({\n    resolveTemplate(parsedName) {\n      let resolvedTemplate = this._super(parsedName);\n      if (resolvedTemplate) { return resolvedTemplate; }\n\n      return Ember.TEMPLATES['not_found'];\n    }\n  })\n});\n```\n\nSome examples of how names are resolved:\n\n```text\n'template:post'           //=> Ember.TEMPLATES['post']\n'template:posts/byline'   //=> Ember.TEMPLATES['posts/byline']\n'template:posts.byline'   //=> Ember.TEMPLATES['posts/byline']\n'template:blogPost'       //=> Ember.TEMPLATES['blog-post']\n'controller:post'         //=> App.PostController\n'controller:posts.index'  //=> App.PostsIndexController\n'controller:blog/post'    //=> Blog.PostController\n'controller:basic'        //=> Controller\n'route:post'              //=> App.PostRoute\n'route:posts.index'       //=> App.PostsIndexRoute\n'route:blog/post'         //=> Blog.PostRoute\n'route:basic'             //=> Route\n'foo:post'                //=> App.PostFoo\n'model:post'              //=> App.Post\n```",
      "extends": "EmberObject",
      "access": "public",
      "tagname": "",
      "deprecated": true
    },
    "ApplicationInstance": {
      "name": "ApplicationInstance",
      "shortname": "ApplicationInstance",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "",
      "file": "packages/@ember/application/instance.js",
      "line": 12,
      "description": "The `ApplicationInstance` encapsulates all of the stateful aspects of a\nrunning `Application`.\n\nAt a high-level, we break application boot into two distinct phases:\n\n* Definition time, where all of the classes, templates, and other\n  dependencies are loaded (typically in the browser).\n* Run time, where we begin executing the application once everything\n  has loaded.\n\nDefinition time can be expensive and only needs to happen once since it is\nan idempotent operation. For example, between test runs and FastBoot\nrequests, the application stays the same. It is only the state that we want\nto reset.\n\nThat state is what the `ApplicationInstance` manages: it is responsible for\ncreating the container that contains all application state, and disposing of\nit once the particular test run or FastBoot request has finished.",
      "access": "public",
      "tagname": "",
      "extends": "EngineInstance"
    },
    "ApplicationInstance.BootOptions": {
      "name": "ApplicationInstance.BootOptions",
      "shortname": "ApplicationInstance.BootOptions",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/application",
      "namespace": "ApplicationInstance",
      "file": "packages/@ember/application/instance.js",
      "line": 314,
      "description": "A list of boot-time configuration options for customizing the behavior of\nan `ApplicationInstance`.\n\nThis is an interface class that exists purely to document the available\noptions; you do not need to construct it manually. Simply pass a regular\nJavaScript object containing the desired options into methods that require\none of these options object:\n\n```javascript\nMyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n```\n\nNot all combinations of the supported options are valid. See the documentation\non `Application#visit` for the supported configurations.\n\nInternal, experimental or otherwise unstable flags are marked as private.",
      "access": "public",
      "tagname": ""
    },
    "FEATURES": {
      "name": "FEATURES",
      "shortname": "FEATURES",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/canary-features",
      "namespace": "",
      "file": "packages/@ember/canary-features/index.ts",
      "line": 27,
      "description": "The hash of enabled Canary features. Add to this, any canary features\nbefore creating your application.",
      "static": 1,
      "since": "1.1.0",
      "access": "public",
      "tagname": ""
    },
    "Controller": {
      "name": "Controller",
      "shortname": "Controller",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/controller",
      "namespace": "",
      "file": "packages/@ember/controller/index.js",
      "line": 9,
      "extends": "EmberObject",
      "uses": [
        "Ember.ControllerMixin"
      ],
      "access": "public",
      "tagname": ""
    },
    "@ember/controller": {
      "name": "@ember/controller",
      "shortname": "@ember/controller",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/controller",
      "namespace": ""
    },
    "@ember/destroyable": {
      "name": "@ember/destroyable",
      "shortname": "@ember/destroyable",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/destroyable",
      "namespace": ""
    },
    "@ember/engine": {
      "name": "@ember/engine",
      "shortname": "@ember/engine",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/engine",
      "namespace": ""
    },
    "Engine": {
      "name": "Engine",
      "shortname": "Engine",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/engine",
      "namespace": "",
      "file": "packages/@ember/engine/index.js",
      "line": 31,
      "description": "The `Engine` class contains core functionality for both applications and\nengines.\n\nEach engine manages a registry that's used for dependency injection and\nexposed through `RegistryProxy`.\n\nEngines also manage initializers and instance initializers.\n\nEngines can spawn `EngineInstance` instances via `buildInstance()`.",
      "extends": "Ember.Namespace",
      "uses": [
        "RegistryProxy"
      ],
      "access": "public",
      "tagname": ""
    },
    "EngineInstance": {
      "name": "EngineInstance",
      "shortname": "EngineInstance",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/engine",
      "namespace": "",
      "file": "packages/@ember/engine/instance.js",
      "line": 17,
      "description": "The `EngineInstance` encapsulates all of the stateful aspects of a\nrunning `Engine`.",
      "access": "public",
      "tagname": "",
      "extends": "EmberObject",
      "uses": [
        "RegistryProxyMixin",
        "ContainerProxyMixin"
      ]
    },
    "Ember.Error": {
      "name": "Ember.Error",
      "shortname": "Ember.Error",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/error",
      "namespace": "Ember",
      "file": "packages/@ember/error/index.ts",
      "line": 5,
      "description": "The JavaScript Error object used by Ember.assert.",
      "extends": "Error",
      "is_constructor": 1,
      "access": "public",
      "tagname": ""
    },
    "Instrumentation": {
      "name": "Instrumentation",
      "shortname": "Instrumentation",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/instrumentation",
      "namespace": "",
      "file": "packages/@ember/instrumentation/index.ts",
      "line": 39,
      "description": "The purpose of the Ember Instrumentation module is\nto provide efficient, general-purpose instrumentation\nfor Ember.\n\nSubscribe to a listener by using `subscribe`:\n\n```javascript\nimport { subscribe } from '@ember/instrumentation';\n\nsubscribe(\"render\", {\n  before(name, timestamp, payload) {\n\n  },\n\n  after(name, timestamp, payload) {\n\n  }\n});\n```\n\nIf you return a value from the `before` callback, that same\nvalue will be passed as a fourth parameter to the `after`\ncallback.\n\nInstrument a block of code by using `instrument`:\n\n```javascript\nimport { instrument } from '@ember/instrumentation';\n\ninstrument(\"render.handlebars\", payload, function() {\n  // rendering logic\n}, binding);\n```\n\nEvent names passed to `instrument` are namespaced\nby periods, from more general to more specific. Subscribers\ncan listen for events by whatever level of granularity they\nare interested in.\n\nIn the above example, the event is `render.handlebars`,\nand the subscriber listened for all events beginning with\n`render`. It would receive callbacks for events named\n`render`, `render.handlebars`, `render.container`, or\neven `render.handlebars.layout`.",
      "static": 1,
      "access": "private",
      "tagname": ""
    },
    "@ember/instrumentation": {
      "name": "@ember/instrumentation",
      "shortname": "@ember/instrumentation",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/instrumentation",
      "namespace": ""
    },
    "@ember/object/compat": {
      "name": "@ember/object/compat",
      "shortname": "@ember/object/compat",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/object",
      "namespace": ""
    },
    "@ember/polyfills": {
      "name": "@ember/polyfills",
      "shortname": "@ember/polyfills",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/polyfills",
      "namespace": ""
    },
    "@ember/runloop": {
      "name": "@ember/runloop",
      "shortname": "@ember/runloop",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/runloop",
      "namespace": ""
    },
    "@ember/service": {
      "name": "@ember/service",
      "shortname": "@ember/service",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/service",
      "namespace": ""
    },
    "Service": {
      "name": "Service",
      "shortname": "Service",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/service",
      "namespace": "",
      "file": "packages/@ember/service/index.js",
      "line": 60,
      "extends": "EmberObject",
      "since": "1.10.0",
      "access": "public",
      "tagname": ""
    },
    "String": {
      "name": "String",
      "shortname": "String",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/string",
      "namespace": "",
      "file": "packages/@ember/string/index.ts",
      "line": 68,
      "description": "Defines string helper methods including string formatting and localization.\nUnless `EmberENV.EXTEND_PROTOTYPES.String` is `false` these methods will also be\nadded to the `String.prototype` as well.",
      "access": "public",
      "tagname": ""
    },
    "@ember/string": {
      "name": "@ember/string",
      "shortname": "@ember/string",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/string",
      "namespace": ""
    },
    "TestAdapter": {
      "name": "TestAdapter",
      "shortname": "TestAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/test",
      "namespace": "",
      "file": "packages/ember-testing/lib/adapters/adapter.js",
      "line": 11,
      "description": "The primary purpose of this class is to create hooks that can be implemented\nby an adapter for various test frameworks.",
      "access": "public",
      "tagname": ""
    },
    "Ember.Test.QUnitAdapter": {
      "name": "Ember.Test.QUnitAdapter",
      "shortname": "Ember.Test.QUnitAdapter",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember.Test",
      "file": "packages/ember-testing/lib/adapters/qunit.js",
      "line": 8,
      "description": "This class implements the methods defined by TestAdapter for the\nQUnit testing framework.",
      "extends": "TestAdapter",
      "access": "public",
      "tagname": ""
    },
    "@ember/test": {
      "name": "@ember/test",
      "shortname": "@ember/test",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "@ember/test",
      "namespace": ""
    },
    "Ember.Test": {
      "name": "Ember.Test",
      "shortname": "Ember.Test",
      "classitems": [],
      "plugins": [],
      "extensions": [],
      "plugin_for": [],
      "extension_for": [],
      "module": "ember",
      "namespace": "Ember",
      "file": "packages/ember-testing/lib/test.js",
      "line": 11,
      "description": "This is a container for an assortment of testing related functionality:\n\n* Choose your default test adapter (for your framework of choice).\n* Register/Unregister additional test helpers.\n* Setup callbacks to be fired when the test helpers are injected into\n  your application.",
      "access": "public",
      "tagname": ""
    }
  },
  "elements": {},
  "classitems": [
    {
      "file": "node_modules/rsvp/lib/rsvp/promise/all.js",
      "line": 3,
      "description": "`Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\n\nExample:\n\n```javascript\nimport Promise, { resolve } from 'rsvp';\n\nlet promise1 = resolve(1);\nlet promise2 = resolve(2);\nlet promise3 = resolve(3);\nlet promises = [ promise1, promise2, promise3 ];\n\nPromise.all(promises).then(function(array){\n  // The array here would be [ 1, 2, 3 ];\n});\n```\n\nIf any of the `promises` given to `RSVP.all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\n\nExample:\n\n```javascript\nimport Promise, { resolve, reject } from 'rsvp';\n\nlet promise1 = resolve(1);\nlet promise2 = reject(new Error(\"2\"));\nlet promise3 = reject(new Error(\"3\"));\nlet promises = [ promise1, promise2, promise3 ];\n\nPromise.all(promises).then(function(array){\n  // Code here never runs because there are rejected promises!\n}, function(error) {\n  // error.message === \"2\"\n});\n```",
      "itemtype": "method",
      "name": "all",
      "params": [
        {
          "name": "entries",
          "description": "array of promises",
          "type": "Array"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "promise that is fulfilled when all `promises` have been\nfulfilled, or rejected if any of them become rejected.",
        "type": "Promise"
      },
      "static": 1,
      "class": "Promise"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/promise/race.js",
      "line": 9,
      "description": "`Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\n\nExample:\n\n```javascript\nimport Promise from 'rsvp';\n\nlet promise1 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 1');\n  }, 200);\n});\n\nlet promise2 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 2');\n  }, 100);\n});\n\nPromise.race([promise1, promise2]).then(function(result){\n  // result === 'promise 2' because it was resolved before promise1\n  // was resolved.\n});\n```\n\n`Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n\n```javascript\nimport Promise from 'rsvp';\n\nlet promise1 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve('promise 1');\n  }, 200);\n});\n\nlet promise2 = new Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(new Error('promise 2'));\n  }, 100);\n});\n\nPromise.race([promise1, promise2]).then(function(result){\n  // Code here never runs\n}, function(reason){\n  // reason.message === 'promise 2' because promise 2 became rejected before\n  // promise 1 became fulfilled\n});\n```\n\nAn example real-world use case is implementing timeouts:\n\n```javascript\nimport Promise from 'rsvp';\n\nPromise.race([ajax('foo.json'), timeout(5000)])\n```",
      "itemtype": "method",
      "name": "race",
      "static": 1,
      "params": [
        {
          "name": "entries",
          "description": "array of promises to observe",
          "type": "Array"
        },
        {
          "name": "label",
          "description": "optional string for describing the promise returned.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "a promise which settles in the same way as the first passed\npromise to settle.",
        "type": "Promise"
      },
      "class": "Promise"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/promise/reject.js",
      "line": 6,
      "description": "`Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n\n```javascript\nimport Promise from 'rsvp';\n\nlet promise = new Promise(function(resolve, reject){\n  reject(new Error('WHOOPS'));\n});\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nimport Promise from 'rsvp';\n\nlet promise = Promise.reject(new Error('WHOOPS'));\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```",
      "itemtype": "method",
      "name": "reject",
      "static": 1,
      "params": [
        {
          "name": "reason",
          "description": "value that the returned promise will be rejected with.",
          "type": "*"
        },
        {
          "name": "label",
          "description": "optional string for identifying the returned promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "a promise rejected with the given `reason`.",
        "type": "Promise"
      },
      "class": "Promise"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/promise/resolve.js",
      "line": 6,
      "description": "`Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n\n```javascript\nimport Promise from 'rsvp';\n\nlet promise = new Promise(function(resolve, reject){\n  resolve(1);\n});\n\npromise.then(function(value){\n  // value === 1\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nimport Promise from 'rsvp';\n\nlet promise = RSVP.Promise.resolve(1);\n\npromise.then(function(value){\n  // value === 1\n});\n```",
      "itemtype": "method",
      "name": "resolve",
      "static": 1,
      "params": [
        {
          "name": "object",
          "description": "value that the returned promise will be resolved with",
          "type": "*"
        },
        {
          "name": "label",
          "description": "optional string for identifying the returned promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "a promise that will become fulfilled with the given\n`value`",
        "type": "Promise"
      },
      "class": "Promise"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/all-settled.js",
      "line": 20,
      "description": "`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\n\nReturns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\n\nEach state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n\n```javascript\n{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n```\n\nExample:\n\n```javascript\nlet promise1 = RSVP.Promise.resolve(1);\nlet promise2 = RSVP.Promise.reject(new Error('2'));\nlet promise3 = RSVP.Promise.reject(new Error('3'));\nlet promises = [ promise1, promise2, promise3 ];\n\nRSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be '2', and for the\n  // third item, reason.message will be '3'.\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n```",
      "itemtype": "method",
      "name": "allSettled",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "entries",
          "description": "",
          "type": "Array"
        },
        {
          "name": "label",
          "description": "- optional string that describes the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "promise that is fulfilled with an array of the settled\nstates of the constituent promises.",
        "type": "Promise"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/all.js",
      "line": 3,
      "description": "This is a convenient alias for `Promise.all`.",
      "itemtype": "method",
      "name": "all",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "array",
          "description": "Array of promises.",
          "type": "Array"
        },
        {
          "name": "label",
          "description": "An optional label. This is useful\nfor tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/defer.js",
      "line": 3,
      "description": "`defer` returns an object similar to jQuery's `$.Deferred`.\n`defer` should be used when porting over code reliant on `$.Deferred`'s\ninterface. New code should use the `Promise` constructor instead.\n\nThe object returned from `defer` is a plain object with three properties:\n\n* promise - an `Promise`.\n* reject - a function that causes the `promise` property on this object to\n  become rejected\n* resolve - a function that causes the `promise` property on this object to\n  become fulfilled.\n\nExample:\n\n ```javascript\n let deferred = defer();\n\n deferred.resolve(\"Success!\");\n\n deferred.promise.then(function(value){\n   // value here is \"Success!\"\n });\n ```",
      "itemtype": "method",
      "name": "defer",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/events.js",
      "line": 19,
      "description": "`EventTarget.mixin` extends an object with EventTarget methods. For\nExample:\n\n```javascript\nimport EventTarget from 'rsvp';\n\nlet object = {};\n\nEventTarget.mixin(object);\n\nobject.on('finished', function(event) {\n  // handle event\n});\n\nobject.trigger('finished', { detail: value });\n```\n\n`EventTarget.mixin` also works with prototypes:\n\n```javascript\nimport EventTarget from 'rsvp';\n\nlet Person = function() {};\nEventTarget.mixin(Person.prototype);\n\nlet yehuda = new Person();\nlet tom = new Person();\n\nyehuda.on('poke', function(event) {\n  console.log('Yehuda says OW');\n});\n\ntom.on('poke', function(event) {\n  console.log('Tom says OW');\n});\n\nyehuda.trigger('poke');\ntom.trigger('poke');\n```",
      "itemtype": "method",
      "name": "mixin",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "object",
          "description": "object to extend with EventTarget methods",
          "type": "Object"
        }
      ],
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/events.js",
      "line": 73,
      "description": "Registers a callback to be executed when `eventName` is triggered\n\n```javascript\nobject.on('event', function(eventInfo){\n  // handle the event\n});\n\nobject.trigger('event');\n```",
      "itemtype": "method",
      "name": "on",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "eventName",
          "description": "name of the event to listen for",
          "type": "String"
        },
        {
          "name": "callback",
          "description": "function to be called when the event is triggered.",
          "type": "Function"
        }
      ],
      "class": "EventTarget",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/events.js",
      "line": 107,
      "description": "You can use `off` to stop firing a particular callback for an event:\n\n```javascript\nfunction doStuff() { // do stuff! }\nobject.on('stuff', doStuff);\n\nobject.trigger('stuff'); // doStuff will be called\n\n// Unregister ONLY the doStuff callback\nobject.off('stuff', doStuff);\nobject.trigger('stuff'); // doStuff will NOT be called\n```\n\nIf you don't pass a `callback` argument to `off`, ALL callbacks for the\nevent will not be executed when the event fires. For example:\n\n```javascript\nlet callback1 = function(){};\nlet callback2 = function(){};\n\nobject.on('stuff', callback1);\nobject.on('stuff', callback2);\n\nobject.trigger('stuff'); // callback1 and callback2 will be executed.\n\nobject.off('stuff');\nobject.trigger('stuff'); // callback1 and callback2 will not be executed!\n```",
      "itemtype": "method",
      "name": "off",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "eventName",
          "description": "event to stop listening to",
          "type": "String"
        },
        {
          "name": "callback",
          "description": "optional argument. If given, only the function\ngiven will be removed from the event's callback queue. If no `callback`\nargument is given, all callbacks will be removed from the event's callback\nqueue.",
          "type": "Function",
          "optional": true
        }
      ],
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/events.js",
      "line": 162,
      "description": "Use `trigger` to fire custom events. For example:\n\n```javascript\nobject.on('foo', function(){\n  console.log('foo event happened!');\n});\nobject.trigger('foo');\n// 'foo event happened!' logged to the console\n```\n\nYou can also pass a value as a second argument to `trigger` that will be\npassed as an argument to all event listeners for the event:\n\n```javascript\nobject.on('foo', function(value){\n  console.log(value.name);\n});\n\nobject.trigger('foo', { name: 'bar' });\n// 'bar' logged to the console\n```",
      "itemtype": "method",
      "name": "trigger",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "eventName",
          "description": "name of the event to be triggered",
          "type": "String"
        },
        {
          "name": "options",
          "description": "optional value to be passed to any event handlers for\nthe given `eventName`",
          "type": "*",
          "optional": true
        }
      ],
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/filter.js",
      "line": 42,
      "description": "`filter` is similar to JavaScript's native `filter` method.\n`filterFn` is eagerly called meaning that as soon as any promise\n resolves its value will be passed to `filterFn`. `filter` returns\n a promise that will become fulfilled with the result of running\n `filterFn` on the values the promises become fulfilled with.\n\n For example:\n\n ```javascript\n import { filter, resolve } from 'rsvp';\n\n let promise1 = resolve(1);\n let promise2 = resolve(2);\n let promise3 = resolve(3);\n\n let promises = [promise1, promise2, promise3];\n\n let filterFn = function(item){\n   return item > 1;\n };\n\n filter(promises, filterFn).then(function(result){\n   // result is [ 2, 3 ]\n });\n ```\n\n If any of the `promises` given to `filter` are rejected, the first promise\n that is rejected will be given as an argument to the returned promise's\n rejection handler. For example:\n\n ```javascript\n import { filter, reject, resolve } from 'rsvp';\n\n let promise1 = resolve(1);\n let promise2 = reject(new Error('2'));\n let promise3 = reject(new Error('3'));\n let promises = [ promise1, promise2, promise3 ];\n\n let filterFn = function(item){\n   return item > 1;\n };\n\n filter(promises, filterFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === '2'\n });\n ```\n\n `filter` will also wait for any promises returned from `filterFn`.\n For instance, you may want to fetch a list of users then return a subset\n of those users based on some asynchronous operation:\n\n ```javascript\n import { filter, resolve } from 'rsvp';\n\n let alice = { name: 'alice' };\n let bob   = { name: 'bob' };\n let users = [ alice, bob ];\n\n let promises = users.map(function(user){\n   return resolve(user);\n });\n\n let filterFn = function(user){\n   // Here, Alice has permissions to create a blog post, but Bob does not.\n   return getPrivilegesForUser(user).then(function(privs){\n     return privs.can_create_blog_post === true;\n   });\n };\n filter(promises, filterFn).then(function(users){\n   // true, because the server told us only Alice can create a blog post.\n   users.length === 1;\n   // false, because Alice is the only user present in `users`\n   users[0] === bob;\n });\n ```",
      "itemtype": "method",
      "name": "filter",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "promises",
          "description": "",
          "type": "Array"
        },
        {
          "name": "filterFn",
          "description": "- function to be called on each resolved value to\n filter the final results.",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string describing the promise. Useful for\n tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/hash-settled.js",
      "line": 16,
      "description": "`hashSettled` is similar to `allSettled`, but takes an object\ninstead of an array for its `promises` argument.\n\nUnlike `all` or `hash`, which implement a fail-fast method,\nbut like `allSettled`, `hashSettled` waits until all the\nconstituent promises have returned and then shows you all the results\nwith their states and values/reasons. This is useful if you want to\nhandle multiple promises' failure states together as a set.\n\nReturns a promise that is fulfilled when all the given promises have been\nsettled, or rejected if the passed parameters are invalid.\n\nThe returned promise is fulfilled with a hash that has the same key names as\nthe `promises` object argument. If any of the values in the object are not\npromises, they will be copied over to the fulfilled object and marked with state\n'fulfilled'.\n\nExample:\n\n```javascript\nimport { hashSettled, resolve } from 'rsvp';\n\nlet promises = {\n  myPromise: resolve(1),\n  yourPromise: resolve(2),\n  theirPromise: resolve(3),\n  notAPromise: 4\n};\n\nhashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: { state: 'fulfilled', value: 1 },\n  //   yourPromise: { state: 'fulfilled', value: 2 },\n  //   theirPromise: { state: 'fulfilled', value: 3 },\n  //   notAPromise: { state: 'fulfilled', value: 4 }\n  // }\n});\n```\n\nIf any of the `promises` given to `hash` are rejected, the state will\nbe set to 'rejected' and the reason for rejection provided.\n\nExample:\n\n```javascript\nimport { hashSettled, reject, resolve } from 'rsvp';\n\nlet promises = {\n  myPromise: resolve(1),\n  rejectedPromise: reject(new Error('rejection')),\n  anotherRejectedPromise: reject(new Error('more rejection')),\n};\n\nhashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise:              { state: 'fulfilled', value: 1 },\n  //   rejectedPromise:        { state: 'rejected', reason: Error },\n  //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n  // }\n  // Note that for rejectedPromise, reason.message == 'rejection',\n  // and for anotherRejectedPromise, reason.message == 'more rejection'.\n});\n```\n\nAn important note: `hashSettled` is intended for plain JavaScript objects that\nare just a set of keys and values. `hashSettled` will NOT preserve prototype\nchains.\n\nExample:\n\n```javascript\nimport Promise, { hashSettled, resolve } from 'rsvp';\n\nfunction MyConstructor(){\n  this.example = resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: Promise.resolve('Proto Property')\n};\n\nlet myObject = new MyConstructor();\n\nhashSettled(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: { state: 'fulfilled', value: 'Example' }\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n```",
      "itemtype": "method",
      "name": "hashSettled",
      "access": "public",
      "tagname": "",
      "params": [
        {
          "name": "object",
          "description": "",
          "type": "Object"
        },
        {
          "name": "label",
          "description": "optional string that describes the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "promise that is fulfilled when when all properties of `promises`\nhave been settled.",
        "type": "Promise"
      },
      "static": 1,
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/hash.js",
      "line": 4,
      "description": "`hash` is similar to `all`, but takes an object instead of an array\nfor its `promises` argument.\n\nReturns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the `promises` object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.\n\nExample:\n\n```javascript\nlet promises = {\n  myPromise: resolve(1),\n  yourPromise: resolve(2),\n  theirPromise: resolve(3),\n  notAPromise: 4\n};\n\nhash(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: 1,\n  //   yourPromise: 2,\n  //   theirPromise: 3,\n  //   notAPromise: 4\n  // }\n});\n```\n\nIf any of the `promises` given to `hash` are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.\n\nExample:\n\n```javascript\nlet promises = {\n  myPromise: resolve(1),\n  rejectedPromise: reject(new Error('rejectedPromise')),\n  anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),\n};\n\nhash(promises).then(function(hash){\n  // Code here never runs because there are rejected promises!\n}, function(reason) {\n  // reason.message === 'rejectedPromise'\n});\n```\n\nAn important note: `hash` is intended for plain JavaScript objects that\nare just a set of keys and values. `hash` will NOT preserve prototype\nchains.\n\nExample:\n\n```javascript\nimport { hash, resolve } from 'rsvp';\nfunction MyConstructor(){\n  this.example = resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: resolve('Proto Property')\n};\n\nlet myObject = new MyConstructor();\n\nhash(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: 'Example'\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n```",
      "itemtype": "method",
      "name": "hash",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "object",
          "description": "",
          "type": "Object"
        },
        {
          "name": "label",
          "description": "optional string that describes the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "promise that is fulfilled when all properties of `promises`\nhave been fulfilled, or rejected if any of them become rejected.",
        "type": "Promise"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/map.js",
      "line": 39,
      "description": "`map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called\n meaning that as soon as any promise resolves its value will be passed to `mapFn`.\n `map` returns a promise that will become fulfilled with the result of running\n `mapFn` on the values the promises become fulfilled with.\n\n For example:\n\n ```javascript\n import { map, resolve } from 'rsvp';\n\n let promise1 = resolve(1);\n let promise2 = resolve(2);\n let promise3 = resolve(3);\n let promises = [ promise1, promise2, promise3 ];\n\n let mapFn = function(item){\n   return item + 1;\n };\n\n map(promises, mapFn).then(function(result){\n   // result is [ 2, 3, 4 ]\n });\n ```\n\n If any of the `promises` given to `map` are rejected, the first promise\n that is rejected will be given as an argument to the returned promise's\n rejection handler. For example:\n\n ```javascript\n import { map, reject, resolve } from 'rsvp';\n\n let promise1 = resolve(1);\n let promise2 = reject(new Error('2'));\n let promise3 = reject(new Error('3'));\n let promises = [ promise1, promise2, promise3 ];\n\n let mapFn = function(item){\n   return item + 1;\n };\n\n map(promises, mapFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === '2'\n });\n ```\n\n `map` will also wait if a promise is returned from `mapFn`. For example,\n say you want to get all comments from a set of blog posts, but you need\n the blog posts first because they contain a url to those comments.\n\n ```javscript\n import { map } from 'rsvp';\n\n let mapFn = function(blogPost){\n   // getComments does some ajax and returns an Promise that is fulfilled\n   // with some comments data\n   return getComments(blogPost.comments_url);\n };\n\n // getBlogPosts does some ajax and returns an Promise that is fulfilled\n // with some blog post data\n map(getBlogPosts(), mapFn).then(function(comments){\n   // comments is the result of asking the server for the comments\n   // of all blog posts returned from getBlogPosts()\n });\n ```",
      "itemtype": "method",
      "name": "map",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "promises",
          "description": "",
          "type": "Array"
        },
        {
          "name": "mapFn",
          "description": "function to be called on each fulfilled promise.",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\n Useful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "promise that is fulfilled with the result of calling\n `mapFn` on each fulfilled promise or value when they become fulfilled.\n  The promise will be rejected if any of the given `promises` become rejected.",
        "type": "Promise"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/node.js",
      "line": 44,
      "description": "`denodeify` takes a 'node-style' function and returns a function that\nwill return an `Promise`. You can use `denodeify` in Node.js or the\nbrowser when you'd prefer to use promises over using callbacks. For example,\n`denodeify` transforms the following:\n\n```javascript\nlet fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) return handleError(err);\n  handleData(data);\n});\n```\n\ninto:\n\n```javascript\nlet fs = require('fs');\nlet readFile = denodeify(fs.readFile);\n\nreadFile('myfile.txt').then(handleData, handleError);\n```\n\nIf the node function has multiple success parameters, then `denodeify`\njust returns the first one:\n\n```javascript\nlet request = denodeify(require('request'));\n\nrequest('http://example.com').then(function(res) {\n  // ...\n});\n```\n\nHowever, if you need all success parameters, setting `denodeify`'s\nsecond parameter to `true` causes it to return all success parameters\nas an array:\n\n```javascript\nlet request = denodeify(require('request'), true);\n\nrequest('http://example.com').then(function(result) {\n  // result[0] -> res\n  // result[1] -> body\n});\n```\n\nOr if you pass it an array with names it returns the parameters as a hash:\n\n```javascript\nlet request = denodeify(require('request'), ['res', 'body']);\n\nrequest('http://example.com').then(function(result) {\n  // result.res\n  // result.body\n});\n```\n\nSometimes you need to retain the `this`:\n\n```javascript\nlet app = require('express')();\nlet render = denodeify(app.render.bind(app));\n```\n\nThe denodified function inherits from the original function. It works in all\nenvironments, except IE 10 and below. Consequently all properties of the original\nfunction are available to you. However, any properties you change on the\ndenodeified function won't be changed on the original function. Example:\n\n```javascript\nlet request = denodeify(require('request')),\n    cookieJar = request.jar(); // <- Inheritance is used here\n\nrequest('http://example.com', {jar: cookieJar}).then(function(res) {\n  // cookieJar.cookies holds now the cookies returned by example.com\n});\n```\n\nUsing `denodeify` makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:\n\n```javascript\nlet fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) { ... } // Handle error\n  fs.writeFile('myfile2.txt', data, function(err){\n    if (err) { ... } // Handle error\n    console.log('done')\n  });\n});\n```\n\nyou can chain the operations together using `then` from the returned promise:\n\n```javascript\nlet fs = require('fs');\nlet readFile = denodeify(fs.readFile);\nlet writeFile = denodeify(fs.writeFile);\n\nreadFile('myfile.txt').then(function(data){\n  return writeFile('myfile2.txt', data);\n}).then(function(){\n  console.log('done')\n}).catch(function(error){\n  // Handle error\n});\n```",
      "itemtype": "method",
      "name": "denodeify",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "nodeFunc",
          "description": "a 'node-style' function that takes a callback as\nits last argument. The callback expects an error to be passed as its first\nargument (if an error occurred, otherwise null), and the value from the\noperation as its second argument ('function(err, value){ }').",
          "type": "Function"
        },
        {
          "name": "options",
          "description": "An optional paramter that if set\nto `true` causes the promise to fulfill with the callback's success arguments\nas an array. This is useful if the node function has multiple success\nparamters. If you set this paramter to an array with names, the promise will\nfulfill with a hash with these names as keys and the success parameters as\nvalues.",
          "type": "Boolean|Array",
          "optional": true
        }
      ],
      "return": {
        "description": "a function that wraps `nodeFunc` to return a `Promise`",
        "type": "Function"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/promise.js",
      "line": 155,
      "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n\n```js\nfunction findAuthor(){\n  throw new Error('couldn\\'t find that author');\n}\n\n// synchronous\ntry {\n  findAuthor();\n} catch(reason) {\n  // something went wrong\n}\n\n// async with promises\nfindAuthor().catch(function(reason){\n  // something went wrong\n});\n```",
      "itemtype": "method",
      "name": "catch",
      "params": [
        {
          "name": "onRejection",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "class": "Promise",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/promise.js",
      "line": 187,
      "description": "`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\n\nSynchronous example:\n\n```js\nfindAuthor() {\n  if (Math.random() > 0.5) {\n    throw new Error();\n  }\n  return new Author();\n}\n\ntry {\n  return findAuthor(); // succeed or fail\n} catch(error) {\n  return findOtherAuthor();\n} finally {\n  // always runs\n  // doesn't affect the return value\n}\n```\n\nAsynchronous example:\n\n```js\nfindAuthor().catch(function(reason){\n  return findOtherAuthor();\n}).finally(function(){\n  // author was either found, or not\n});\n```",
      "itemtype": "method",
      "name": "finally",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "class": "Promise",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/promise.js",
      "line": 248,
      "description": "The primary way of interacting with a promise is through its `then` method,\nwhich registers callbacks to receive either a promise's eventual value or the\nreason why the promise cannot be fulfilled.\n\n```js\nfindUser().then(function(user){\n  // user is available\n}, function(reason){\n  // user is unavailable, and you are given the reason why\n});\n```\n\nChaining\n--------\n\nThe return value of `then` is itself a promise.  This second, 'downstream'\npromise is resolved with the return value of the first promise's fulfillment\nor rejection handler, or rejected if the handler throws an exception.\n\n```js\nfindUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return 'default name';\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `'default name'`\n});\n\nfindUser().then(function (user) {\n  throw new Error('Found user, but still unhappy');\n}, function (reason) {\n  throw new Error('`findUser` rejected and we\\'re unhappy');\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n  // If `findUser` rejected, `reason` will be '`findUser` rejected and we\\'re unhappy'.\n});\n```\nIf the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n```js\nfindUser().then(function (user) {\n  throw new PedagogicalException('Upstream error');\n}).then(function (value) {\n  // never reached\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // The `PedgagocialException` is propagated all the way down to here\n});\n```\n\nAssimilation\n------------\n\nSometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called *assimilation*.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // The user's comments are now available\n});\n```\n\nIf the assimliated promise rejects, then the downstream promise will also reject.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n  // If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n```\n\nSimple Example\n--------------\n\nSynchronous Example\n\n```javascript\nlet result;\n\ntry {\n  result = findResult();\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\nfindResult(function(result, err){\n  if (err) {\n    // failure\n  } else {\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindResult().then(function(result){\n  // success\n}, function(reason){\n  // failure\n});\n```\n\nAdvanced Example\n--------------\n\nSynchronous Example\n\n```javascript\nlet author, books;\n\ntry {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\n\nfunction foundBooks(books) {\n\n}\n\nfunction failure(reason) {\n\n}\n\nfindAuthor(function(author, err){\n  if (err) {\n    failure(err);\n    // failure\n  } else {\n    try {\n      findBoooksByAuthor(author, function(books, err) {\n        if (err) {\n          failure(err);\n        } else {\n          try {\n            foundBooks(books);\n          } catch(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } catch(error) {\n      failure(err);\n    }\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindAuthor().\n  then(findBooksByAuthor).\n  then(function(books){\n    // found books\n}).catch(function(reason){\n  // something went wrong\n});\n```",
      "itemtype": "method",
      "name": "then",
      "params": [
        {
          "name": "onFulfillment",
          "description": "",
          "type": "Function"
        },
        {
          "name": "onRejection",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "class": "Promise",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/race.js",
      "line": 3,
      "description": "This is a convenient alias for `Promise.race`.",
      "itemtype": "method",
      "name": "race",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "array",
          "description": "Array of promises.",
          "type": "Array"
        },
        {
          "name": "label",
          "description": "An optional label. This is useful\nfor tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/reject.js",
      "line": 3,
      "description": "This is a convenient alias for `Promise.reject`.",
      "itemtype": "method",
      "name": "reject",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "reason",
          "description": "value that the returned promise will be rejected with.",
          "type": "*"
        },
        {
          "name": "label",
          "description": "optional string for identifying the returned promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "a promise rejected with the given `reason`.",
        "type": "Promise"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/resolve.js",
      "line": 3,
      "description": "This is a convenient alias for `Promise.resolve`.",
      "itemtype": "method",
      "name": "resolve",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "value",
          "description": "value that the returned promise will be resolved with",
          "type": "*"
        },
        {
          "name": "label",
          "description": "optional string for identifying the returned promise.\nUseful for tooling.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "a promise that will become fulfilled with the given\n`value`",
        "type": "Promise"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "node_modules/rsvp/lib/rsvp/rethrow.js",
      "line": 1,
      "description": "`rethrow` will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.\n\nPromises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to `then`. However, `rethrow` will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. `rethrow` will also throw the\nerror again so the error can be handled by the promise per the spec.\n\n```javascript\nimport { rethrow } from 'rsvp';\n\nfunction throws(){\n  throw new Error('Whoops!');\n}\n\nlet promise = new Promise(function(resolve, reject){\n  throws();\n});\n\npromise.catch(rethrow).then(function(){\n  // Code here doesn't run because the promise became rejected due to an\n  // error!\n}, function (err){\n  // handle the error here\n});\n```\n\nThe 'Whoops' error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to `.then` or `.catch` on the returned promise.",
      "itemtype": "method",
      "name": "rethrow",
      "access": "public",
      "tagname": "",
      "static": 1,
      "params": [
        {
          "name": "reason",
          "description": "reason the promise became rejected.",
          "type": "Error"
        }
      ],
      "throws": {
        "description": "Error"
      },
      "class": "rsvp",
      "module": "rsvp"
    },
    {
      "file": "packages/@ember/-internals/console/index.js",
      "line": 28,
      "description": "Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.log('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
      "itemtype": "method",
      "name": "log",
      "params": [
        {
          "name": "arguments",
          "description": "",
          "type": "*"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Logger",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/console/index.js",
      "line": 52,
      "description": "Prints the arguments to the console with a warning icon.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n Ember.Logger.warn('Something happened!');\n // \"Something happened!\" will be printed to the console with a warning icon.\n ```",
      "itemtype": "method",
      "name": "warn",
      "params": [
        {
          "name": "arguments",
          "description": "",
          "type": "*"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Logger",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/console/index.js",
      "line": 75,
      "description": "Prints the arguments to the console with an error icon, red text and a stack trace.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n Ember.Logger.error('Danger! Danger!');\n // \"Danger! Danger!\" will be printed to the console in red text.\n ```",
      "itemtype": "method",
      "name": "error",
      "params": [
        {
          "name": "arguments",
          "description": "",
          "type": "*"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Logger",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/console/index.js",
      "line": 98,
      "description": "Logs the arguments to the console.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.info('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
      "itemtype": "method",
      "name": "info",
      "params": [
        {
          "name": "arguments",
          "description": "",
          "type": "*"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Logger",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/console/index.js",
      "line": 122,
      "description": "Logs the arguments to the console in blue text.\nYou can pass as many arguments as you want and they will be joined together with a space.\n\n ```javascript\n var foo = 1;\n Ember.Logger.debug('log value of foo:', foo);\n // \"log value of foo: 1\" will be printed to the console\n ```",
      "itemtype": "method",
      "name": "debug",
      "params": [
        {
          "name": "arguments",
          "description": "",
          "type": "*"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Logger",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/console/index.js",
      "line": 151,
      "description": "If the value passed into `Ember.Logger.assert` is not truthy it will throw an error with a stack trace.\n\n ```javascript\n Ember.Logger.assert(true); // undefined\n Ember.Logger.assert(true === false); // Throws an Assertion failed error.\n Ember.Logger.assert(true === false, 'Something invalid'); // Throws an Assertion failed error with message.\n ```",
      "itemtype": "method",
      "name": "assert",
      "params": [
        {
          "name": "bool",
          "description": "Value to test",
          "type": "Boolean"
        },
        {
          "name": "message",
          "description": "Assertion message on failed",
          "type": "String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Logger",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 100,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "registry",
      "type": "Registry",
      "since": "1.11.0",
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 107,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "cache",
      "type": "InheritingDict",
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 113,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "validationCache",
      "type": "InheritingDict",
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 119,
      "description": "Given a fullName return a corresponding instance.\n The default behavior is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.\n ```javascript\nlet registry = new Registry();\nlet container = registry.container();\n registry.register('api:twitter', Twitter);\n let twitter = container.lookup('api:twitter');\n twitter instanceof Twitter; // => true\n // by default the container will return singletons\nlet twitter2 = container.lookup('api:twitter');\ntwitter2 instanceof Twitter; // => true\n twitter === twitter2; //=> true\n```\n If singletons are not wanted, an optional flag can be provided at lookup.\n ```javascript\nlet registry = new Registry();\nlet container = registry.container();\n registry.register('api:twitter', Twitter);\n let twitter = container.lookup('api:twitter', { singleton: false });\nlet twitter2 = container.lookup('api:twitter', { singleton: false });\n twitter === twitter2; //=> false\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "lookup",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object",
          "optional": true,
          "props": [
            {
              "name": "source",
              "description": "The fullname of the request source (used for local lookup)",
              "type": "String",
              "optional": true
            }
          ]
        }
      ],
      "return": {
        "description": "",
        "type": "Any"
      },
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 159,
      "description": "A depth first traversal, destroying the container, its descendant containers and all\ntheir managed objects.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "destroy",
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 176,
      "description": "Clear either the entire cache or just the cache for a particular key.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "reset",
      "params": [
        {
          "name": "fullName",
          "description": "optional key to reset; if missing, resets everything",
          "type": "String"
        }
      ],
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 193,
      "description": "Returns an object that can be used to provide an owner to a\nmanually created instance.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "ownerInjection",
      "return": {
        "description": "",
        "type": "Object"
      },
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/container.ts",
      "line": 206,
      "description": "Given a fullName, return the corresponding factory. The consumer of the factory\nis responsible for the destruction of any factory instances, as there is no\nway for the container to ensure instances are destroyed when it itself is\ndestroyed.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "factoryFor",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object",
          "optional": true,
          "props": [
            {
              "name": "source",
              "description": "The fullname of the request source (used for local lookup)",
              "type": "String",
              "optional": true
            }
          ]
        }
      ],
      "return": {
        "description": "",
        "type": "Any"
      },
      "class": "Ember.Container",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 128,
      "description": "A backup registry for resolving registrations when no matches can be found.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "fallback",
      "type": "Registry",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 136,
      "description": "An object that has a `resolve` method that resolves a name.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "resolver",
      "type": "Resolver",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 144,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "registrations",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 150,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_typeInjections",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 157,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_injections",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 164,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_normalizeCache",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 171,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_resolveCache",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 178,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_options",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 185,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_typeOptions",
      "type": "InheritingDict",
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 192,
      "description": "Creates a container based on this registry.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "container",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "created container",
        "type": "Container"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 204,
      "description": "Registers a factory for later injection.\n\nExample:\n\n```javascript\nlet registry = new Registry();\n\nregistry.register('model:user', Person, {singleton: false });\nregistry.register('fruit:favorite', Orange);\nregistry.register('communication:main', Email, {singleton: false});\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "register",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "factory",
          "description": "",
          "type": "Function"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 238,
      "description": "Unregister a fullName\n\n```javascript\nlet registry = new Registry();\nregistry.register('model:user', User);\n\nregistry.resolve('model:user').create() instanceof User //=> true\n\nregistry.unregister('model:user')\nregistry.resolve('model:user') === undefined //=> true\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "unregister",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 268,
      "description": "Given a fullName return the corresponding factory.\n\nBy default `resolve` will retrieve the factory from\nthe registry.\n\n```javascript\nlet registry = new Registry();\nregistry.register('api:twitter', Twitter);\n\nregistry.resolve('api:twitter') // => Twitter\n```\n\nOptionally the registry can be provided with a custom resolver.\nIf provided, `resolve` will first provide the custom resolver\nthe opportunity to resolve the fullName, otherwise it will fallback\nto the registry.\n\n```javascript\nlet registry = new Registry();\nregistry.resolver = function(fullName) {\n   // lookup via the module system of choice\n };\n\n// the twitter factory is added to the module system\nregistry.resolve('api:twitter') // => Twitter\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "resolve",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object",
          "optional": true,
          "props": [
            {
              "name": "source",
              "description": "the fullname of the request source (used for local lookups)",
              "type": "String",
              "optional": true
            }
          ]
        }
      ],
      "return": {
        "description": "fullName's factory",
        "type": "Function"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 311,
      "description": "A hook that can be used to describe how the resolver will\nattempt to find the factory.\n\nFor example, the default Ember `.describe` returns the full\nclass name (including namespace) where Ember's resolver expects\nto find the `fullName`.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "describe",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "described fullName",
        "type": "String"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 334,
      "description": "A hook to enable custom fullName normalization behavior",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "normalizeFullName",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "normalized fullName",
        "type": "String"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 352,
      "description": "Normalize a fullName based on the application's conventions",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "normalize",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "normalized fullName",
        "type": "String"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 367,
      "itemtype": "method",
      "name": "makeToString",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "factory",
          "description": "",
          "type": "Any"
        },
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "toString function",
        "type": "Function"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 385,
      "description": "Given a fullName check if the container is aware of its factory\nor singleton instance.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "has",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object",
          "optional": true,
          "props": [
            {
              "name": "source",
              "description": "the fullname of the request source (used for local lookups)",
              "type": "String",
              "optional": true
            }
          ]
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 407,
      "description": "Allow registering options for all factories of a type.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\n// if all of type `connection` must not be singletons\nregistry.optionsForType('connection', { singleton: false });\n\nregistry.register('connection:twitter', TwitterConnection);\nregistry.register('connection:facebook', FacebookConnection);\n\nlet twitter = container.lookup('connection:twitter');\nlet twitter2 = container.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nlet facebook = container.lookup('connection:facebook');\nlet facebook2 = container.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "optionsForType",
      "params": [
        {
          "name": "type",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 448,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "options",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 490,
      "description": "Used only via `injection`.\n\nProvides a specialized form of injection, specifically enabling\nall objects of one type to be injected with a reference to another\nobject.\n\nFor example, provided each object of type `controller` needed a `router`.\none would do the following:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('router:main', Router);\nregistry.register('controller:user', UserController);\nregistry.register('controller:post', PostController);\n\nregistry.typeInjection('controller', 'router', 'router:main');\n\nlet user = container.lookup('controller:user');\nlet post = container.lookup('controller:post');\n\nuser.router instanceof Router; //=> true\npost.router instanceof Router; //=> true\n\n// both controllers share the same router\nuser.router === post.router; //=> true\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "typeInjection",
      "params": [
        {
          "name": "type",
          "description": "",
          "type": "String"
        },
        {
          "name": "property",
          "description": "",
          "type": "String"
        },
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 537,
      "description": "Defines injection rules.\n\nThese rules are used to inject dependencies onto objects when they\nare instantiated.\n\nTwo forms of injections are possible:\n\n* Injecting one fullName on another fullName\n* Injecting one fullName on a type\n\nExample:\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('source:main', Source);\nregistry.register('model:user', User);\nregistry.register('model:post', Post);\n\n// injecting one fullName on another fullName\n// eg. each user model gets a post model\nregistry.injection('model:user', 'post', 'model:post');\n\n// injecting one fullName on another type\nregistry.injection('model', 'source', 'source:main');\n\nlet user = container.lookup('model:user');\nlet post = container.lookup('model:post');\n\nuser.source instanceof Source; //=> true\npost.source instanceof Source; //=> true\n\nuser.post instanceof Post; //=> true\n\n// and both models share the same source\nuser.source === post.source; //=> true\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "injection",
      "params": [
        {
          "name": "factoryName",
          "description": "",
          "type": "String"
        },
        {
          "name": "property",
          "description": "",
          "type": "String"
        },
        {
          "name": "injectionName",
          "description": "",
          "type": "String"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 603,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "knownForType",
      "params": [
        {
          "name": "type",
          "description": "the type to iterate over",
          "type": "String"
        }
      ],
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/container/lib/registry.ts",
      "line": 664,
      "description": "Given a fullName and a source fullName returns the fully resolved\nfullName. Used to allow for local lookup.\n\n```javascript\nlet registry = new Registry();\n\n// the twitter factory is added to the module system\nregistry.expandLocalLookup('component:post-title', { source: 'template:post' }) // => component:post/post-title\n```",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "expandLocalLookup",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object",
          "optional": true,
          "props": [
            {
              "name": "source",
              "description": "the fullname of the request source (used for local lookups)",
              "type": "String",
              "optional": true
            }
          ]
        }
      ],
      "return": {
        "description": "fullName",
        "type": "String"
      },
      "class": "Ember.Registry",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 19,
      "description": "Determines whether Ember should add to `Array`, `Function`, and `String`\nnative object prototypes, a few extra methods in order to provide a more\nfriendly API.\n\nWe generally recommend leaving this option set to true however, if you need\nto turn it off, you can add the configuration property\n`EXTEND_PROTOTYPES` to `EmberENV` and set it to `false`.\n\nNote, when disabled (the default configuration for Ember Addons), you will\ninstead have to access all methods and functions from the Ember\nnamespace.",
      "itemtype": "property",
      "name": "EXTEND_PROTOTYPES",
      "type": "Boolean",
      "default": "true",
      "access": "public",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 44,
      "description": "The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log\na full stack trace during deprecation warnings.",
      "itemtype": "property",
      "name": "LOG_STACKTRACE_ON_DEPRECATION",
      "type": "Boolean",
      "default": "true",
      "access": "public",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 56,
      "description": "The `LOG_VERSION` property, when true, tells Ember to log versions of all\ndependent libraries in use.",
      "itemtype": "property",
      "name": "LOG_VERSION",
      "type": "Boolean",
      "default": "true",
      "access": "public",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 72,
      "description": "Whether to insert a `<div class=\"ember-view\" />` wrapper around the\napplication template. See RFC #280.\n\nThis is not intended to be set directly, as the implementation may change in\nthe future. Use `@ember/optional-features` instead.",
      "itemtype": "property",
      "name": "_APPLICATION_TEMPLATE_WRAPPER",
      "type": "Boolean",
      "default": "true",
      "access": "private",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 87,
      "description": "Whether to use Glimmer Component semantics (as opposed to the classic \"Curly\"\ncomponents semantics) for template-only components. See RFC #278.\n\nThis is not intended to be set directly, as the implementation may change in\nthe future. Use `@ember/optional-features` instead.",
      "itemtype": "property",
      "name": "_TEMPLATE_ONLY_GLIMMER_COMPONENTS",
      "type": "Boolean",
      "default": "false",
      "access": "private",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 102,
      "description": "Whether to perform extra bookkeeping needed to make the `captureRenderTree`\nAPI work.\n\nThis has to be set before the ember JavaScript code is evaluated. This is\nusually done by setting `window.EmberENV = { _DEBUG_RENDER_TREE: true };`\nbefore the \"vendor\" `<script>` tag in `index.html`.\n\nSetting the flag after Ember is already loaded will not work correctly. It\nmay appear to work somewhat, but fundamentally broken.\n\nThis is not intended to be set directly. Ember Inspector will enable the\nflag on behalf of the user as needed.\n\nThis flag is always on in development mode.\n\nThe flag is off by default in production mode, due to the cost associated\nwith the the bookkeeping work.\n\nThe expected flow is that Ember Inspector will ask the user to refresh the\npage after enabling the feature. It could also offer a feature where the\nuser add some domains to the \"always on\" list. In either case, Ember\nInspector will inject the code on the page to set the flag if needed.",
      "itemtype": "property",
      "name": "_DEBUG_RENDER_TREE",
      "type": "Boolean",
      "default": "false",
      "access": "private",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 134,
      "description": "Whether the app is using jQuery. See RFC #294.\n\nThis is not intended to be set directly, as the implementation may change in\nthe future. Use `@ember/optional-features` instead.",
      "itemtype": "property",
      "name": "_JQUERY_INTEGRATION",
      "type": "Boolean",
      "default": "true",
      "access": "private",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 148,
      "description": "Whether the app defaults to using async observers.\n\nThis is not intended to be set directly, as the implementation may change in\nthe future. Use `@ember/optional-features` instead.",
      "itemtype": "property",
      "name": "_DEFAULT_ASYNC_OBSERVERS",
      "type": "Boolean",
      "default": "false",
      "access": "private",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/environment/lib/env.ts",
      "line": 162,
      "description": "Controls the maximum number of scheduled rerenders without \"settling\". In general,\napplications should not need to modify this environment variable, but please\nopen an issue so that we can determine if a better default value is needed.",
      "itemtype": "property",
      "name": "_RERENDER_LOOP_LIMIT",
      "type": "number",
      "default": "1000",
      "access": "private",
      "tagname": "",
      "class": "Ember.EmberENV",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/container_debug_adapter.js",
      "line": 43,
      "description": "The resolver instance of the application\nbeing debugged. This property will be injected\non creation.",
      "itemtype": "property",
      "name": "resolver",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "ContainerDebugAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/container_debug_adapter.js",
      "line": 54,
      "description": "Returns true if it is possible to catalog a list of available\nclasses in the resolver for a given type.",
      "itemtype": "method",
      "name": "canCatalogEntriesByType",
      "params": [
        {
          "name": "type",
          "description": "The type. e.g. \"model\", \"controller\", \"route\".",
          "type": "String"
        }
      ],
      "return": {
        "description": "whether a list is available for this type.",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "ContainerDebugAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/container_debug_adapter.js",
      "line": 71,
      "description": "Returns the available classes a given type.",
      "itemtype": "method",
      "name": "catalogEntriesByType",
      "params": [
        {
          "name": "type",
          "description": "The type. e.g. \"model\", \"controller\", \"route\".",
          "type": "String"
        }
      ],
      "return": {
        "description": "An array of strings.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "ContainerDebugAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 58,
      "description": "The container-debug-adapter which is used\nto list all models.",
      "itemtype": "property",
      "name": "containerDebugAdapter",
      "default": "undefined",
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 69,
      "description": "The number of attributes to send\nas columns. (Enough to make the record\nidentifiable).",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "attributeLimit",
      "default": "3",
      "since": "1.3.0",
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 81,
      "description": "Ember Data > v1.0.0-beta.18\nrequires string model names to be passed\naround instead of the actual factories.\n\nThis is a stamp for the Ember Inspector\nto differentiate between the versions\nto be able to support older versions too.",
      "access": "public",
      "tagname": "",
      "itemtype": "property",
      "name": "acceptsModelName",
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 95,
      "description": "Stores all methods that clear observers.\nThese methods will be called on destruction.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "releaseMethods",
      "since": "1.3.0",
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 105,
      "description": "Specifies how records can be filtered.\nRecords returned will need to have a `filterValues`\nproperty with a key for every name in the returned array.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "getFilters",
      "return": {
        "description": "List of objects defining filters.\n The object should have a `name` and `desc` property.",
        "type": "Array"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 119,
      "description": "Fetch the model types and observe them for changes.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "watchModelTypes",
      "params": [
        {
          "name": "typesAdded",
          "description": "Callback to call to add types.\nTakes an array of objects containing wrapped types (returned from `wrapModelType`).",
          "type": "Function"
        },
        {
          "name": "typesUpdated",
          "description": "Callback to call when a type has changed.\nTakes an array of objects containing wrapped types.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "Method to call to remove all observers",
        "type": "Function"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 164,
      "description": "Fetch the records of a given type and observe them for changes.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "watchRecords",
      "params": [
        {
          "name": "modelName",
          "description": "The model name.",
          "type": "String"
        },
        {
          "name": "recordsAdded",
          "description": "Callback to call to add records.\nTakes an array of objects containing wrapped records.\nThe object should have the following properties:\n  columnValues: {Object} The key and value of a table cell.\n  object: {Object} The actual record object.",
          "type": "Function"
        },
        {
          "name": "recordsUpdated",
          "description": "Callback to call when a record has changed.\nTakes an array of objects containing wrapped records.",
          "type": "Function"
        },
        {
          "name": "recordsRemoved",
          "description": "Callback to call when a record has removed.\nTakes the following parameters:\n  index: The array index where the records were removed.\n  count: The number of records removed.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "Method to call to remove all observers.",
        "type": "Function"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 236,
      "description": "Clear all observers before destruction",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "willDestroy",
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 246,
      "description": "Detect whether a class is a model.\n\nTest that against the model class\nof your persistence library.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "detect",
      "return": {
        "description": "boolean Whether the class is a model class or not."
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 260,
      "description": "Get the columns for a given model type.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "columnsForType",
      "return": {
        "description": "An array of columns of the following format:\n name: {String} The name of the column.\n desc: {String} Humanized description (what would show in a table column name).",
        "type": "Array"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 273,
      "description": "Adds observers to a model type class.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "observeModelType",
      "params": [
        {
          "name": "modelName",
          "description": "The model type name.",
          "type": "String"
        },
        {
          "name": "typesUpdated",
          "description": "Called when a type is modified.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "The function to call to remove observers.",
        "type": "Function"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 311,
      "description": "Wraps a given model type and observes changes to it.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "wrapModelType",
      "params": [
        {
          "name": "klass",
          "description": "A model class.",
          "type": "Class"
        },
        {
          "name": "modelName",
          "description": "Name of the class.",
          "type": "String"
        }
      ],
      "return": {
        "description": "Contains the wrapped type and the function to remove observers\nFormat:\n  type: {Object} The wrapped type.\n    The wrapped type has the following format:\n      name: {String} The name of the type.\n      count: {Integer} The number of records available.\n      columns: {Columns} An array of columns to describe the record.\n      object: {Class} The actual Model type class.\n  release: {Function} The function to remove observers.",
        "type": "Object"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 342,
      "description": "Fetches all models defined in the application.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getModelTypes",
      "return": {
        "description": "Array of model types.",
        "type": "Array"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 371,
      "description": "Loops over all namespaces and all objects\nattached to them.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_getObjectsOnNamespaces",
      "return": {
        "description": "Array of model type strings.",
        "type": "Array"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 400,
      "description": "Fetches all loaded records for a given type.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "getRecords",
      "return": {
        "description": "An array of records.\n This array will be observed for changes,\n so it should update when new records are added/removed.",
        "type": "Array"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 413,
      "description": "Wraps a record and observers changes to it.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "wrapRecord",
      "params": [
        {
          "name": "record",
          "description": "The record instance.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The wrapped record. Format:\ncolumnValues: {Array}\nsearchKeywords: {Array}",
        "type": "Object"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 434,
      "description": "Gets the values for each column.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "getRecordColumnValues",
      "return": {
        "description": "Keys should match column names defined\nby the model type.",
        "type": "Object"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 446,
      "description": "Returns keywords to match when searching records.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "getRecordKeywords",
      "return": {
        "description": "Relevant keywords for search.",
        "type": "Array"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 457,
      "description": "Returns the values of filters defined by `getFilters`.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "getRecordFilterValues",
      "params": [
        {
          "name": "record",
          "description": "The record instance.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The filter values.",
        "type": "Object"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 469,
      "description": "Each record can have a color that represents its state.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "getRecordColor",
      "params": [
        {
          "name": "record",
          "description": "The record instance",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The records color.\n  Possible options: black, red, blue, green.",
        "type": "String"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/extension-support/lib/data_adapter.js",
      "line": 482,
      "description": "Observes all relevant properties and re-sends the wrapped record\nwhen a change occurs.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "observerRecord",
      "return": {
        "description": "The function to call to remove all observers.",
        "type": "Function"
      },
      "class": "DataAdapter",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component-managers/custom.ts",
      "line": 148,
      "description": "The CustomComponentManager allows addons to provide custom component\nimplementations that integrate seamlessly into Ember. This is accomplished\nthrough a delegate, registered with the custom component manager, which\nimplements a set of hooks that determine component behavior.\n\nTo create a custom component manager, instantiate a new CustomComponentManager\nclass and pass the delegate as the first argument:\n\n```js\nlet manager = new CustomComponentManager({\n  // ...delegate implementation...\n});\n```\n\n## Delegate Hooks\n\nThroughout the lifecycle of a component, the component manager will invoke\ndelegate hooks that are responsible for surfacing those lifecycle changes to\nthe end developer.\n\n* `create()` - invoked when a new instance of a component should be created\n* `update()` - invoked when the arguments passed to a component change\n* `getContext()` - returns the object that should be",
      "class": "Checkbox",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component-managers/custom.ts",
      "line": 282,
      "description": "Stores internal state about a component instance after it's been created.",
      "class": "Checkbox",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 37,
      "description": "By default, this component will add the `ember-checkbox` class to the component's element.",
      "itemtype": "property",
      "name": "classNames",
      "type": "Array | String",
      "default": "['ember-checkbox']",
      "access": "public",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 49,
      "description": "By default this component will forward a number of arguments to attributes on the the\ncomponent's element:\n\n* indeterminate\n* disabled\n* tabindex\n* name\n* autofocus\n* required\n* form\n\nWhen invoked with curly braces, this is the exhaustive list of HTML attributes you can\ncustomize (i.e. `{{input type=\"checkbox\" disabled=true}}`).\n\nWhen invoked with angle bracket invocation, this list is irrelevant, because you can use HTML\nattribute syntax to customize the element (i.e.\n`<Input @type=\"checkbox\" disabled data-custom=\"custom value\" />`). However, `@type` and\n`@checked` must be passed as named arguments, not attributes.",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "Array | String",
      "default": "['type', 'checked', 'indeterminate', 'disabled', 'tabindex', 'name', 'autofocus', 'required', 'form']",
      "access": "public",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 86,
      "description": "Sets the `type` attribute of the `Checkbox`'s element",
      "itemtype": "property",
      "name": "disabled",
      "default": "false",
      "access": "private",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 95,
      "description": "Sets the `disabled` attribute of the `Checkbox`'s element",
      "itemtype": "property",
      "name": "disabled",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 104,
      "description": "Corresponds to the `indeterminate` property of the `Checkbox`'s element",
      "itemtype": "property",
      "name": "disabled",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 113,
      "description": "Whenever the checkbox is inserted into the DOM, perform initialization steps, which include\nsetting the indeterminate property if needed.\n\nIf this method is overridden, `super` must be called.",
      "itemtype": "method",
      "name": "",
      "access": "public",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/checkbox.ts",
      "line": 127,
      "description": "Whenever the `change` event is fired on the checkbox, update its `checked` property to reflect\nwhether the checkbox is checked.\n\nIf this method is overridden, `super` must be called.",
      "itemtype": "method",
      "name": "",
      "access": "public",
      "tagname": "",
      "class": "Checkbox",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/input.ts",
      "line": 9,
      "description": "See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).",
      "itemtype": "method",
      "name": "input",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Hash"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/input.ts",
      "line": 18,
      "description": "The `Input` component lets you create an HTML `<input>` element.\n\n```handlebars\n<Input @value=\"987\" />\n```\n\ncreates an `<input>` element with `type=\"text\"` and value set to 987.\n\n### Text field\n\nIf no `type` argument is specified, a default of type 'text' is used.\n\n```handlebars\nSearch:\n<Input @value={{this.searchWord}} />\n```\n\nIn this example, the initial value in the `<input>` will be set to the value of\n`this.searchWord`. If the user changes the text, the value of `this.searchWord` will also be\nupdated.\n\n### Actions\n\nThe `Input` component takes a number of arguments with callbacks that are invoked in response to\nuser events.\n\n* `enter`\n* `insert-newline`\n* `escape-press`\n* `focus-in`\n* `focus-out`\n* `key-down`\n* `key-press`\n* `key-up`\n\nThese callbacks are passed to `Input` like this:\n\n```handlebars\n<Input @value={{this.searchWord}} @enter={{this.query}} />\n```\n\n### `<input>` HTML Attributes to Avoid\n\nIn most cases, if you want to pass an attribute to the underlying HTML `<input>` element, you\ncan pass the attribute directly, just like any other Ember component.\n\n```handlebars\n<Input @type=\"text\" size=\"10\" />\n```\n\nIn this example, the `size` attribute will be applied to the underlying `<input>` element in the\noutputted HTML.\n\nHowever, there are a few attributes where you **must** use the `@` version.\n\n* `@type`: This argument is used to control which Ember component is used under the hood\n* `@value`: The `@value` argument installs a two-way binding onto the element. If you wanted a\n  one-way binding, use `<input>` with the `value` property and the `input` event instead.\n* `@checked` (for checkboxes): like `@value`, the `@checked` argument installs a two-way binding\n  onto the element. If you wanted a one-way binding, use `<input type=\"checkbox\">` with\n  `checked` and the `input` event instead.\n\n### Extending `TextField`\n\nInternally, `<Input @type=\"text\" />` creates an instance of `TextField`, passing arguments from\nthe helper to `TextField`'s `create` method. Subclassing `TextField` is supported but not\nrecommended.\n\nSee [TextField](/ember/release/classes/TextField)\n\n### Checkbox\n\nTo create an `<input type=\"checkbox\">`:\n\n```handlebars\nEmberize Everything:\n<Input @type=\"checkbox\" @checked={{this.isEmberized}} name=\"isEmberized\" />\n```\n\nThis will bind the checked state of this checkbox to the value of `isEmberized` -- if either one\nchanges, it will be reflected in the other.\n\n### Extending `Checkbox`\n\nInternally, `<Input @type=\"checkbox\" />` creates an instance of `Checkbox`. Subclassing\n`TextField` is supported but not recommended.\n\nSee [Checkbox](/ember/release/classes/Checkbox)",
      "itemtype": "method",
      "name": "Input",
      "see": [
        "{TextField}",
        "{Checkbox}"
      ],
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Hash"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.components",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 14,
      "description": "The `LinkTo` component renders a link to the supplied `routeName` passing an optionally\nsupplied model to the route as its `model` context of the route. The block for `LinkTo`\nbecomes the contents of the rendered element:\n\n```handlebars\n<LinkTo @route='photoGallery'>\n  Great Hamster Photos\n</LinkTo>\n```\n\nThis will result in:\n\n```html\n<a href=\"/hamster-photos\">\n  Great Hamster Photos\n</a>\n```\n\n### Disabling the `LinkTo` component\n\nThe `LinkTo` component can be disabled by using the `disabled` argument. A disabled link\ndoesn't result in a transition when activated, and adds the `disabled` class to the `<a>`\nelement.\n\n(The class name to apply to the element can be overridden by using the `disabledClass`\nargument)\n\n```handlebars\n<LinkTo @route='photoGallery' @disabled={{true}}>\n  Great Hamster Photos\n</LinkTo>\n```\n\n### Handling `href`\n\n`<LinkTo>` will use your application's Router to fill the element's `href` property with a URL\nthat matches the path to the supplied `routeName`.\n\n### Handling current route\n\nThe `LinkTo` component will apply a CSS class name of 'active' when the application's current\nroute matches the supplied routeName. For example, if the application's current route is\n'photoGallery.recent', then the following invocation of `LinkTo`:\n\n```handlebars\n<LinkTo @route='photoGallery.recent'>\n  Great Hamster Photos\n</LinkTo>\n```\n\nwill result in\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"active\">\n  Great Hamster Photos\n</a>\n```\n\nThe CSS class used for active classes can be customized by passing an `activeClass` argument:\n\n```handlebars\n<LinkTo @route='photoGallery.recent' @activeClass=\"current-url\">\n  Great Hamster Photos\n</LinkTo>\n```\n\n```html\n<a href=\"/hamster-photos/this-week\" class=\"current-url\">\n  Great Hamster Photos\n</a>\n```\n\n### Keeping a link active for other routes\n\nIf you need a link to be 'active' even when it doesn't match the current route, you can use the\n`current-when` argument.\n\n```handlebars\n<LinkTo @route='photoGallery' @current-when='photos'>\n  Photo Gallery\n</LinkTo>\n```\n\nThis may be helpful for keeping links active for:\n\n* non-nested routes that are logically related\n* some secondary menu approaches\n* 'top navigation' with 'sub navigation' scenarios\n\nA link will be active if `current-when` is `true` or the current\nroute is the route this link would transition to.\n\nTo match multiple routes 'space-separate' the routes:\n\n```handlebars\n<LinkTo @route='gallery' @current-when='photos drawings paintings'>\n  Art Gallery\n</LinkTo>\n```\n\n### Supplying a model\n\nAn optional `model` argument can be used for routes whose\npaths contain dynamic segments. This argument will become\nthe model context of the linked route:\n\n```javascript\nRouter.map(function() {\n  this.route(\"photoGallery\", {path: \"hamster-photos/:photo_id\"});\n});\n```\n\n```handlebars\n<LinkTo @route='photoGallery' @model={{this.aPhoto}}>\n  {{aPhoto.title}}\n</LinkTo>\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n  Tomster\n</a>\n```\n\n### Supplying multiple models\n\nFor deep-linking to route paths that contain multiple\ndynamic segments, the `models` argument can be used.\n\nAs the router transitions through the route path, each\nsupplied model argument will become the context for the\nroute with the dynamic segments:\n\n```javascript\nRouter.map(function() {\n  this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" }, function() {\n    this.route(\"comment\", {path: \"comments/:comment_id\"});\n  });\n});\n```\n\nThis argument will become the model context of the linked route:\n\n```handlebars\n<LinkTo @route='photoGallery.comment' @models={{array this.aPhoto this.comment}}>\n  {{comment.body}}\n</LinkTo>\n```\n\n```html\n<a href=\"/hamster-photos/42/comments/718\">\n  A+++ would snuggle again.\n</a>\n```\n\n### Supplying an explicit dynamic segment value\n\nIf you don't have a model object available to pass to `LinkTo`,\nan optional string or integer argument can be passed for routes whose\npaths contain dynamic segments. This argument will become the value\nof the dynamic segment:\n\n```javascript\nRouter.map(function() {\n  this.route(\"photoGallery\", { path: \"hamster-photos/:photo_id\" });\n});\n```\n\n```handlebars\n<LinkTo @route='photoGallery' @model={{aPhotoId}}>\n  {{this.aPhoto.title}}\n</LinkTo>\n```\n\n```html\n<a href=\"/hamster-photos/42\">\n  Tomster\n</a>\n```\n\nWhen transitioning into the linked route, the `model` hook will\nbe triggered with parameters including this passed identifier.\n\n### Allowing Default Action\n\nBy default the `<LinkTo>` component prevents the default browser action by calling\n`preventDefault()` to avoid reloading the browser page.\n\nIf you need to trigger a full browser reload pass `@preventDefault={{false}}`:\n\n```handlebars\n<LinkTo @route='photoGallery' @model={{this.aPhotoId}} @preventDefault={{false}}>\n  {{this.aPhotoId.title}}\n</LinkTo>\n```\n\n### Supplying a `tagName`\n\nBy default `<LinkTo>` renders an `<a>` element. This can be overridden for a single use of\n`<LinkTo>` by supplying a `tagName` argument:\n\n```handlebars\n<LinkTo @route='photoGallery' @tagName='li'>\n  Great Hamster Photos\n</LinkTo>\n```\n\nThis produces:\n\n```html\n<li>\n  Great Hamster Photos\n</li>\n```\n\nIn general, this is not recommended. Instead, you can use the `transition-to` helper together\nwith a click event handler on the HTML tag of your choosing.\n\n### Supplying query parameters\n\nIf you need to add optional key-value pairs that appear to the right of the ? in a URL,\nyou can use the `query` argument.\n\n```handlebars\n<LinkTo @route='photoGallery' @query={{hash page=1 per_page=20}}>\n  Great Hamster Photos\n</LinkTo>\n```\n\nThis will result in:\n\n```html\n<a href=\"/hamster-photos?page=1&per_page=20\">\n  Great Hamster Photos\n</a>\n```",
      "itemtype": "method",
      "name": "LinkTo",
      "see": [
        "{LinkComponent}"
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.components",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 262,
      "description": "See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).",
      "itemtype": "method",
      "name": "link-to",
      "see": [
        "{Ember.Templates.components.LinkTo}"
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 293,
      "itemtype": "property",
      "name": "route",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 299,
      "itemtype": "property",
      "name": "model",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 305,
      "itemtype": "property",
      "name": "models",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 311,
      "itemtype": "property",
      "name": "query",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 317,
      "description": "Used to determine when this `LinkComponent` is active.",
      "itemtype": "property",
      "name": "current-when",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 325,
      "description": "Sets the `title` attribute of the `LinkComponent`'s HTML element.",
      "itemtype": "property",
      "name": "title",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 334,
      "description": "Sets the `rel` attribute of the `LinkComponent`'s HTML element.",
      "itemtype": "property",
      "name": "rel",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 343,
      "description": "Sets the `tabindex` attribute of the `LinkComponent`'s HTML element.",
      "itemtype": "property",
      "name": "tabindex",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 352,
      "description": "Sets the `target` attribute of the `LinkComponent`'s HTML element.",
      "since": "1.8.0",
      "itemtype": "property",
      "name": "target",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 362,
      "description": "The CSS class to apply to `LinkComponent`'s element when its `active`\nproperty is `true`.",
      "itemtype": "property",
      "name": "activeClass",
      "type": "String",
      "default": "active",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 373,
      "description": "The CSS class to apply to `LinkComponent`'s element when its `loading`\nproperty is `true`.",
      "itemtype": "property",
      "name": "loadingClass",
      "type": "String",
      "default": "loading",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 384,
      "description": "The CSS class to apply to a `LinkComponent`'s element when its `disabled`\nproperty is `true`.",
      "itemtype": "property",
      "name": "disabledClass",
      "type": "String",
      "default": "disabled",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 395,
      "description": "Determines whether the `LinkComponent` will trigger routing via\nthe `replaceWith` routing strategy.",
      "itemtype": "property",
      "name": "replace",
      "type": "Boolean",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 406,
      "description": "By default this component will forward `href`, `title`, `rel`, `tabindex`, and `target`\narguments to attributes on the component's element. When invoked with `{{link-to}}`, you can\nonly customize these attributes. When invoked with `<LinkTo>`, you can just use HTML\nattributes directly.",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "Array | String",
      "default": "['title', 'rel', 'tabindex', 'target']",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 419,
      "description": "By default this component will set classes on its element when any of the following arguments\nare truthy:\n\n* active\n* loading\n* disabled\n\nWhen these arguments are truthy, a class with the same name will be set on the element. When\nfalsy, the associated class will not be on the element.",
      "itemtype": "property",
      "name": "classNameBindings",
      "type": "Array",
      "default": "['active', 'loading', 'disabled', 'ember-transitioning-in', 'ember-transitioning-out']",
      "access": "public",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 437,
      "description": "By default this component responds to the `click` event. When the component element is an\n`<a>` element, activating the link in another way, such as using the keyboard, triggers the\nclick event.",
      "itemtype": "property",
      "name": "eventName",
      "type": "String",
      "default": "click",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 452,
      "description": "Triggers the `LinkComponent`'s routing behavior. If\n`eventName` is changed to a value other than `click`\nthe routing behavior will trigger on that custom event\ninstead.",
      "itemtype": "event",
      "name": "click",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 462,
      "description": "An overridable method called when `LinkComponent` objects are instantiated.\n\nExample:\n\n```app/components/my-link.js\nimport LinkComponent from '@ember/routing/link-component';\n\nexport default LinkComponent.extend({\n  init() {\n    this._super(...arguments);\n    console.log('Event is ' + this.get('eventName'));\n  }\n});\n```\n\nNOTE: If you do override `init` for a framework class like `Component`,\nbe sure to call `this._super(...arguments)` in your\n`init` declaration! If you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
      "itemtype": "method",
      "name": "init",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 533,
      "description": "Accessed as a classname binding to apply the component's `disabledClass`\nCSS `class` to the element when the link is disabled.\n\nWhen `true`, interactions with the element will not trigger route changes.",
      "itemtype": "property",
      "name": "disabled",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 556,
      "description": "Accessed as a classname binding to apply the component's `activeClass`\nCSS `class` to the element when the link is active.\n\nThis component is considered active when its `currentWhen` property is `true`\nor the application's current route is the route this component would trigger\ntransitions into.\n\nThe `currentWhen` property can match against multiple routes by separating\nroute names using the ` ` (space) character.",
      "itemtype": "property",
      "name": "active",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 667,
      "description": "Event handler that invokes the link, activating the associated route.",
      "itemtype": "method",
      "name": "_invoke",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 746,
      "description": "Sets the element's `href` attribute to the url for\nthe `LinkComponent`'s targeted route.\n\nIf the `LinkComponent`'s `tagName` is changed to a value other\nthan `a`, this property will be ignored.",
      "itemtype": "property",
      "name": "href",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/link-to.ts",
      "line": 829,
      "description": "The default href value to use while a link-to is loading.\nOnly applies when tagName is 'a'",
      "itemtype": "property",
      "name": "loadingHref",
      "type": "String",
      "default": "#",
      "access": "private",
      "tagname": "",
      "class": "LinkComponent",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 51,
      "description": "By default, this component will add the `ember-text-field` class to the component's element.",
      "itemtype": "property",
      "name": "classNames",
      "type": "Array | String",
      "default": "['ember-text-field']",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 62,
      "description": "By default this component will forward a number of arguments to attributes on the the\ncomponent's element:\n\n* accept\n* autocomplete\n* autosave\n* dir\n* formaction\n* formenctype\n* formmethod\n* formnovalidate\n* formtarget\n* height\n* inputmode\n* lang\n* list\n* type\n* max\n* min\n* multiple\n* name\n* pattern\n* size\n* step\n* value\n* width\n\nWhen invoked with `{{input type=\"text\"}}`, you can only customize these attributes. When invoked\nwith `<Input @type=\"text\" />`, you can just use HTML attributes directly.",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "Array | String",
      "default": "['accept', 'autocomplete', 'autosave', 'dir', 'formaction', 'formenctype', 'formmethod', 'formnovalidate', 'formtarget', 'height', 'inputmode', 'lang', 'list', 'type', 'max', 'min', 'multiple', 'name', 'pattern', 'size', 'step', 'value', 'width']",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 124,
      "description": "As the user inputs text, this property is updated to reflect the `value` property of the HTML\nelement.",
      "itemtype": "property",
      "name": "value",
      "type": "String",
      "default": "\"\"",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 135,
      "description": "The `type` attribute of the input element.",
      "itemtype": "property",
      "name": "type",
      "type": "String",
      "default": "\"text\"",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 159,
      "description": "The `size` of the text field in characters.",
      "itemtype": "property",
      "name": "size",
      "type": "String",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 169,
      "description": "The `pattern` attribute of input element.",
      "itemtype": "property",
      "name": "pattern",
      "type": "String",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 179,
      "description": "The `min` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
      "itemtype": "property",
      "name": "min",
      "type": "String",
      "default": "null",
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/text-field.ts",
      "line": 190,
      "description": "The `max` attribute of input element used with `type=\"number\"` or `type=\"range\"`.",
      "itemtype": "property",
      "name": "max",
      "type": "String",
      "default": "null",
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "TextField",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
      "line": 8,
      "description": "The `Textarea` component inserts a new instance of `<textarea>` tag into the template.\n\nThe `@value` argument provides the content of the `<textarea>`.\n\nThis template:\n\n```handlebars\n<Textarea @value=\"A bunch of text\" />\n```\n\nWould result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  A bunch of text\n</textarea>\n```\n\nThe `@value` argument is two-way bound. If the user types text into the textarea, the `@value`\nargument is updated. If the `@value` argument is updated, the text in the textarea is updated.\n\nIn the following example, the `writtenWords` property on the component will be updated as the user\ntypes 'Lots of text' into the text area of their browser's window.\n\n```app/components/word-editor.js\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class WordEditorComponent extends Component {\n  @tracked writtenWords = \"Lots of text that IS bound\";\n}\n```\n\n```handlebars\n<Textarea @value={{writtenWords}} />\n```\n\nWould result in the following HTML:\n\n```html\n<textarea class=\"ember-text-area\">\n  Lots of text that IS bound\n</textarea>\n```\n\nIf you wanted a one way binding, you could use the `<textarea>` element directly, and use the\n`value` DOM property and the `input` event.\n\n### Actions\n\nThe `Textarea` component takes a number of arguments with callbacks that are invoked in\nresponse to user events.\n\n* `enter`\n* `insert-newline`\n* `escape-press`\n* `focus-in`\n* `focus-out`\n* `key-press`\n\nThese callbacks are passed to `Textarea` like this:\n\n```handlebars\n<Textarea @value={{this.searchWord}} @enter={{this.query}} />\n```\n\n## Classic Invocation Syntax\n\nThe `Textarea` component can also be invoked using curly braces, just like any other Ember\ncomponent.\n\nFor example, this is an invocation using angle-bracket notation:\n\n```handlebars\n<Textarea @value={{this.searchWord}} @enter={{this.query}} />\n```\n\nYou could accomplish the same thing using classic invocation:\n\n```handlebars\n{{textarea value=this.searchWord enter=this.query}}\n```\n\nThe main difference is that angle-bracket invocation supports any HTML attribute using HTML\nattribute syntax, because attributes and arguments have different syntax when using angle-bracket\ninvocation. Curly brace invocation, on the other hand, only has a single syntax for arguments,\nand components must manually map attributes onto component arguments.\n\nWhen using classic invocation with `{{textarea}}`, only the following attributes are mapped onto\narguments:\n\n* rows\n* cols\n* name\n* selectionEnd\n* selectionStart\n* autocomplete\n* wrap\n* lang\n* dir\n* value\n\n## Classic `layout` and `layoutName` properties\n\nBecause HTML `textarea` elements do not contain inner HTML the `layout` and\n`layoutName` properties will not be applied.",
      "itemtype": "method",
      "name": "Textarea",
      "see": [
        "{TextArea}"
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.components",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/components/textarea.ts",
      "line": 122,
      "description": "See Ember.Templates.components.Textarea.",
      "itemtype": "method",
      "name": "textarea",
      "see": [
        "{Ember.Templates.components.textarea}"
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/-track-array.ts",
      "line": 10,
      "description": "This reference is used to get the `[]` tag of iterables, so we can trigger\nupdates to `{{each}}` when it changes. It is put into place by a template\ntransform at build time, similar to the (-each-in) helper",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/action.ts",
      "line": 17,
      "description": "The `{{action}}` helper provides a way to pass triggers for behavior (usually\njust a function) between components, and into components from controllers.\n\n### Passing functions with the action helper\n\nThere are three contexts an action helper can be used in. The first two\ncontexts to discuss are attribute context, and Handlebars value context.\n\n```handlebars\n{{! An example of attribute context }}\n<div onclick={{action \"save\"}}></div>\n{{! Examples of Handlebars value context }}\n{{input on-input=(action \"save\")}}\n{{yield (action \"refreshData\") andAnotherParam}}\n```\n\nIn these contexts,\nthe helper is called a \"closure action\" helper. Its behavior is simple:\nIf passed a function name, read that function off the `actions` property\nof the current context. Once that function is read, or immediately if a function was\npassed, create a closure over that function and any arguments.\nThe resulting value of an action helper used this way is simply a function.\n\nFor example, in the attribute context:\n\n```handlebars\n{{! An example of attribute context }}\n<div onclick={{action \"save\"}}></div>\n```\n\nThe resulting template render logic would be:\n\n```js\nvar div = document.createElement('div');\nvar actionFunction = (function(context){\n  return function() {\n    return context.actions.save.apply(context, arguments);\n  };\n})(context);\ndiv.onclick = actionFunction;\n```\n\nThus when the div is clicked, the action on that context is called.\nBecause the `actionFunction` is just a function, closure actions can be\npassed between components and still execute in the correct context.\n\nHere is an example action handler on a component:\n\n```app/components/my-component.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\n\nexport default class extends Component {\n  @action\n  save() {\n    this.model.save();\n  }\n}\n```\n\nActions are always looked up on the `actions` property of the current context.\nThis avoids collisions in the naming of common actions, such as `destroy`.\nTwo options can be passed to the `action` helper when it is used in this way.\n\n* `target=someProperty` will look to `someProperty` instead of the current\n  context for the `actions` hash. This can be useful when targeting a\n  service for actions.\n* `value=\"target.value\"` will read the path `target.value` off the first\n  argument to the action when it is called and rewrite the first argument\n  to be that value. This is useful when attaching actions to event listeners.\n\n### Invoking an action\n\nClosure actions curry both their scope and any arguments. When invoked, any\nadditional arguments are added to the already curried list.\nActions should be invoked using the [sendAction](/ember/release/classes/Component/methods/sendAction?anchor=sendAction)\nmethod. The first argument to `sendAction` is the action to be called, and\nadditional arguments are passed to the action function. This has interesting\nproperties combined with currying of arguments. For example:\n\n```app/components/update-name.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\n\nexport default class extends Component {\n  @action\n  setName(model, name) {\n    model.set('name', name);\n  }\n}\n```\n\n```app/components/update-name.hbs\n{{input on-input=(action (action 'setName' @model) value=\"target.value\")}}\n```\n\nThe first argument (`@model`) was curried over, and the run-time argument (`event`)\nbecomes a second argument. Action calls can be nested this way because each simply\nreturns a function. Any function can be passed to the `{{action}}` helper, including\nother actions.\n\nActions invoked with `sendAction` have the same currying behavior as demonstrated\nwith `on-input` above. For example:\n\n```app/components/my-input.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\n\nexport default class extends Component {\n  @action\n  setName(model, name) {\n    model.set('name', name);\n  }\n}\n```\n\n```handlebars\n<MyInput @submit={{action 'setName' @model}} />\n```\n\nor\n\n```handlebars\n{{my-input submit=(action 'setName' @model)}}\n```\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click() {\n    // Note that model is not passed, it was curried in the template\n    this.sendAction('submit', 'bob');\n  }\n});\n```\n\n### Attaching actions to DOM elements\n\nThe third context of the `{{action}}` helper can be called \"element space\".\nFor example:\n\n```handlebars\n{{! An example of element space }}\n<div {{action \"save\"}}></div>\n```\n\nUsed this way, the `{{action}}` helper provides a useful shortcut for\nregistering an HTML element in a template for a single DOM event and\nforwarding that interaction to the template's context (controller or component).\nIf the context of a template is a controller, actions used this way will\nbubble to routes when the controller does not implement the specified action.\nOnce an action hits a route, it will bubble through the route hierarchy.\n\n### Event Propagation\n\n`{{action}}` helpers called in element space can control event bubbling. Note\nthat the closure style actions cannot.\n\nEvents triggered through the action helper will automatically have\n`.preventDefault()` called on them. You do not need to do so in your event\nhandlers. If you need to allow event propagation (to handle file inputs for\nexample) you can supply the `preventDefault=false` option to the `{{action}}` helper:\n\n```handlebars\n<div {{action \"sayHello\" preventDefault=false}}>\n  <input type=\"file\" />\n  <input type=\"checkbox\" />\n</div>\n```\n\nTo disable bubbling, pass `bubbles=false` to the helper:\n\n```handlebars\n<button {{action 'edit' post bubbles=false}}>Edit</button>\n```\n\nTo disable bubbling with closure style actions you must create your own\nwrapper helper that makes use of `event.stopPropagation()`:\n\n```handlebars\n<div onclick={{disable-bubbling (action \"sayHello\")}}>Hello</div>\n```\n\n```app/helpers/disable-bubbling.js\nimport { helper } from '@ember/component/helper';\n\nexport function disableBubbling([action]) {\n  return function(event) {\n    event.stopPropagation();\n    return action(event);\n  };\n}\nexport default helper(disableBubbling);\n```\n\nIf you need the default handler to trigger you should either register your\nown event handler, or use event methods on your view class. See\n[\"Responding to Browser Events\"](/ember/release/classes/Component)\nin the documentation for `Component` for more information.\n\n### Specifying DOM event type\n\n`{{action}}` helpers called in element space can specify an event type.\nBy default the `{{action}}` helper registers for DOM `click` events. You can\nsupply an `on` option to the helper to specify a different DOM event name:\n\n```handlebars\n<div {{action \"anActionName\" on=\"doubleClick\"}}>\n  click me\n</div>\n```\n\nSee [\"Event Names\"](/ember/release/classes/Component) for a list of\nacceptable DOM event names.\n\n### Specifying whitelisted modifier keys\n\n`{{action}}` helpers called in element space can specify modifier keys.\nBy default the `{{action}}` helper will ignore click events with pressed modifier\nkeys. You can supply an `allowedKeys` option to specify which keys should not be ignored.\n\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"alt\"}}>\n  click me\n</div>\n```\n\nThis way the action will fire when clicking with the alt key pressed down.\nAlternatively, supply \"any\" to the `allowedKeys` option to accept any combination of modifier keys.\n\n```handlebars\n<div {{action \"anActionName\" allowedKeys=\"any\"}}>\n  click me with any key pressed\n</div>\n```\n\n### Specifying a Target\n\nA `target` option can be provided to the helper to change\nwhich object will receive the method call. This option must be a path\nto an object, accessible in the current context:\n\n```app/templates/application.hbs\n<div {{action \"anActionName\" target=someService}}>\n  click me\n</div>\n```\n\n```app/controllers/application.js\nimport Controller from '@ember/controller';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Controller {\n  @service someService;\n}\n```",
      "itemtype": "method",
      "name": "action",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/array.ts",
      "line": 9,
      "description": "Use the `{{array}}` helper to create an array to pass as an option to your\ncomponents.\n\n```handlebars\n<MyComponent @people={{array\n  'Tom Dale'\n  'Yehuda Katz'\n  this.myOtherPerson}}\n/>\n```\n or\n```handlebars\n{{my-component people=(array\n  'Tom Dale'\n  'Yehuda Katz'\n  this.myOtherPerson)\n}}\n```\n\nWould result in an object such as:\n\n```js\n['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]\n```\n\nWhere the 3rd item in the array is bound to updates of the `myOtherPerson` property.",
      "itemtype": "method",
      "name": "array",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Array"
        }
      ],
      "return": {
        "description": "Array",
        "type": "Array"
      },
      "since": "3.8.0",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/component.ts",
      "line": 5,
      "description": "The `{{component}}` helper lets you add instances of `Component` to a\ntemplate. See [Component](/ember/release/classes/Component) for\nadditional information on how a `Component` functions.\n`{{component}}`'s primary use is for cases where you want to dynamically\nchange which type of component is rendered as the state of your application\nchanges. This helper has three modes: inline, block, and nested.\n\n### Inline Form\n\nGiven the following template:\n\n```app/application.hbs\n{{component this.infographicComponentName}}\n```\n\nAnd the following application code:\n\n```app/controllers/application.js\nimport Controller from '@ember/controller';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class ApplicationController extends Controller {\n  @tracked isMarketOpen = 'live-updating-chart'\n\n  get infographicComponentName() {\n    return this.isMarketOpen ? 'live-updating-chart' : 'market-close-summary';\n  }\n}\n```\n\nThe `live-updating-chart` component will be appended when `isMarketOpen` is\n`true`, and the `market-close-summary` component will be appended when\n`isMarketOpen` is `false`. If the value changes while the app is running,\nthe component will be automatically swapped out accordingly.\nNote: You should not use this helper when you are consistently rendering the same\ncomponent. In that case, use standard component syntax, for example:\n\n```app/templates/application.hbs\n<LiveUpdatingChart />\n```\n\nor\n\n```app/templates/application.hbs\n{{live-updating-chart}}\n```\n\n### Block Form\n\nUsing the block form of this helper is similar to using the block form\nof a component. Given the following application template:\n\n```app/templates/application.hbs\n{{#component this.infographicComponentName}}\n  Last update: {{this.lastUpdateTimestamp}}\n{{/component}}\n```\n\nThe following controller code:\n\n```app/controllers/application.js\nimport Controller from '@ember/controller';\nimport { computed } from '@ember/object';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class ApplicationController extends Controller {\n  @tracked isMarketOpen = 'live-updating-chart'\n\n  get lastUpdateTimestamp() {\n    return new Date();\n  }\n\n  get infographicComponentName() {\n    return this.isMarketOpen ? 'live-updating-chart' : 'market-close-summary';\n  }\n}\n```\n\nAnd the following component template:\n\n```app/templates/components/live-updating-chart.hbs\n{{! chart }}\n{{yield}}\n```\n\nThe `Last Update: {{this.lastUpdateTimestamp}}` will be rendered in place of the `{{yield}}`.\n\n### Nested Usage\n\nThe `component` helper can be used to package a component path with initial attrs.\nThe included attrs can then be merged during the final invocation.\nFor example, given a `person-form` component with the following template:\n\n```app/templates/components/person-form.hbs\n{{yield (hash\n  nameInput=(component \"my-input-component\" value=@model.name placeholder=\"First Name\")\n)}}\n```\n\nWhen yielding the component via the `hash` helper, the component is invoked directly.\nSee the following snippet:\n\n```\n<PersonForm as |form|>\n  <form.nameInput @placeholder=\"Username\" />\n</PersonForm>\n```\n\nor\n```\n{{#person-form as |form|}}\n  {{form.nameInput placeholder=\"Username\"}}\n{{/person-form}}\n```\n\nWhich outputs an input whose value is already bound to `model.name` and `placeholder`\nis \"Username\".\n\nWhen yielding the component without the `hash` helper use the `component` helper.\nFor example, below is a `full-name` component template:\n\n```handlebars\n{{yield (component \"my-input-component\" value=@model.name placeholder=\"Name\")}}\n```\n\n```\n<FullName as |field|>\n  {{component field placeholder=\"Full name\"}}\n</FullName>\n```\nor\n```\n{{#full-name as |field|}}\n  {{component field placeholder=\"Full name\"}}\n{{/full-name}}\n```",
      "itemtype": "method",
      "name": "component",
      "since": "1.11.0",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/concat.ts",
      "line": 20,
      "description": "Concatenates the given arguments into a string.\n\nExample:\n\n```handlebars\n{{some-component name=(concat firstName \" \" lastName)}}\n\n{{! would pass name=\"<first name value> <last name value>\" to the component}}\n```\n\nor for angle bracket invocation, you actually don't need concat at all.\n\n```handlebars\n<SomeComponent @name=\"{{firstName}} {{lastName}}\" />\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "concat",
      "since": "1.13.0",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
      "line": 11,
      "description": "The `{{#each}}` helper loops over elements in a collection. It is an extension\nof the base Handlebars `{{#each}}` helper.\n\nThe default behavior of `{{#each}}` is to yield its inner block once for every\nitem in an array passing the item as the first block parameter.\n\nAssuming the `@developers` argument contains this array:\n\n```javascript\n[{ name: 'Yehuda' },{ name: 'Tom' }, { name: 'Paul' }];\n```\n\n```handlebars\n<ul>\n  {{#each @developers as |person|}}\n    <li>Hello, {{person.name}}!</li>\n  {{/each}}\n</ul>\n```\n\nThe same rules apply to arrays of primitives.\n\n```javascript\n['Yehuda', 'Tom', 'Paul']\n```\n\n```handlebars\n<ul>\n  {{#each @developerNames as |name|}}\n    <li>Hello, {{name}}!</li>\n  {{/each}}\n</ul>\n```\n\nDuring iteration, the index of each item in the array is provided as a second block\nparameter.\n\n```handlebars\n<ul>\n  {{#each @developers as |person index|}}\n    <li>Hello, {{person.name}}! You're number {{index}} in line</li>\n  {{/each}}\n</ul>\n```\n\n### Specifying Keys\n\nIn order to improve rendering speed, Ember will try to reuse the DOM elements\nwhere possible. Specifically, if the same item is present in the array both\nbefore and after the change, its DOM output will be reused.\n\nThe `key` option is used to tell Ember how to determine if the items in the\narray being iterated over with `{{#each}}` has changed between renders. By\ndefault the item's object identity is used.\n\nThis is usually sufficient, so in most cases, the `key` option is simply not\nneeded. However, in some rare cases, the objects' identities may change even\nthough they represent the same underlying data.\n\nFor example:\n\n```javascript\npeople.map(person => {\n  return { ...person, type: 'developer' };\n});\n```\n\nIn this case, each time the `people` array is `map`-ed over, it will produce\nan new array with completely different objects between renders. In these cases,\nyou can help Ember determine how these objects related to each other with the\n`key` option:\n\n```handlebars\n<ul>\n  {{#each @developers key=\"name\" as |person|}}\n    <li>Hello, {{person.name}}!</li>\n  {{/each}}\n</ul>\n```\n\nBy doing so, Ember will use the value of the property specified (`person.name`\nin the example) to find a \"match\" from the previous render. That is, if Ember\nhas previously seen an object from the `@developers` array with a matching\nname, its DOM elements will be re-used.\n\nThere are two special values for `key`:\n\n  * `@index` - The index of the item in the array.\n  * `@identity` - The item in the array itself.\n\n### {{else}} condition\n\n`{{#each}}` can have a matching `{{else}}`. The contents of this block will render\nif the collection is empty.\n\n```handlebars\n<ul>\n  {{#each @developers as |person|}}\n    <li>{{person.name}} is available!</li>\n  {{else}}\n    <li>Sorry, nobody is available for this task.</li>\n  {{/each}}\n</ul>\n```",
      "itemtype": "method",
      "name": "each",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/each-in.ts",
      "line": 122,
      "description": "The `{{each-in}}` helper loops over properties on an object.\n\nFor example, given this component definition:\n\n```app/components/developer-details.js\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class extends Component {\n  @tracked developer = {\n    \"name\": \"Shelly Sails\",\n    \"age\": 42\n  };\n}\n```\n\nThis template would display all properties on the `developer`\nobject in a list:\n\n```app/components/developer-details.hbs\n<ul>\n  {{#each-in this.developer as |key value|}}\n    <li>{{key}}: {{value}}</li>\n  {{/each-in}}\n</ul>\n```\n\nOutputting their name and age.",
      "itemtype": "method",
      "name": "each-in",
      "access": "public",
      "tagname": "",
      "since": "2.1.0",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/fn.ts",
      "line": 15,
      "description": "The `fn` helper allows you to ensure a function that you are passing off\nto another component, helper, or modifier has access to arguments that are\navailable in the template.\n\nFor example, if you have an `each` helper looping over a number of items, you\nmay need to pass a function that expects to receive the item as an argument\nto a component invoked within the loop. Here's how you could use the `fn`\nhelper to pass both the function and its arguments together:\n\n  ```app/templates/components/items-listing.hbs\n{{#each @items as |item|}}\n  <DisplayItem @item=item @select={{fn this.handleSelected item}} />\n{{/each}}\n```\n\n```app/components/items-list.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\n\nexport default class ItemsList extends Component {\n  @action\n  handleSelected(item) {\n    // ...snip...\n  }\n}\n```\n\nIn this case the `display-item` component will receive a normal function\nthat it can invoke. When it invokes the function, the `handleSelected`\nfunction will receive the `item` and any arguments passed, thanks to the\n`fn` helper.\n\nLet's take look at what that means in a couple circumstances:\n\n- When invoked as `this.args.select()` the `handleSelected` function will\n  receive the `item` from the loop as its first and only argument.\n- When invoked as `this.args.select('foo')` the `handleSelected` function\n  will receive the `item` from the loop as its first argument and the\n  string `'foo'` as its second argument.\n\nIn the example above, we used `@action` to ensure that `handleSelected` is\nproperly bound to the `items-list`, but let's explore what happens if we\nleft out `@action`:\n\n```app/components/items-list.js\nimport Component from '@glimmer/component';\n\nexport default class ItemsList extends Component {\n  handleSelected(item) {\n    // ...snip...\n  }\n}\n```\n\nIn this example, when `handleSelected` is invoked inside the `display-item`\ncomponent, it will **not** have access to the component instance. In other\nwords, it will have no `this` context, so please make sure your functions\nare bound (via `@action` or other means) before passing into `fn`!\n\nSee also [partial application](https://en.wikipedia.org/wiki/Partial_application).",
      "itemtype": "method",
      "name": "fn",
      "access": "public",
      "tagname": "",
      "since": "3.11.0",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/get.ts",
      "line": 12,
      "description": "Dynamically look up a property on an object. The second argument to `{{get}}`\nshould have a string value, although it can be bound.\n\nFor example, these two usages are equivalent:\n\n```app/components/developer-detail.js\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class extends Component {\n  @tracked developer = {\n    name: \"Sandi Metz\",\n    language: \"Ruby\"\n  }\n}\n```\n\n```handlebars\n{{this.developer.name}}\n{{get this.developer \"name\"}}\n```\n\nIf there were several facts about a person, the `{{get}}` helper can dynamically\npick one:\n\n```app/templates/application.hbs\n<DeveloperDetail @factName=\"language\" />\n```\n\n```handlebars\n{{get this.developer @factName}}\n```\n\nFor a more complex example, this template would allow the user to switch\nbetween showing the user's height and weight with a click:\n\n```app/components/developer-detail.js\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\n\nexport default class extends Component {\n  @tracked developer = {\n    name: \"Sandi Metz\",\n    language: \"Ruby\"\n  }\n\n  @tracked currentFact = 'name'\n\n  @action\n  showFact(fact) {\n    this.currentFact = fact;\n  }\n}\n```\n\n```app/components/developer-detail.js\n{{get this.developer this.currentFact}}\n\n<button {{on 'click' (fn this.showFact \"name\")}}>Show name</button>\n<button {{on 'click' (fn this.showFact \"language\")}}>Show language</button>\n```\n\nThe `{{get}}` helper can also respect mutable values itself. For example:\n\n```app/components/developer-detail.js\n<Input @value={{mut (get this.person this.currentFact)}} />\n\n<button {{on 'click' (fn this.showFact \"name\")}}>Show name</button>\n<button {{on 'click' (fn this.showFact \"language\")}}>Show language</button>\n```\n\nWould allow the user to swap what fact is being displayed, and also edit\nthat fact via a two-way mutable binding.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "get",
      "since": "2.1.0",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/hash.ts",
      "line": 9,
      "description": "Use the `{{hash}}` helper to create a hash to pass as an option to your\ncomponents. This is specially useful for contextual components where you can\njust yield a hash:\n\n```handlebars\n{{yield (hash\n   name='Sarah'\n   title=office\n)}}\n```\n\nWould result in an object such as:\n\n```js\n{ name: 'Sarah', title: this.get('office') }\n```\n\nWhere the `title` is bound to updates of the `office` property.\n\nNote that the hash is an empty object with no prototype chain, therefore\ncommon methods like `toString` are not available in the resulting hash.\nIf you need to use such a method, you can use the `call` or `apply`\napproach:\n\n```js\nfunction toString(obj) {\n  return Object.prototype.toString.apply(obj);\n}\n```",
      "itemtype": "method",
      "name": "hash",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "Hash",
        "type": "Object"
      },
      "since": "2.3.0",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
      "line": 40,
      "description": "The `if` helper allows you to conditionally render one of two branches,\ndepending on the \"truthiness\" of a property.\nFor example the following values are all falsey: `false`, `undefined`, `null`, `\"\"`, `0`, `NaN` or an empty array.\n\nThis helper has two forms, block and inline.\n\n## Block form\n\nYou can use the block form of `if` to conditionally render a section of the template.\n\nTo use it, pass the conditional value to the `if` helper,\nusing the block form to wrap the section of template you want to conditionally render.\nLike so:\n\n```app/templates/application.hbs\n<Weather />\n```\n\n```app/components/weather.hbs\n{{! will not render because greeting is undefined}}\n{{#if @isRaining}}\n  Yes, grab an umbrella!\n{{/if}}\n```\n\nYou can also define what to show if the property is falsey by using\nthe `else` helper.\n\n```app/components/weather.hbs\n{{#if @isRaining}}\n  Yes, grab an umbrella!\n{{else}}\n  No, it's lovely outside!\n{{/if}}\n```\n\nYou are also able to combine `else` and `if` helpers to create more complex\nconditional logic.\n\nFor the following template:\n\n ```app/components/weather.hbs\n{{#if @isRaining}}\n  Yes, grab an umbrella!\n{{else if @isCold}}\n  Grab a coat, it's chilly!\n{{else}}\n  No, it's lovely outside!\n{{/if}}\n```\n\nIf you call it by saying `isCold` is true:\n\n```app/templates/application.hbs\n<Weather @isCold={{true}} />\n```\n\nThen `Grab a coat, it's chilly!` will be rendered.\n\n## Inline form\n\nThe inline `if` helper conditionally renders a single property or string.\n\nIn this form, the `if` helper receives three arguments, the conditional value,\nthe value to render when truthy, and the value to render when falsey.\n\nFor example, if `useLongGreeting` is truthy, the following:\n\n```app/templates/application.hbs\n<Greeting @useLongGreeting={{true}} />\n```\n\n```app/components/greeting.hbs\n{{if @useLongGreeting \"Hello\" \"Hi\"}} Alex\n```\n\nWill render:\n\n```html\nHello Alex\n```\n\nOne detail to keep in mind is that both branches of the `if` helper will be evaluated,\nso if you have `{{if condition \"foo\" (expensive-operation \"bar\")`,\n`expensive-operation` will always calculate.",
      "itemtype": "method",
      "name": "if",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/if-unless.ts",
      "line": 135,
      "description": "The `unless` helper is the inverse of the `if` helper. It displays if a value\nis falsey (\"not true\" or \"is false\"). Example values that will display with\n`unless`: `false`, `undefined`, `null`, `\"\"`, `0`, `NaN` or an empty array.\n\n## Inline form\n\nThe inline `unless` helper conditionally renders a single property or string.\nThis helper acts like a ternary operator. If the first property is falsy,\nthe second argument will be displayed, otherwise, the third argument will be\ndisplayed\n\nFor example, if you pass a falsey `useLongGreeting` to the `Greeting` component:\n\n```app/templates/application.hbs\n<Greeting @useLongGreeting={{false}} />\n```\n\n```app/components/greeting.hbs\n{{unless @useLongGreeting \"Hi\" \"Hello\"}} Ben\n```\n\nThen it will display:\n\n```html\nHi Ben\n```\n\n## Block form\n\nLike the `if` helper, the `unless` helper also has a block form.\n\nThe following will not render anything:\n\n```app/templates/application.hbs\n<Greeting />\n```\n\n```app/components/greeting.hbs\n{{#unless @greeting}}\n  No greeting was found. Why not set one?\n{{/unless}}\n```\n\nYou can also use an `else` helper with the `unless` block. The\n`else` will display if the value is truthy.\n\nIf you have the following component:\n\n```app/components/logged-in.hbs\n{{#unless @userData}}\n  Please login.\n{{else}}\n  Welcome back!\n{{/unless}}\n```\n\nCalling it with a truthy `userData`:\n\n```app/templates/application.hbs\n<LoggedIn @userData={{hash username=\"Zoey\"}} />\n```\n\nWill render:\n\n```html\nWelcome back!\n```\n\nand calling it with a falsey `userData`:\n\n```app/templates/application.hbs\n<LoggedIn @userData={{false}} />\n```\n\nWill render:\n\n```html\nPlease login.\n```",
      "itemtype": "method",
      "name": "unless",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/loc.ts",
      "line": 8,
      "description": "Calls [String.loc](/ember/release/classes/String/methods/loc?anchor=loc) with the\nprovided string. This is a convenient way to localize text within a template.\nFor example:\n\n```javascript\nEmber.STRINGS = {\n  '_welcome_': 'Bonjour'\n};\n```\n\n```handlebars\n<div class='message'>\n  {{loc '_welcome_'}}\n</div>\n```\n\n```html\n<div class='message'>\n  Bonjour\n</div>\n```\n\nSee [String.loc](/ember/release/classes/String/methods/loc?anchor=loc) for how to\nset up localized string references.",
      "itemtype": "method",
      "name": "loc",
      "params": [
        {
          "name": "str",
          "description": "The string to format.",
          "type": "String"
        }
      ],
      "see": [
        "{String#loc}"
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/log.ts",
      "line": 8,
      "description": "`log` allows you to output the value of variables in the current rendering\ncontext. `log` also accepts primitive types such as strings or numbers.\n\n```handlebars\n{{log \"myVariable:\" myVariable }}\n```",
      "itemtype": "method",
      "name": "log",
      "params": [
        {
          "name": "params",
          "description": "",
          "type": "Array"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/mut.ts",
      "line": 9,
      "description": "The `mut` helper lets you __clearly specify__ that a child `Component` can update the\n(mutable) value passed to it, which will __change the value of the parent component__.\n\nTo specify that a parameter is mutable, when invoking the child `Component`:\n\n```handlebars\n<MyChild @childClickCount={{fn (mut totalClicks)}} />\n```\n\n or\n\n```handlebars\n{{my-child childClickCount=(mut totalClicks)}}\n```\n\nThe child `Component` can then modify the parent's value just by modifying its own\nproperty:\n\n```javascript\n// my-child.js\nexport default Component.extend({\n  click() {\n    this.incrementProperty('childClickCount');\n  }\n});\n```\n\nNote that for curly components (`{{my-component}}`) the bindings are already mutable,\nmaking the `mut` unnecessary.\n\nAdditionally, the `mut` helper can be combined with the `fn` helper to\nmutate a value. For example:\n\n```handlebars\n<MyChild @childClickCount={{this.totalClicks}} @click-count-change={{fn (mut totalClicks))}} />\n```\n\nor\n\n```handlebars\n{{my-child childClickCount=totalClicks click-count-change=(fn (mut totalClicks))}}\n```\n\nThe child `Component` would invoke the function with the new click value:\n\n```javascript\n// my-child.js\nexport default Component.extend({\n  click() {\n    this.get('click-count-change')(this.get('childClickCount') + 1);\n  }\n});\n```\n\nThe `mut` helper changes the `totalClicks` value to what was provided as the `fn` argument.\n\nThe `mut` helper, when used with `fn`, will return a function that\nsets the value passed to `mut` to its first argument. As an example, we can create a\nbutton that increments a value passing the value directly to the `fn`:\n\n```handlebars\n{{! inc helper is not provided by Ember }}\n<button onclick={{fn (mut count) (inc count)}}>\n  Increment count\n</button>\n```",
      "itemtype": "method",
      "name": "mut",
      "params": [
        {
          "name": "attr",
          "description": "the \"two-way\" attribute that can be modified.",
          "type": "Object",
          "optional": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/query-param.ts",
      "line": 11,
      "description": "This is a helper to be used in conjunction with the link-to helper.\nIt will supply url query parameters to the target route.",
      "example": [
        " In this example we are setting the `direction` query param to the value `\"asc\"`\n\n```app/templates/application.hbs\n<LinkTo\n  @route=\"posts\"\n  {{query-params direction=\"asc\"}}\n>\n  Sort\n</LinkTo>\n```"
      ],
      "itemtype": "method",
      "name": "query-params",
      "params": [
        {
          "name": "hash",
          "description": "takes a hash of query parameters",
          "type": "Object"
        }
      ],
      "return": {
        "description": "A `QueryParams` object for `{{link-to}}`",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/readonly.ts",
      "line": 8,
      "description": "The `readonly` helper let's you specify that a binding is one-way only,\ninstead of two-way.\nWhen you pass a `readonly` binding from an outer context (e.g. parent component),\nto to an inner context (e.g. child component), you are saying that changing that\nproperty in the inner context does not change the value in the outer context.\n\nTo specify that a binding is read-only, when invoking the child `Component`:\n\n```app/components/my-parent.js\nexport default Component.extend({\n  totalClicks: 3\n});\n```\n\n```app/templates/components/my-parent.hbs\n{{log totalClicks}} // -> 3\n<MyChild @childClickCount={{readonly totalClicks}} />\n```\n```\n{{my-child childClickCount=(readonly totalClicks)}}\n```\n\nNow, when you update `childClickCount`:\n\n```app/components/my-child.js\nexport default Component.extend({\n  click() {\n    this.incrementProperty('childClickCount');\n  }\n});\n```\n\nThe value updates in the child component, but not the parent component:\n\n```app/templates/components/my-child.hbs\n{{log childClickCount}} //-> 4\n```\n\n```app/templates/components/my-parent.hbs\n{{log totalClicks}} //-> 3\n<MyChild @childClickCount={{readonly totalClicks}} />\n```\nor\n```app/templates/components/my-parent.hbs\n{{log totalClicks}} //-> 3\n{{my-child childClickCount=(readonly totalClicks)}}\n```\n\n### Objects and Arrays\n\nWhen passing a property that is a complex object (e.g. object, array) instead of a primitive object (e.g. number, string),\nonly the reference to the object is protected using the readonly helper.\nThis means that you can change properties of the object both on the parent component, as well as the child component.\nThe `readonly` binding behaves similar to the `const` keyword in JavaScript.\n\nLet's look at an example:\n\nFirst let's set up the parent component:\n\n```app/components/my-parent.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  clicks: null,\n\n  init() {\n    this._super(...arguments);\n    this.set('clicks', { total: 3 });\n  }\n});\n```\n\n```app/templates/components/my-parent.hbs\n{{log clicks.total}} //-> 3\n<MyChild @childClicks={{readonly clicks}} />\n```\n```app/templates/components/my-parent.hbs\n{{log clicks.total}} //-> 3\n{{my-child childClicks=(readonly clicks)}}\n```\n\nNow, if you update the `total` property of `childClicks`:\n\n```app/components/my-child.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click() {\n    this.get('clicks').incrementProperty('total');\n  }\n});\n```\n\nYou will see the following happen:\n\n```app/templates/components/my-parent.hbs\n{{log clicks.total}} //-> 4\n<MyChild @childClicks={{readonly clicks}} />\n```\nor\n```app/templates/components/my-parent.hbs\n{{log clicks.total}} //-> 4\n{{my-child childClicks=(readonly clicks)}}\n```\n\n```app/templates/components/my-child.hbs\n{{log childClicks.total}} //-> 4\n```",
      "itemtype": "method",
      "name": "readonly",
      "params": [
        {
          "name": "attr",
          "description": "the read-only attribute.",
          "type": "Object",
          "optional": true
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helpers/unbound.ts",
      "line": 9,
      "description": "The `{{unbound}}` helper disconnects the one-way binding of a property,\nessentially freezing its value at the moment of rendering. For example,\nin this example the display of the variable `name` will not change even\nif it is set with a new value:\n\n```handlebars\n{{unbound this.name}}\n```\n\nLike any helper, the `unbound` helper can accept a nested helper expression.\nThis allows for custom helpers to be rendered unbound:\n\n```handlebars\n{{unbound (some-custom-helper)}}\n{{unbound (capitalize this.name)}}\n{{! You can use any helper, including unbound, in a nested expression }}\n{{capitalize (unbound this.name)}}\n```\n\nThe `unbound` helper only accepts a single argument, and it return an\nunbound value.",
      "itemtype": "method",
      "name": "unbound",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/modifiers/custom.ts",
      "line": 89,
      "description": "The CustomModifierManager allows addons to provide custom modifier\nimplementations that integrate seamlessly into Ember. This is accomplished\nthrough a delegate, registered with the custom modifier manager, which\nimplements a set of hooks that determine modifier behavior.\nTo create a custom modifier manager, instantiate a new CustomModifierManager\nclass and pass the delegate as the first argument:\n\n```js\nlet manager = new CustomModifierManager({\n  // ...delegate implementation...\n});\n```\n\n## Delegate Hooks\n\nThroughout the lifecycle of a modifier, the modifier manager will invoke\ndelegate hooks that are responsible for surfacing those lifecycle changes to\nthe end developer.\n* `createModifier()` - invoked when a new instance of a modifier should be created\n* `installModifier()` - invoked when the modifier is installed on the element\n* `updateModifier()` - invoked when the arguments passed to a modifier change\n* `destroyModifier()` - invoked when the modifier is about to be destroyed",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/modifiers/on.ts",
      "line": 224,
      "description": "The `{{on}}` modifier lets you easily add event listeners (it uses\n[EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\ninternally).\n\nFor example, if you'd like to run a function on your component when a `<button>`\nin the components template is clicked you might do something like:\n\n```app/components/like-post.hbs\n<button {{on 'click' this.saveLike}}>Like this post!</button>\n```\n\n```app/components/like-post.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\n\nexport default class LikePostComponent extends Component {\n  @action\n  saveLike() {\n    // someone likes your post!\n    // better send a request off to your server...\n  }\n}\n```\n\n### Arguments\n\n`{{on}}` accepts two positional arguments, and a few named arguments.\n\nThe positional arguments are:\n\n- `event` -- the name to use when calling `addEventListener`\n- `callback` -- the function to be passed to `addEventListener`\n\nThe named arguments are:\n\n- capture -- a `true` value indicates that events of this type will be dispatched\n  to the registered listener before being dispatched to any EventTarget beneath it\n  in the DOM tree.\n- once -- indicates that the listener should be invoked at most once after being\n  added. If true, the listener would be automatically removed when invoked.\n- passive -- if `true`, indicates that the function specified by listener will never\n  call preventDefault(). If a passive listener does call preventDefault(), the user\n  agent will do nothing other than generate a console warning. See\n  [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)\n  to learn more.\n\nThe callback function passed to `{{on}}` will receive any arguments that are passed\nto the event handler. Most commonly this would be the `event` itself.\n\nIf you would like to pass additional arguments to the function you should use\nthe `{{fn}}` helper.\n\nFor example, in our example case above if you'd like to pass in the post that\nwas being liked when the button is clicked you could do something like:\n\n```app/components/like-post.hbs\n<button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>\n```\n\nIn this case, the `saveLike` function will receive two arguments: the click event\nand the value of `@post`.\n\n### Function Context\n\nIn the example above, we used `@action` to ensure that `likePost` is\nproperly bound to the `items-list`, but let's explore what happens if we\nleft out `@action`:\n\n```app/components/like-post.js\nimport Component from '@glimmer/component';\n\nexport default class LikePostComponent extends Component {\n  saveLike() {\n    // ...snip...\n  }\n}\n```\n\nIn this example, when the button is clicked `saveLike` will be invoked,\nit will **not** have access to the component instance. In other\nwords, it will have no `this` context, so please make sure your functions\nare bound (via `@action` or other means) before passing into `on`!",
      "itemtype": "method",
      "name": "on",
      "access": "public",
      "tagname": "",
      "since": "3.11.0",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/syntax/in-element.ts",
      "line": 5,
      "description": "The `in-element` helper renders its block content outside of the regular flow,\ninto a DOM element given by its `destinationElement` positional argument.\n\nCommon use cases - often referred to as \"portals\" or \"wormholes\" - are rendering\ndropdowns, modals or tooltips close to the root of the page to bypass CSS overflow\nrules, or to render content to parts of the page that are outside of the control\nof the Ember app itself (e.g. embedded into a static or server rendered HTML page).\n\n```handlebars\n{{#in-element this.destinationElement}}\n  <div>Some content</div>\n{{/in-element}}\n```\n\n### Arguments\n\n`{{in-element}}` requires a single positional argument:\n\n- `destinationElement` -- the DOM element to render into. It must exist at the time\nof rendering.\n\nIt also supports an optional named argument:\n\n- `insertBefore` -- by default the DOM element's content is replaced when used as\n`destinationElement`. Passing `null` changes the behaviour to appended at the end\nof any existing content. Any other value than `null` is currently not supported.",
      "itemtype": "method",
      "name": "in-element",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/syntax/let.ts",
      "line": 5,
      "description": "The `let` helper receives one or more positional arguments and yields\nthem out as block params.\n\nThis allows the developer to introduce shorter names for certain computations\nin the template.\n\nThis is especially useful if you are passing properties to a component\nthat receives a lot of options and you want to clean up the invocation.\n\nFor the following example, the template receives a `post` object with\n`content` and `title` properties.\n\nWe are going to call the `my-post` component, passing a title which is\nthe title of the post suffixed with the name of the blog, the content\nof the post, and a series of options defined in-place.\n\n```handlebars\n{{#let\n    (concat post.title ' | The Ember.js Blog')\n    post.content\n    (hash\n      theme=\"high-contrast\"\n      enableComments=true\n    )\n    as |title content options|\n}}\n  <MyPost @title={{title}} @content={{content}} @options={{options}} />\n{{/let}}\n  ```\n or\n  ```handlebars\n{{#let\n    (concat post.title ' | The Ember.js Blog')\n    post.content\n    (hash\n      theme=\"high-contrast\"\n      enableComments=true\n    )\n    as |title content options|\n}}\n  {{my-post title=title content=content options=options}}\n{{/let}}\n  ```",
      "itemtype": "method",
      "name": "let",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/syntax/mount.ts",
      "line": 55,
      "description": "The `{{mount}}` helper lets you embed a routeless engine in a template.\nMounting an engine will cause an instance to be booted and its `application`\ntemplate to be rendered.\n\nFor example, the following template mounts the `ember-chat` engine:\n\n```handlebars\n{{! application.hbs }}\n{{mount \"ember-chat\"}}\n```\n\nAdditionally, you can also pass in a `model` argument that will be\nset as the engines model. This can be an existing object:\n\n```\n<div>\n  {{mount 'admin' model=userSettings}}\n</div>\n```\n\nOr an inline `hash`, and you can even pass components:\n\n```\n<div>\n  <h1>Application template!</h1>\n  {{mount 'admin' model=(hash\n      title='Secret Admin'\n      signInButton=(component 'sign-in-button')\n  )}}\n</div>\n```",
      "itemtype": "method",
      "name": "mount",
      "params": [
        {
          "name": "name",
          "description": "Name of the engine to mount.",
          "type": "String"
        },
        {
          "name": "model",
          "description": "Object that will be set as\n                        the model of the engine.",
          "type": "Object",
          "optional": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/syntax/outlet.ts",
      "line": 17,
      "description": "The `{{outlet}}` helper lets you specify where a child route will render in\nyour template. An important use of the `{{outlet}}` helper is in your\napplication's `application.hbs` file:\n\n```app/templates/application.hbs\n<MyHeader />\n\n<div class=\"my-dynamic-content\">\n  <!-- this content will change based on the current route, which depends on the current URL -->\n  {{outlet}}\n</div>\n\n<MyFooter />\n```\n\nYou may also specify a name for the `{{outlet}}`, which is useful when using more than one\n`{{outlet}}` in a template:\n\n```app/templates/application.hbs\n{{outlet \"menu\"}}\n{{outlet \"sidebar\"}}\n{{outlet \"main\"}}\n```\n\nYour routes can then render into a specific one of these `outlet`s by specifying the `outlet`\nattribute in your `renderTemplate` function:\n\n```app/routes/menu.js\nimport Route from '@ember/routing/route';\n\nexport default class MenuRoute extends Route {\n  renderTemplate() {\n    this.render({ outlet: 'menu' });\n  }\n}\n```\n\nSee the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more\ninformation on how your `route` interacts with the `{{outlet}}` helper.\nNote: Your content __will not render__ if there isn't an `{{outlet}}` for it.",
      "itemtype": "method",
      "name": "outlet",
      "params": [
        {
          "name": "name",
          "description": "",
          "type": "String",
          "optional": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 7,
      "description": "Not sure why this is here, we use the owner of the template for lookups.\n\nMaybe this is for the render helper?",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 14,
      "description": "The name of the parent outlet state.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 24,
      "description": "The name of the route/template",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 29,
      "description": "The controller (the self of the outlet component)",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 34,
      "description": "The model (the resolved value of the model hook)",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 39,
      "description": "template (the layout of the outlet component)",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 50,
      "description": "Nested outlet connections.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 55,
      "description": "Represents what was rendered into this outlet.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 60,
      "description": "Has to do with render helper and orphan outlets.\nWhether outlet state was rendered.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 67,
      "description": "Represents the root outlet.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 94,
      "description": "Represents the connected outlet.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/outlet.ts",
      "line": 118,
      "description": "Outlet state is dirtied from root.\nThis just using the parent tag for dirtiness.",
      "class": "@ember/template",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
      "line": 61,
      "description": "Mark a string as safe for unescaped output with Ember templates. If you\nreturn HTML from a helper, use this function to\nensure Ember's rendering layer does not escape the HTML.\n\n```javascript\nimport { htmlSafe } from '@ember/template';\n\nhtmlSafe('<div>someString</div>')\n```",
      "itemtype": "method",
      "name": "htmlSafe",
      "static": 1,
      "return": {
        "description": "A string that will not be HTML escaped by Handlebars.",
        "type": "SafeString"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/template",
      "module": "@ember/template"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/utils/string.ts",
      "line": 87,
      "description": "Detects if a string was decorated using `htmlSafe`.\n\n```javascript\nimport { htmlSafe, isHTMLSafe } from '@ember/template';\n\nvar plainString = 'plain string',\n    safeString = htmlSafe('<div>someValue</div>');\n\nisHTMLSafe(plainString); // false\nisHTMLSafe(safeString);  // true\n```",
      "itemtype": "method",
      "name": "isHTMLSafe",
      "static": 1,
      "return": {
        "description": "`true` if the string was decorated with `htmlSafe`, `false` otherwise.",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/template",
      "module": "@ember/template"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/views/outlet.ts",
      "line": 87,
      "class": "Component",
      "module": "@ember/template"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/views/outlet.ts",
      "line": 95,
      "class": "Component",
      "module": "@ember/template"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 800,
      "description": "Normally, Ember's component model is \"write-only\". The component takes a\nbunch of attributes that it got passed in, and uses them to render its\ntemplate.\n\nOne nice thing about this model is that if you try to set a value to the\nsame thing as last time, Ember (through HTMLBars) will avoid doing any\nwork on the DOM.\n\nThis is not just a performance optimization. If an attribute has not\nchanged, it is important not to clobber the element's \"hidden state\".\nFor example, if you set an input's `value` to the same value as before,\nit will clobber selection state and cursor position. In other words,\nsetting an attribute is not **always** idempotent.\n\nThis method provides a way to read an element's attribute and also\nupdate the last value Ember knows about at the same time. This makes\nsetting an attribute idempotent.\n\nIn particular, what this means is that if you get an `<input>` element's\n`value` attribute and then re-render the template with the same value,\nit will avoid clobbering the cursor and selection position.\nSince most attribute sets are idempotent in the browser, you typically\ncan get away with reading attributes using jQuery, but the most reliable\nway to do so is through this method.",
      "itemtype": "method",
      "name": "readDOMAttr",
      "params": [
        {
          "name": "name",
          "description": "the name of the attribute",
          "type": "String"
        }
      ],
      "return": {
        "description": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 851,
      "description": "The WAI-ARIA role of the control represented by this view. For example, a\nbutton may have a role of type 'button', or a pane may have a role of\ntype 'alertdialog'. This property is used by assistive software to help\nvisually challenged users navigate rich web applications.\n\nThe full list of valid WAI-ARIA roles is available at:\n[https://www.w3.org/TR/wai-aria/#roles_categorization](https://www.w3.org/TR/wai-aria/#roles_categorization)",
      "itemtype": "property",
      "name": "ariaRole",
      "type": "String",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 866,
      "description": "Enables components to take a list of parameters as arguments.\nFor example, a component that takes two parameters with the names\n`name` and `age`:\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nlet MyComponent = Component.extend();\n\nMyComponent.reopenClass({\n  positionalParams: ['name', 'age']\n});\n\nexport default MyComponent;\n```\n\nIt can then be invoked like this:\n\n```hbs\n{{my-component \"John\" 38}}\n```\n\nThe parameters can be referred to just like named parameters:\n\n```hbs\nName: {{name}}, Age: {{age}}.\n```\n\nUsing a string instead of an array allows for an arbitrary number of\nparameters:\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nlet MyComponent = Component.extend();\n\nMyComponent.reopenClass({\n  positionalParams: 'names'\n});\n\nexport default MyComponent;\n```\n\nIt can then be invoked like this:\n\n```hbs\n{{my-component \"John\" \"Michael\" \"Scott\"}}\n```\nThe parameters can then be referred to by enumerating over the list:\n\n```hbs\n{{#each names as |name|}}{{name}}{{/each}}\n```",
      "static": 1,
      "access": "public",
      "tagname": "",
      "itemtype": "property",
      "name": "positionalParams",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 927,
      "description": "Called when the attributes passed into the component have been updated.\nCalled both during the initial render of a container and during a rerender.\nCan be used in place of an observer; code placed here will be executed\nevery time any attribute updates.",
      "itemtype": "method",
      "name": "didReceiveAttrs",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 938,
      "description": "Called when the attributes passed into the component have been updated.\nCalled both during the initial render of a container and during a rerender.\nCan be used in place of an observer; code placed here will be executed\nevery time any attribute updates.",
      "itemtype": "event",
      "name": "didReceiveAttrs",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 948,
      "description": "Called after a component has been rendered, both on initial render and\nin subsequent rerenders.",
      "itemtype": "method",
      "name": "didRender",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 957,
      "description": "Called after a component has been rendered, both on initial render and\nin subsequent rerenders.",
      "itemtype": "event",
      "name": "didRender",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 965,
      "description": "Called before a component has been rendered, both on initial render and\nin subsequent rerenders.",
      "itemtype": "method",
      "name": "willRender",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 974,
      "description": "Called before a component has been rendered, both on initial render and\nin subsequent rerenders.",
      "itemtype": "event",
      "name": "willRender",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 982,
      "description": "Called when the attributes passed into the component have been changed.\nCalled only during a rerender, not during an initial render.",
      "itemtype": "method",
      "name": "didUpdateAttrs",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 991,
      "description": "Called when the attributes passed into the component have been changed.\nCalled only during a rerender, not during an initial render.",
      "itemtype": "event",
      "name": "didUpdateAttrs",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 999,
      "description": "Called when the component is about to update and rerender itself.\nCalled only during a rerender, not during an initial render.",
      "itemtype": "method",
      "name": "willUpdate",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1008,
      "description": "Called when the component is about to update and rerender itself.\nCalled only during a rerender, not during an initial render.",
      "itemtype": "event",
      "name": "willUpdate",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1016,
      "description": "Called when the component has updated and rerendered itself.\nCalled only during a rerender, not during an initial render.",
      "itemtype": "method",
      "name": "didUpdate",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1025,
      "description": "Called when the component has updated and rerendered itself.\nCalled only during a rerender, not during an initial render.",
      "itemtype": "event",
      "name": "didUpdate",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1033,
      "description": "Layout can be used to wrap content in a component.",
      "itemtype": "property",
      "name": "layout",
      "type": "Function",
      "access": "public",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1040,
      "description": "The name of the layout to lookup if no layout is provided.\nBy default `Component` will lookup a template with this name in\n`Ember.TEMPLATES` (a shared global object).",
      "itemtype": "property",
      "name": "layoutName",
      "type": "String",
      "default": "null",
      "access": "private",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1050,
      "description": "Returns a jQuery object for this component's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\n\nFor example, calling `component.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this component.\n\nPlease note that jQuery integration is off by default and this feature will\nnot work properly. To enable this feature, you can read the instructions in\nthe [jquery-integration optional feature guide](https://guides.emberjs.com/release/configuring-ember/optional-features/#toc_jquery-integration).",
      "itemtype": "method",
      "name": "$",
      "params": [
        {
          "name": "selector",
          "description": "a jQuery-compatible selector string",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "the jQuery object for the DOM node",
        "type": "JQuery"
      },
      "access": "public",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1067,
      "description": "The HTML `id` of the component's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n{{my-component elementId=\"a-really-cool-id\"}}\n```\n\n```handlebars\n<MyComponent @elementId=\"a-really-cool-id\" />\n```\nIf not manually set a default value will be provided by the framework.\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it. If you need to compute a dynamic value for the\n`elementId`, you should do this when the component or element is being\ninstantiated:\n\n```javascript\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    var index = this.get('index');\n    this.set('elementId', `component-id${index}`);\n  }\n});\n```",
      "itemtype": "property",
      "name": "elementId",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/component.ts",
      "line": 1100,
      "description": "If `false`, the view will appear hidden in DOM.",
      "itemtype": "property",
      "name": "isVisible",
      "type": "Boolean",
      "default": "null",
      "deprecated": true,
      "deprecationMessage": "Use `<div hidden={{this.isHidden}}>` or `{{#if this.showComponent}} <MyComponent /> {{/if}}`",
      "access": "public",
      "tagname": "",
      "class": "Component",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/glimmer-tracking-docs.ts",
      "line": 14,
      "description": "Marks a property as tracked. By default, values that are rendered in Ember app\ntemplates are _static_, meaning that updates to them won't cause the\napplication to rerender. Marking a property as tracked means that when that\nproperty changes, any templates that used that property, directly or\nindirectly, will rerender. For instance, consider this component:\n\n```handlebars\n<div>Count: {{this.count}}</div>\n<div>Times Ten: {{this.timesTen}}</div>\n<div>\n  <button {{on \"click\" this.plusOne}}>\n    Plus One\n  </button>\n</div>\n```\n\n```javascript\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\nimport { action } from '@ember/object';\n\nexport default class CounterComponent extends Component {\n  @tracked count = 0;\n\n  get timesTen() {\n    return this.count * 10;\n  }\n\n  @action\n  plusOne() {\n    this.count += 1;\n  }\n}\n```\n\nBoth the `{{this.count}}` and the `{{this.timesTen}}` properties in the\ntemplate will update whenever the button is clicked. Any tracked properties\nthat are used in any way to calculate a value that is used in the template\nwill cause a rerender when updated - this includes through method calls and\nother means:\n\n```javascript\nimport Component from '@glimmer/component';\nimport { tracked } from '@glimmer/tracking';\n\nclass Entry {\n  @tracked name;\n  @tracked phoneNumber;\n\n  constructor(name, phoneNumber) {\n    this.name = name;\n    this.phoneNumber = phoneNumber;\n  }\n}\n\nexport default class PhoneBookComponent extends Component {\n  entries = [\n    new Entry('Pizza Palace', 5551234),\n    new Entry('1st Street Cleaners', 5554321),\n    new Entry('Plants R Us', 5552468),\n  ];\n\n  // Any usage of this property will update whenever any of the names in the\n  // entries arrays are updated\n  get names() {\n    return this.entries.map(e => e.name);\n  }\n\n  // Any usage of this property will update whenever any of the numbers in the\n  // entries arrays are updated\n  get numbers() {\n    return this.getFormattedNumbers();\n  }\n\n  getFormattedNumbers() {\n    return this.entries\n      .map(e => e.phoneNumber)\n      .map(number => {\n        let numberString = '' + number;\n\n        return numberString.slice(0, 3) + '-' + numberString.slice(3);\n      });\n  }\n}\n```\n\nIt's important to note that setting tracked properties will always trigger an\nupdate, even if the property is set to the same value as it was before.\n\n```js\nlet entry = new Entry('Pizza Palace', 5551234);\n\n// if entry was used when rendering, this would cause a rerender, even though\n// the name is being set to the same value as it was before\nentry.name = entry.name;\n```\n\n`tracked` can also be used with the classic Ember object model in a similar\nmanner to classic computed properties:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { tracked } from '@glimmer/tracking';\n\nconst Entry = EmberObject.extend({\n  name: tracked(),\n  phoneNumber: tracked()\n});\n```\n\nOften this is unnecessary, but to ensure robust auto-tracking behavior it is\nadvisable to mark tracked state appropriately wherever possible.\n\nThis form of `tracked` also accepts an optional configuration object\ncontaining either an initial `value` or an `initializer` function (but not\nboth).\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { tracked } from '@glimmer/tracking';\n\nconst Entry = EmberObject.extend({\n  name: tracked({ value: 'Zoey' }),\n  favoriteSongs: tracked({\n    initializer: () => ['Raspberry Beret', 'Time After Time']\n  })\n});\n```",
      "itemtype": "method",
      "name": "tracked",
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@glimmer/tracking",
      "module": "@glimmer/tracking"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "line": 95,
      "description": "On a class-based helper, it may be useful to force a recomputation of that\nhelpers value. This is akin to `rerender` on a component.\n\nFor example, this component will rerender when the `currentUser` on a\nsession service changes:\n\n```app/helpers/current-user-email.js\nimport Helper from '@ember/component/helper'\nimport { inject as service } from '@ember/service'\nimport { observer } from '@ember/object'\n\nexport default Helper.extend({\n  session: service(),\n\n  onNewUser: observer('session.currentUser', function() {\n    this.recompute();\n  }),\n\n  compute() {\n    return this.get('session.currentUser.email');\n  }\n});\n```",
      "itemtype": "method",
      "name": "recompute",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Helper",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "line": 128,
      "description": "Override this function when writing a class-based helper.",
      "itemtype": "method",
      "name": "compute",
      "params": [
        {
          "name": "params",
          "description": "The positional arguments to the helper",
          "type": "Array"
        },
        {
          "name": "hash",
          "description": "The named arguments to the helper",
          "type": "Object"
        }
      ],
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "Helper",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/helper.ts",
      "line": 154,
      "description": "In many cases it is not necessary to use the full `Helper` class.\nThe `helper` method create pure-function helpers without instances.\nFor example:\n\n```app/helpers/format-currency.js\nimport { helper } from '@ember/component/helper';\n\nexport default helper(function([cents], {currency}) {\n  return `${currency}${cents * 0.01}`;\n});\n```",
      "static": 1,
      "params": [
        {
          "name": "helper",
          "description": "The helper function",
          "type": "Function"
        }
      ],
      "itemtype": "method",
      "name": "helper",
      "access": "public",
      "tagname": "",
      "since": "1.13.0",
      "class": "@ember/component/helper",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "line": 299,
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "line": 301,
      "description": "public componentDefHandleCount = 0;\nCalled while executing Append Op.PushDynamicComponentManager if string",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "line": 331,
      "description": "Called by RuntimeConstants to lookup unresolved handles.",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "line": 339,
      "description": "Called by CompileTimeLookup compiling Unknown or Helper OpCode",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "line": 356,
      "description": "Called by CompileTimeLookup compiling the",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/lib/resolver.ts",
      "line": 363,
      "description": "Called by CompileTimeLookup to lookup partial",
      "class": "Ember.Templates.helpers",
      "module": "@ember/component"
    },
    {
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 91,
      "description": "Use the `{{with}}` helper when you want to alias a property to a new name. This is helpful\nfor semantic clarity as it allows you to retain default scope or to reference a property from another\n`{{with}}` block.\n\nIf the aliased property is \"falsey\", for example: `false`, `undefined` `null`, `\"\"`, `0`, `NaN` or\nan empty array, the block will not be rendered.\n\n```app/templates/application.hbs\n{{! Will only render if user.posts contains items}}\n{{#with @model.posts as |blogPosts|}}\n  <div class=\"notice\">\n    There are {{blogPosts.length}} blog posts written by {{@model.name}}.\n  </div>\n  {{#each blogPosts as |post|}}\n    <li>{{post.title}}</li>\n  {{/each}}\n{{/with}}\n```",
      "itemtype": "method",
      "name": "with",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "HTML string",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 118,
      "description": "`{{yield}}` denotes an area of a template that will be rendered inside\nof another template.\n\n### Use with `Component`\n\nWhen designing components `{{yield}}` is used to denote where, inside the component's\ntemplate, an optional block passed to the component should render:\n\n```app/templates/application.hbs\n<LabeledTextfield @value={{@model.name}}>\n  First name:\n</LabeledTextfield>\n```\n\n```app/components/labeled-textfield.hbs\n<label>\n  {{yield}} <Input @value={{@value}} />\n</label>\n```\n\nResult:\n\n```html\n<label>\n  First name: <input type=\"text\" />\n</label>\n```\n\nAdditionally you can `yield` properties into the context for use by the consumer:\n\n```app/templates/application.hbs\n<LabeledTextfield @value={{@model.validation}} @validator={{this.firstNameValidator}} as |validationError|>\n  {{#if validationError}}\n    <p class=\"error\">{{validationError}}</p>\n  {{/if}}\n  First name:\n{{/labeled-textfield}}\n```\n\n```app/components/labeled-textfield.hbs\n<label>\n  {{yield this.validationError}} <Input @value={{@value}} />\n</label>\n```\n\nResult:\n\n```html\n<label>\n  <p class=\"error\">First Name must be at least 3 characters long.</p>\n  First name: <input type=\"text\" />\n</label>\n```",
      "itemtype": "method",
      "name": "yield",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Hash"
        }
      ],
      "return": {
        "description": "HTML string",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 179,
      "description": "`{{has-block}}` indicates if the component was invoked with a block.\n\nThis component is invoked with a block:\n\n```handlebars\n{{#my-component}}\n  Hi Jen!\n{{/my-component}}\n```\n\nThis component is invoked without a block:\n\n```handlebars\n{{my-component}}\n```\n\nUsing angle bracket invocation, this looks like:\n\n```html\n<MyComponent>Hi Jen!</MyComponent> {{! with a block}}\n```\n\n```html\n<MyComponent/> {{! without a block}}\n```\n\nThis is useful when you want to create a component that can optionally take a block\nand then render a default template when it is not invoked with a block.\n\n```app/templates/components/my-component.hbs\n{{#if (has-block)}}\n  Welcome {{yield}}, we are happy you're here!\n{{else}}\n  Hey you! You're great!\n{{/if}}\n```",
      "itemtype": "method",
      "name": "hasBlock",
      "params": [
        {
          "name": "the",
          "description": "name of the block. The name (at the moment) is either \"main\" or \"inverse\" (though only curly components support inverse)",
          "type": "String"
        }
      ],
      "return": {
        "description": "`true` if the component was invoked with a block",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 224,
      "description": "`{{has-block-params}}` indicates if the component was invoked with block params.\n\nThis component is invoked with block params:\n\n```handlebars\n{{#my-component as |favoriteFlavor|}}\n  Hi Jen!\n{{/my-component}}\n```\n\nThis component is invoked without block params:\n\n```handlebars\n{{#my-component}}\n  Hi Jenn!\n{{/my-component}}\n```\n\nWith angle bracket syntax, block params look like this:\n\n  ```handlebars\n<MyComponent as |favoriteFlavor|>\n  Hi Jen!\n</MyComponent>\n```\n\nAnd without block params:\n\n```handlebars\n<MyComponent>\n  Hi Jen!\n</MyComponent>\n```\n\nThis is useful when you want to create a component that can render itself\ndifferently when it is not invoked with block params.\n\n```app/templates/components/my-component.hbs\n{{#if (has-block-params)}}\n  Welcome {{yield this.favoriteFlavor}}, we're happy you're here and hope you\n  enjoy your favorite ice cream flavor.\n{{else}}\n  Welcome {{yield}}, we're happy you're here, but we're unsure what\n  flavor ice cream you would enjoy.\n{{/if}}\n```",
      "itemtype": "method",
      "name": "hasBlockParams",
      "params": [
        {
          "name": "the",
          "description": "name of the block. The name (at the moment) is either \"main\" or \"inverse\" (though only curly components support inverse)",
          "type": "String"
        }
      ],
      "return": {
        "description": "`true` if the component was invoked with block params",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 279,
      "description": "Execute the `debugger` statement in the current template's context.\n\n```handlebars\n{{debugger}}\n```\n\nWhen using the debugger helper you will have access to a `get` function. This\nfunction retrieves values available in the context of the template.\nFor example, if you're wondering why a value `{{foo}}` isn't rendering as\nexpected within a template, you could place a `{{debugger}}` statement and,\nwhen the `debugger;` breakpoint is hit, you can attempt to retrieve this value:\n\n```\n> get('foo')\n```\n\n`get` is also aware of keywords. So in this situation\n\n```handlebars\n{{#each this.items as |item|}}\n  {{debugger}}\n{{/each}}\n```\n\nYou'll be able to get values from the current item:\n\n```\n> get('item.name')\n```\n\nYou can also access the context of the view to make sure it is the object that\nyou expect:\n\n```\n> context\n```",
      "itemtype": "method",
      "name": "debugger",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/glimmer/index.ts",
      "line": 322,
      "description": "The `partial` helper renders another template without\nchanging the template context:\n\n```handlebars\n{{foo}}\n{{partial \"nav\"}}\n```\n\nThe above example template will render a template named\n\"-nav\", which has the same context as the parent template\nit's rendered into, so if the \"-nav\" template also referenced\n`{{foo}}`, it would print the same thing as the `{{foo}}`\nin the above example.\n\nIf a \"-nav\" template isn't found, the `partial` helper will\nfall back to a template named \"nav\".\n\n### Bound template names\n\nThe parameter supplied to `partial` can also be a path\nto a property containing a template name, e.g.:\n\n```handlebars\n{{partial someTemplateName}}\n```\n\nThe above example will look up the value of `someTemplateName`\non the template context (e.g. a controller) and use that\nvalue as the name of the template to render. If the resolved\nvalue is falsy, nothing will be rendered. If `someTemplateName`\nchanges, the partial will be re-rendered using the new template\nname.",
      "itemtype": "method",
      "name": "partial",
      "params": [
        {
          "name": "partialName",
          "description": "The name of the template to render minus the leading underscore.",
          "type": "String"
        }
      ],
      "deprecated": true,
      "deprecationMessage": "Use a component instead",
      "access": "public",
      "tagname": "",
      "class": "Ember.Templates.helpers",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/meta/lib/meta.ts",
      "line": 487,
      "description": "Flattening is based on a global revision counter. If the revision has\nbumped it means that somewhere in a class inheritance chain something has\nchanged, so we need to reflatten everything. This can only happen if:\n\n1. A meta has been flattened (listener has been called)\n2. The meta is a prototype meta with children who have inherited its\n   listeners\n3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)\n\nThis is a very rare occurrence, so while the counter is global it shouldn't\nbe updated very often in practice.",
      "class": "Ember",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/meta/lib/meta.ts",
      "line": 687,
      "description": "Retrieves the meta hash for an object. If `writable` is true ensures the\nhash is writable for this object as well.\n\nThe meta object contains information about computed property descriptors as\nwell as any watched properties and other information. You generally will\nnot access this information directly but instead work with higher level\nmethods that manipulate this hash indirectly.",
      "itemtype": "method",
      "name": "meta",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "obj",
          "description": "The object to retrieve meta for",
          "type": "Object"
        },
        {
          "name": "writable",
          "description": "Pass `false` if you do not intend to modify\n  the meta hash, allowing the method to avoid making an unnecessary copy.",
          "type": "Boolean",
          "optional": true,
          "optdefault": "true"
        }
      ],
      "return": {
        "description": "the meta hash for an object",
        "type": "Object"
      },
      "class": "Ember",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/cache.ts",
      "line": 15,
      "description": "Receives a function, and returns a wrapped version of it that memoizes based on\n_autotracking_. The function will only rerun whenever any tracked values used\nwithin it have changed. Otherwise, it will return the previous value.\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { createCache, getValue } from '@glimmer/tracking/primitives/cache';\n\nclass State {\n  @tracked value;\n}\n\nlet state = new State();\nlet computeCount = 0;\n\nlet counter = createCache(() => {\n  // consume the state. Now, `counter` will\n  // only rerun if `state.value` changes.\n  state.value;\n\n  return ++computeCount;\n});\n\ngetValue(counter); // 1\n\n// returns the same value because no tracked state has changed\ngetValue(counter); // 1\n\nstate.value = 'foo';\n\n// reruns because a tracked value used in the function has changed,\n// incermenting the counter\ngetValue(counter); // 2\n```",
      "itemtype": "method",
      "name": "createCache",
      "category": [
        "EMBER_CACHE_API"
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@glimmer/tracking/primitives/cache",
      "module": "@glimmer/tracking/primitives/cache"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/cache.ts",
      "line": 58,
      "description": "Gets the value of a cache created with `createCache`.\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { createCache, getValue } from '@glimmer/tracking/primitives/cache';\n\nlet computeCount = 0;\n\nlet counter = createCache(() => {\n  return ++computeCount;\n});\n\ngetValue(counter); // 1\n```",
      "itemtype": "method",
      "name": "getValue",
      "category": [
        "EMBER_CACHE_API"
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@glimmer/tracking/primitives/cache",
      "module": "@glimmer/tracking/primitives/cache"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/cache.ts",
      "line": 81,
      "description": "Can be used to check if a memoized function is _constant_. If no tracked state\nwas used while running a memoized function, it will never rerun, because nothing\ncan invalidate its result. `isConst` can be used to determine if a memoized\nfunction is constant or not, in order to optimize code surrounding that\nfunction.\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { createCache, getValue, isConst } from '@glimmer/tracking/primitives/cache';\n\nclass State {\n  @tracked value;\n}\n\nlet state = new State();\nlet computeCount = 0;\n\nlet counter = createCache(() => {\n  // consume the state\n  state.value;\n\n  return computeCount++;\n});\n\nlet constCounter = createCache(() => {\n  return computeCount++;\n});\n\ngetValue(counter);\ngetValue(constCounter);\n\nisConst(counter); // false\nisConst(constCounter); // true\n```\n\nIf called on a cache that hasn't been accessed yet, it will throw an\nerror. This is because there's no way to know if the function will be constant\nor not yet, and so this helps prevent missing an optimization opportunity on\naccident.",
      "itemtype": "method",
      "name": "isConst",
      "category": [
        "EMBER_CACHE_API"
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@glimmer/tracking/primitives/cache",
      "module": "@glimmer/tracking/primitives/cache"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 617,
      "description": "Call on a computed property to set it into read-only mode. When in this\nmode the computed property will throw an error when set.\n\nExample:\n\n```javascript\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  @computed().readOnly()\n  get guid() {\n    return 'guid-guid-guid';\n  }\n}\n\nlet person = new Person();\nset(person, 'guid', 'new-guid'); // will throw an exception\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  guid: computed(function() {\n    return 'guid-guid-guid';\n  }).readOnly()\n});\n\nlet person = Person.create();\nperson.set('guid', 'new-guid'); // will throw an exception\n```",
      "itemtype": "method",
      "name": "readOnly",
      "return": {
        "description": "this",
        "type": "ComputedProperty"
      },
      "chainable": 1,
      "access": "public",
      "tagname": "",
      "class": "ComputedProperty",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 667,
      "description": "Call on a computed property to set it into non-cached mode. When in this\nmode the computed property will not automatically cache the return value.\nIt also does not automatically fire any change events. You must manually notify\nany changes if you want to observe this property.\n\nDependency keys have no effect on volatile properties as they are for cache\ninvalidation and notification when cached value is invalidated.\n\nExample:\n\n```javascript\nimport { computed } from '@ember/object';\n\nclass CallCounter {\n  _calledCount = 0;\n\n  @computed().volatile()\n  get calledCount() {\n    return this._calledCount++;\n  }\n}\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { computed } from '@ember/object';\n\nlet CallCounter = EmberObject.extend({\n  _calledCount: 0,\n\n  value: computed(function() {\n    return this._calledCount++;\n  }).volatile()\n});\n```",
      "itemtype": "method",
      "name": "volatile",
      "deprecated": true,
      "return": {
        "description": "this",
        "type": "ComputedProperty"
      },
      "chainable": 1,
      "access": "public",
      "tagname": "",
      "class": "ComputedProperty",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 724,
      "description": "Sets the dependent keys on this computed property. Pass any number of\narguments containing key paths that this computed property depends on.\n\nExample:\n\n```javascript\nimport EmberObject, { computed } from '@ember/object';\n\nclass President {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  // Tell Ember that this computed property depends on firstName\n  // and lastName\n  @computed().property('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet president = new President('Barack', 'Obama');\n\npresident.fullName; // 'Barack Obama'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { computed } from '@ember/object';\n\nlet President = EmberObject.extend({\n  fullName: computed(function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember that this computed property depends on firstName\n    // and lastName\n  }).property('firstName', 'lastName')\n});\n\nlet president = President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n```",
      "itemtype": "method",
      "name": "property",
      "deprecated": true,
      "params": [
        {
          "name": "path",
          "description": "zero or more property paths",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "this",
        "type": "ComputedProperty"
      },
      "chainable": 1,
      "access": "public",
      "tagname": "",
      "class": "ComputedProperty",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 795,
      "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For example,\ncomputed property functions may close over variables that are then no longer\navailable for introspection. You can pass a hash of these values to a\ncomputed property.\n\nExample:\n\n```javascript\nimport { computed } from '@ember/object';\nimport Person from 'my-app/utils/person';\n\nclass Store {\n  @computed().meta({ type: Person })\n  get person() {\n    let personId = this.personId;\n    return Person.create({ id: personId });\n  }\n}\n```\n\nClassic Class Example:\n\n```javascript\nimport { computed } from '@ember/object';\nimport Person from 'my-app/utils/person';\n\nconst Store = EmberObject.extend({\n  person: computed(function() {\n    let personId = this.get('personId');\n    return Person.create({ id: personId });\n  }).meta({ type: Person })\n});\n```\n\nThe hash that you pass to the `meta()` function will be saved on the\ncomputed property descriptor under the `_meta` key. Ember runtime\nexposes a public API for retrieving these values from classes,\nvia the `metaForProperty()` function.",
      "itemtype": "method",
      "name": "meta",
      "params": [
        {
          "name": "meta",
          "description": "",
          "type": "Object"
        }
      ],
      "chainable": 1,
      "access": "public",
      "tagname": "",
      "class": "ComputedProperty",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 864,
      "description": "This helper returns a new property descriptor that wraps the passed\ncomputed property function. You can use this helper to define properties with\nnative decorator syntax, mixins, or via `defineProperty()`.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', function() {\n    return `${this.get('firstName')} ${this.get('lastName')}`;\n  })\n});\n\nlet client = Person.create();\n\nclient.get('fullName'); // 'Betty Jones'\n\nclient.set('lastName', 'Fuller');\nclient.get('fullName'); // 'Betty Fuller'\n```\n\nYou can also provide a setter, either directly on the class using native class\nsyntax, or by passing a hash with `get` and `set` functions.\n\nExample:\n\n```js\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  constructor() {\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  @computed('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n\n  set fullName(value) {\n    let [firstName, lastName] = value.split(/\\s+/);\n\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n\n    return value;\n  }\n}\n\nlet client = new Person();\n\nclient.fullName; // 'Betty Jones'\n\nset(client, 'lastName', 'Fuller');\nclient.fullName; // 'Betty Fuller'\n```\n\nClassic Class Example:\n\n```js\nimport EmberObject, { computed } from '@ember/object';\n\nlet Person = EmberObject.extend({\n  init() {\n    this._super(...arguments);\n\n    this.firstName = 'Betty';\n    this.lastName = 'Jones';\n  },\n\n  fullName: computed('firstName', 'lastName', {\n    get(key) {\n      return `${this.get('firstName')} ${this.get('lastName')}`;\n    },\n    set(key, value) {\n      let [firstName, lastName] = value.split(/\\s+/);\n      this.setProperties({ firstName, lastName });\n      return value;\n    }\n  })\n});\n\nlet client = Person.create();\nclient.get('firstName'); // 'Betty'\n\nclient.set('fullName', 'Carroll Fuller');\nclient.get('firstName'); // 'Carroll'\n```\n\nWhen passed as an argument, the `set` function should accept two parameters,\n`key` and `value`. The value returned from `set` will be the new value of the\nproperty.\n\n_Note: This is the preferred way to define computed properties when writing third-party\nlibraries that depend on or use Ember, since there is no guarantee that the user\nwill have [prototype Extensions](https://guides.emberjs.com/release/configuring-ember/disabling-prototype-extensions/) enabled._\n\nThe alternative syntax, with prototype extensions, might look like:\n\n```js\nfullName: function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n}.property('firstName', 'lastName')\n```\n\nThis form does not work with native decorators.",
      "itemtype": "method",
      "name": "computed",
      "static": 1,
      "params": [
        {
          "name": "dependentKeys*",
          "description": "Optional dependent keys that trigger this computed property.",
          "type": "String",
          "optional": true
        },
        {
          "name": "func",
          "description": "The computed property function.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "property decorator instance",
        "type": "ComputedDecorator"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/computed.ts",
      "line": 1049,
      "description": "Allows checking if a given property on an object is a computed property. For the most part,\nthis doesn't matter (you would normally just access the property directly and use its value),\nbut for some tooling specific scenarios (e.g. the ember-inspector) it is important to\ndifferentiate if a property is a computed property or a \"normal\" property.\n\nThis will work on either a class's prototype or an instance itself.",
      "static": 1,
      "itemtype": "method",
      "name": "isComputed",
      "access": "private",
      "tagname": "",
      "class": "@ember/debug",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/decorator.ts",
      "line": 130,
      "description": "Returns the CP descriptor associated with `obj` and `keyName`, if any.",
      "itemtype": "method",
      "name": "descriptorForProperty",
      "params": [
        {
          "name": "obj",
          "description": "the object to check",
          "type": "Object"
        },
        {
          "name": "keyName",
          "description": "the key to check",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Descriptor"
      },
      "access": "private",
      "tagname": "",
      "class": "Descriptor",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/decorator.ts",
      "line": 158,
      "description": "Check whether a value is a decorator",
      "itemtype": "method",
      "name": "isClassicDecorator",
      "params": [
        {
          "name": "possibleDesc",
          "description": "the value to check",
          "type": "Any"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "Descriptor",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/decorator.ts",
      "line": 170,
      "description": "Set a value as a decorator",
      "itemtype": "method",
      "name": "setClassicDecorator",
      "params": [
        {
          "name": "decorator",
          "description": "the value to mark as a decorator",
          "type": "Function"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Descriptor",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/deprecate_property.ts",
      "line": 10,
      "description": "Used internally to allow changing properties in a backwards compatible way, and print a helpful\ndeprecation warning.",
      "itemtype": "method",
      "name": "deprecateProperty",
      "params": [
        {
          "name": "object",
          "description": "The object to add the deprecated property to.",
          "type": "Object"
        },
        {
          "name": "deprecatedKey",
          "description": "The property to add (and print deprecation warnings upon accessing).",
          "type": "String"
        },
        {
          "name": "newKey",
          "description": "The property that will be aliased.",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "since": "1.7.0",
      "class": "@ember/object/events",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/events.ts",
      "line": 26,
      "description": "Add an event listener",
      "itemtype": "method",
      "name": "addListener",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "eventName",
          "description": "",
          "type": "String"
        },
        {
          "name": "target",
          "description": "A target object or a function",
          "type": "Object|Function"
        },
        {
          "name": "method",
          "description": "A function or the name of a function to be called on `target`",
          "type": "Function|String"
        },
        {
          "name": "once",
          "description": "A flag whether a function should only be called once",
          "type": "Boolean"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object/events",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/events.ts",
      "line": 60,
      "description": "Remove an event listener\n\nArguments should match those passed to `addListener`.",
      "itemtype": "method",
      "name": "removeListener",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "eventName",
          "description": "",
          "type": "String"
        },
        {
          "name": "target",
          "description": "A target object or a function",
          "type": "Object|Function"
        },
        {
          "name": "method",
          "description": "A function or the name of a function to be called on `target`",
          "type": "Function|String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object/events",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/events.ts",
      "line": 103,
      "description": "Send an event. The execution of suspended listeners\nis skipped, and once listeners are removed. A listener without\na target is executed on the passed object. If an array of actions\nis not passed, the actions stored on the passed object are invoked.",
      "itemtype": "method",
      "name": "sendEvent",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "eventName",
          "description": "",
          "type": "String"
        },
        {
          "name": "params",
          "description": "Optional parameters for each listener.",
          "type": "Array"
        }
      ],
      "return": {
        "description": "if the event was delivered to one or more actions",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/events",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/events.ts",
      "line": 160,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "hasListeners",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "eventName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "if `obj` has listeners for event `eventName`",
        "type": "Boolean"
      },
      "class": "@ember/object/events",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/events.ts",
      "line": 178,
      "description": "Define a property as a function that should be executed when\na specified event or events are triggered.\n\n``` javascript\nimport EmberObject from '@ember/object';\nimport { on } from '@ember/object/evented';\nimport { sendEvent } from '@ember/object/events';\n\nlet Job = EmberObject.extend({\n  logCompleted: on('completed', function() {\n    console.log('Job completed!');\n  })\n});\n\nlet job = Job.create();\n\nsendEvent(job, 'completed'); // Logs 'Job completed!'\n ```",
      "itemtype": "method",
      "name": "on",
      "static": 1,
      "params": [
        {
          "name": "eventNames",
          "description": "",
          "type": "String",
          "multiple": true
        },
        {
          "name": "func",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "the listener function, passed as last argument to on(...)",
        "type": "Function"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/evented",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/expand_properties.ts",
      "line": 9,
      "description": "Expands `pattern`, invoking `callback` for each expansion.\n\nThe only pattern supported is brace-expansion, anything else will be passed\nonce to `callback` directly.\n\nExample\n\n```js\nimport { expandProperties } from '@ember/object/computed';\n\nfunction echo(arg){ console.log(arg); }\n\nexpandProperties('foo.bar', echo);              //=> 'foo.bar'\nexpandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'\nexpandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'\nexpandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'\nexpandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'\nexpandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'\nexpandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'\n```",
      "itemtype": "method",
      "name": "expandProperties",
      "static": 1,
      "access": "public",
      "tagname": "",
      "params": [
        {
          "name": "pattern",
          "description": "The property pattern to expand.",
          "type": "String"
        },
        {
          "name": "callback",
          "description": "The callback to invoke.  It is invoked once per\nexpansion, and is passed the expansion.",
          "type": "Function"
        }
      ],
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/get_properties.ts",
      "line": 6,
      "description": "To get multiple properties at once, call `getProperties`\nwith an object followed by a list of strings or an array:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, 'firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nimport { getProperties } from '@ember/object';\n\ngetProperties(record, ['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
      "itemtype": "method",
      "name": "getProperties",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "",
          "type": "Object"
        },
        {
          "name": "list",
          "description": "of keys to get",
          "type": "String...|Array"
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/is_blank.ts",
      "line": 5,
      "description": "A value is blank if it is empty or a whitespace string.\n\n```javascript\nimport { isBlank } from '@ember/utils';\n\nisBlank();                // true\nisBlank(null);            // true\nisBlank(undefined);       // true\nisBlank('');              // true\nisBlank([]);              // true\nisBlank('\\n\\t');          // true\nisBlank('  ');            // true\nisBlank({});              // false\nisBlank('\\n\\t Hello');    // false\nisBlank('Hello world');   // false\nisBlank([1,2,3]);         // false\n```",
      "itemtype": "method",
      "name": "isBlank",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "Value to test",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/is_empty.ts",
      "line": 5,
      "description": "Verifies that a value is `null` or `undefined`, an empty string, or an empty\narray.\n\nConstrains the rules on `isNone` by returning true for empty strings and\nempty arrays.\n\nIf the value is an object with a `size` property of type number, it is used\nto check emptiness.\n\n```javascript\nisEmpty();                 // true\nisEmpty(null);             // true\nisEmpty(undefined);        // true\nisEmpty('');               // true\nisEmpty([]);               // true\nisEmpty({ size: 0});       // true\nisEmpty({});               // false\nisEmpty('Adam Hawkins');   // false\nisEmpty([0,1,2]);          // false\nisEmpty('\\n\\t');           // false\nisEmpty('  ');             // false\nisEmpty({ size: 1 })       // false\nisEmpty({ size: () => 0 }) // false\n```",
      "itemtype": "method",
      "name": "isEmpty",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "Value to test",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/is_none.ts",
      "line": 4,
      "description": "Returns true if the passed value is null or undefined. This avoids errors\nfrom JSLint complaining about use of ==, which can be technically\nconfusing.\n\n```javascript\nisNone();              // true\nisNone(null);          // true\nisNone(undefined);     // true\nisNone('');            // false\nisNone([]);            // false\nisNone(function() {}); // false\n```",
      "itemtype": "method",
      "name": "isNone",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "Value to test",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/is_present.ts",
      "line": 5,
      "description": "A value is present if it not `isBlank`.\n\n```javascript\nisPresent();                // false\nisPresent(null);            // false\nisPresent(undefined);       // false\nisPresent('');              // false\nisPresent('  ');            // false\nisPresent('\\n\\t');          // false\nisPresent([]);              // false\nisPresent({ length: 0 });   // false\nisPresent(false);           // true\nisPresent(true);            // true\nisPresent('string');        // true\nisPresent(0);               // true\nisPresent(function() {});   // true\nisPresent({});              // true\nisPresent('\\n\\t Hello');    // true\nisPresent([1, 2, 3]);       // true\n```",
      "itemtype": "method",
      "name": "isPresent",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "Value to test",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "since": "1.8.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 465,
      "itemtype": "method",
      "name": "mixin",
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "mixins",
          "description": "",
          "multiple": true
        }
      ],
      "return": {
        "description": "obj"
      },
      "access": "private",
      "tagname": "",
      "class": "Mixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 587,
      "itemtype": "method",
      "name": "create",
      "static": 1,
      "params": [
        {
          "name": "arguments",
          "description": "",
          "multiple": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object/mixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 619,
      "itemtype": "method",
      "name": "reopen",
      "params": [
        {
          "name": "arguments",
          "description": "",
          "multiple": true
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/object/mixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 641,
      "itemtype": "method",
      "name": "apply",
      "params": [
        {
          "name": "obj",
          "description": ""
        }
      ],
      "return": {
        "description": "applied object"
      },
      "access": "private",
      "tagname": "",
      "class": "@ember/object/mixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 660,
      "itemtype": "method",
      "name": "detect",
      "params": [
        {
          "name": "obj",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "@ember/object/mixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 787,
      "description": "Makes a method available via an additional name.\n\n```app/utils/person.js\nimport EmberObject, {\n  aliasMethod\n} from '@ember/object';\n\nexport default EmberObject.extend({\n  name() {\n    return 'Tomhuda Katzdale';\n  },\n  moniker: aliasMethod('name')\n});\n```\n\n```javascript\nlet goodGuy = Person.create();\n\ngoodGuy.name();    // 'Tomhuda Katzdale'\ngoodGuy.moniker(); // 'Tomhuda Katzdale'\n```",
      "itemtype": "method",
      "name": "aliasMethod",
      "static": 1,
      "deprecated": true,
      "deprecationMessage": "Use a shared utility method instead",
      "params": [
        {
          "name": "methodName",
          "description": "name of the method to alias",
          "type": "String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/mixin.ts",
      "line": 840,
      "description": "Specify a method that observes property changes.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { observer } from '@ember/object';\n\nexport default EmberObject.extend({\n  valueObserver: observer('value', function() {\n    // Executes whenever the \"value\" property changes\n  })\n});\n```\n\nAlso available as `Function.prototype.observes` if prototype extensions are\nenabled.",
      "itemtype": "method",
      "name": "observer",
      "params": [
        {
          "name": "propertyNames",
          "description": "",
          "type": "String",
          "multiple": true
        },
        {
          "name": "func",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "func"
      },
      "access": "public",
      "tagname": "",
      "static": 1,
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/observer.ts",
      "line": 26,
      "itemtype": "method",
      "name": "addObserver",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "path",
          "description": "",
          "type": "String"
        },
        {
          "name": "target",
          "description": "",
          "type": "Object|Function"
        },
        {
          "name": "method",
          "description": "",
          "type": "Function|String",
          "optional": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object/observers",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/observer.ts",
      "line": 54,
      "itemtype": "method",
      "name": "removeObserver",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "path",
          "description": "",
          "type": "String"
        },
        {
          "name": "target",
          "description": "",
          "type": "Object|Function"
        },
        {
          "name": "method",
          "description": "",
          "type": "Function|String",
          "optional": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object/observers",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/observer.ts",
      "line": 154,
      "description": "Primarily used for cases where we are redefining a class, e.g. mixins/reopen\nbeing applied later. Revalidates all the observers, resetting their tags.",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "target",
          "description": ""
        }
      ],
      "class": "@ember/object/observers",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/properties.ts",
      "line": 11,
      "description": "NOTE: This is a low-level method used by other parts of the API. You almost\nnever want to call this method directly. Instead you should use\n`mixin()` to define new properties.\n\nDefines a property on an object. This method works much like the ES5\n`Object.defineProperty()` method except that it can also accept computed\nproperties and other special descriptors.\n\nNormally this method takes only three parameters. However if you pass an\ninstance of `Descriptor` as the third param then you can pass an\noptional value as the fourth parameter. This is often more efficient than\ncreating new descriptor hashes for each property.\n\n## Examples\n\n```javascript\nimport { defineProperty, computed } from '@ember/object';\n\n// ES5 compatible mode\ndefineProperty(contact, 'firstName', {\n  writable: true,\n  configurable: false,\n  enumerable: true,\n  value: 'Charles'\n});\n\n// define a simple property\ndefineProperty(contact, 'lastName', undefined, 'Jolley');\n\n// define a computed property\ndefineProperty(contact, 'fullName', computed('firstName', 'lastName', function() {\n  return this.firstName+' '+this.lastName;\n}));\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "defineProperty",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "the object to define this property on. This may be a prototype.",
          "type": "Object"
        },
        {
          "name": "keyName",
          "description": "the name of the property",
          "type": "String"
        },
        {
          "name": "desc",
          "description": "an instance of `Descriptor` (typically a\n  computed property) or an ES5 descriptor.\n  You must provide this or `data` but not both.",
          "type": "Descriptor",
          "optional": true
        },
        {
          "name": "data",
          "description": "something other than a descriptor, that will\n  become the explicit value of this property.",
          "type": "*",
          "optional": true
        }
      ],
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_events.ts",
      "line": 19,
      "description": "This function is called just after an object property has changed.\nIt will notify any observers and clear caches among other things.\n\nNormally you will not need to call this method directly but if for some\nreason you can't directly watch a property you can invoke this method\nmanually.",
      "itemtype": "method",
      "name": "notifyPropertyChange",
      "params": [
        {
          "name": "obj",
          "description": "The object with the property that will change",
          "type": "Object"
        },
        {
          "name": "keyName",
          "description": "The property key (or path) that will change.",
          "type": "String"
        },
        {
          "name": "_meta",
          "description": "The objects meta.",
          "type": "Meta",
          "optional": true
        },
        {
          "name": "value",
          "description": "The new value to set for the property",
          "type": "Unknown",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "since": "3.1.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_events.ts",
      "line": 67,
      "itemtype": "method",
      "name": "beginPropertyChanges",
      "chainable": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/object",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_events.ts",
      "line": 77,
      "itemtype": "method",
      "name": "endPropertyChanges",
      "access": "private",
      "tagname": "",
      "class": "@ember/object",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_events.ts",
      "line": 89,
      "description": "Make a series of property changes together in an\nexception-safe way.\n\n```javascript\nEmber.changeProperties(function() {\n  obj1.set('foo', mayBlowUpWhenSet);\n  obj2.set('bar', baz);\n});\n```",
      "itemtype": "method",
      "name": "changeProperties",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/object",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_get.ts",
      "line": 47,
      "description": "Gets the value of a property on an object. If the property is computed,\nthe function will be invoked. If the property is not defined but the\nobject implements the `unknownProperty` method then that will be invoked.\n\n```javascript\nimport { get } from '@ember/object';\nget(obj, \"name\");\n```\n\nIf you plan to run on IE8 and older browsers then you should use this\nmethod anytime you want to retrieve a property on an object that you don't\nknow for sure is private. (Properties beginning with an underscore '_'\nare considered private.)\n\nOn all newer browsers, you only need to use this method to retrieve\nproperties if the property might not be defined on the object and you want\nto respect the `unknownProperty` handler. Otherwise you can ignore this\nmethod.\n\nNote that if the object itself is `undefined`, this method will throw\nan error.",
      "itemtype": "method",
      "name": "get",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object to retrieve from.",
          "type": "Object"
        },
        {
          "name": "keyName",
          "description": "The property key to retrieve",
          "type": "String"
        }
      ],
      "return": {
        "description": "the property value or `null`.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_get.ts",
      "line": 161,
      "description": "Retrieves the value of a property from an Object, or a default value in the\ncase that the property returns `undefined`.\n\n```javascript\nimport { getWithDefault } from '@ember/object';\ngetWithDefault(person, 'lastName', 'Doe');\n```",
      "itemtype": "method",
      "name": "getWithDefault",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object to retrieve from.",
          "type": "Object"
        },
        {
          "name": "keyName",
          "description": "The name of the property to retrieve",
          "type": "String"
        },
        {
          "name": "defaultValue",
          "description": "The value to return if the property value is undefined",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The property value or the defaultValue.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "deprecated": true,
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_set.ts",
      "line": 18,
      "description": "Sets the value of a property on an object, respecting computed properties\nand notifying observers and other listeners of the change.\nIf the specified property is not defined on the object and the object\nimplements the `setUnknownProperty` method, then instead of setting the\nvalue of the property on the object, its `setUnknownProperty` handler\nwill be invoked with the two parameters `keyName` and `value`.\n\n```javascript\nimport { set } from '@ember/object';\nset(obj, \"name\", value);\n```",
      "itemtype": "method",
      "name": "set",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object to modify.",
          "type": "Object"
        },
        {
          "name": "keyName",
          "description": "The property key to set",
          "type": "String"
        },
        {
          "name": "value",
          "description": "The value to set",
          "type": "Object"
        }
      ],
      "return": {
        "description": "the passed value.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/property_set.ts",
      "line": 124,
      "description": "Error-tolerant form of `set`. Will not blow up if any part of the\nchain is `undefined`, `null`, or destroyed.\n\nThis is primarily used when syncing bindings, which may try to update after\nan object has been destroyed.\n\n```javascript\nimport { trySet } from '@ember/object';\n\nlet obj = { name: \"Zoey\" };\ntrySet(obj, \"contacts.twitter\", \"@emberjs\");\n```",
      "itemtype": "method",
      "name": "trySet",
      "static": 1,
      "params": [
        {
          "name": "root",
          "description": "The object to modify.",
          "type": "Object"
        },
        {
          "name": "path",
          "description": "The property path to set",
          "type": "String"
        },
        {
          "name": "value",
          "description": "The value to set",
          "type": "Object"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/set_properties.ts",
      "line": 6,
      "description": "Set a list of properties on an object. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nimport EmberObject from '@ember/object';\nlet anObject = EmberObject.create();\n\nanObject.setProperties({\n  firstName: 'Stanley',\n  lastName: 'Stuart',\n  age: 21\n});\n```",
      "itemtype": "method",
      "name": "setProperties",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": ""
        },
        {
          "name": "properties",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "properties"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/metal/lib/tracked.ts",
      "line": 15,
      "decorator": "",
      "access": "private",
      "tagname": "Marks a property as tracked.\n\nBy default, a component's properties are expected to be static,\nmeaning you are not able to update them and have the template update accordingly.\nMarking a property as tracked means that when that property changes,\na rerender of the component is scheduled so the template is kept up to date.\n\nThere are two usages for the `@tracked` decorator, shown below.",
      "example": [
        " No dependencies\n\nIf you don't pass an argument to `@tracked`, only changes to that property\nwill be tracked:\n\n```typescript\nimport Component, { tracked } from '@glimmer/component';\n\nexport default class MyComponent extends Component {\n  @tracked\n  remainingApples = 10\n}\n```\n\nWhen something changes the component's `remainingApples` property, the rerender\nwill be scheduled.",
        " Dependents\n\nIn the case that you have a computed property that depends other\nproperties, you want to track both so that when one of the\ndependents change, a rerender is scheduled.\n\nIn the following example we have two properties,\n`eatenApples`, and `remainingApples`.\n\n```typescript\nimport Component, { tracked } from '@glimmer/component';\n\nconst totalApples = 100;\n\nexport default class MyComponent extends Component {\n  @tracked\n  eatenApples = 0\n\n  @tracked('eatenApples')\n  get remainingApples() {\n    return totalApples - this.eatenApples;\n  }\n\n  increment() {\n    this.eatenApples = this.eatenApples + 1;\n  }\n}\n```"
      ],
      "params": [
        {
          "name": "dependencies",
          "description": "Optional dependents to be tracked."
        }
      ],
      "class": "@ember/application",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/owner/index.ts",
      "line": 46,
      "description": "Framework objects in an Ember application (components, services, routes, etc.)\nare created via a factory and dependency injection system. Each of these\nobjects is the responsibility of an \"owner\", which handled its\ninstantiation and manages its lifetime.\n\n`getOwner` fetches the owner object responsible for an instance. This can\nbe used to lookup or resolve other class instances, or register new factories\ninto the owner.\n\nFor example, this component dynamically looks up a service based on the\n`audioType` passed as an argument:\n\n```app/components/play-audio.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { getOwner } from '@ember/application';\n\n// Usage:\n//\n//   <PlayAudio @audioType={{@model.audioType}} @audioFile={{@model.file}}/>\n//\nexport default class extends Component {\n  get audioService() {\n    let owner = getOwner(this);\n    return owner.lookup(`service:${this.args.audioType}`);\n  }\n\n  @action\n  onPlay() {\n    let player = this.audioService;\n    player.play(this.args.audioFile);\n  }\n}\n```",
      "itemtype": "method",
      "name": "getOwner",
      "static": 1,
      "params": [
        {
          "name": "object",
          "description": "An object with an owner.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "An owner object.",
        "type": "Object"
      },
      "since": "2.3.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/-internals/owner/index.ts",
      "line": 109,
      "description": "`setOwner` forces a new owner on a given object instance. This is primarily\nuseful in some testing cases.",
      "itemtype": "method",
      "name": "setOwner",
      "static": 1,
      "params": [
        {
          "name": "object",
          "description": "An object instance.",
          "type": "Object"
        },
        {
          "name": "object",
          "description": "The new owner object of the object instance.",
          "type": "Object"
        }
      ],
      "since": "2.3.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/ext/controller.ts",
      "line": 12,
      "description": "Defines which query parameters the controller accepts.\nIf you give the names `['category','page']` it will bind\nthe values of these query parameters to the variables\n`this.category` and `this.page`.\nBy default, Ember coerces query parameter values using `toggleProperty`.\nThis behavior may lead to unexpected results.\nAvailable queryParam types: `boolean`, `number`, `array`.\nIf query param type not specified, it will be `string`.\nTo explicitly configure a query parameter property so it coerces as expected, you must define a type property:\n\n```javascript\n  queryParams: [{\n    category: {\n      type: 'boolean'\n    }\n  }]\n```",
      "itemtype": "property",
      "name": "queryParams",
      "access": "public",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/ext/controller.ts",
      "line": 37,
      "description": "This property is updated to various different callback functions depending on\nthe current \"state\" of the backing route. It is used by\n`Controller.prototype._qpChanged`.\n\nThe methods backing each state can be found in the `Route.prototype._qp` computed\nproperty return value (the `.states` property). The current values are listed here for\nthe sanity of future travelers:\n\n* `inactive` - This state is used when this controller instance is not part of the active\n  route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and\n  `Route.prototype.actions.finalizeQueryParamChange`.\n* `active` - This state is used when this controller instance is part of the active\n  route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.\n* `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).",
      "itemtype": "method",
      "name": "_qpDelegate",
      "access": "private",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/ext/controller.ts",
      "line": 58,
      "description": "During `Route#setup` observers are created to invoke this method\nwhen any of the query params declared in `Controller#queryParams` property\nare changed.\n\nWhen invoked this method uses the currently active query param update delegate\n(see `Controller.prototype._qpDelegate` for details) and invokes it with\nthe QP key/value being changed.",
      "itemtype": "method",
      "name": "_qpChanged",
      "access": "private",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/ext/controller.ts",
      "line": 79,
      "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\n```javascript\naController.transitionToRoute('blogPosts');\naController.transitionToRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.transitionToRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.transitionToRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nroute tree.\n\n```app/router.js\nRouter.map(function() {\n  this.route('blogPost', { path: ':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });\n  });\n});\n```\n\n```javascript\naController.transitionToRoute('blogComment', aPost, aComment);\naController.transitionToRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`).\n\n```javascript\naController.transitionToRoute('/');\naController.transitionToRoute('/blog/post/1/comment/13');\naController.transitionToRoute('/blog/posts?sort=title');\n```\n\nAn options hash with a `queryParams` property may be provided as\nthe final argument to add query parameters to the destination URL.\n\n```javascript\naController.transitionToRoute('blogPost', 1, {\n  queryParams: { showComments: 'true' }\n});\n\n// if you just want to transition the query parameters without changing the route\naController.transitionToRoute({ queryParams: { sort: 'date' } });\n```\n\nSee also [replaceRoute](/ember/release/classes/Ember.ControllerMixin/methods/replaceRoute?anchor=replaceRoute).",
      "params": [
        {
          "name": "name",
          "description": "the name of the route or a URL",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used\n  while transitioning to the route.",
          "type": "...Object"
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
          "type": "Object",
          "optional": true
        }
      ],
      "itemtype": "method",
      "name": "transitionToRoute",
      "access": "public",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/ext/controller.ts",
      "line": 159,
      "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionToRoute` in all other respects.\n\n```javascript\naController.replaceRoute('blogPosts');\naController.replaceRoute('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\naController.replaceRoute('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\naController.replaceRoute('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nroute tree.\n\n```app/router.js\nRouter.map(function() {\n  this.route('blogPost', { path: ':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId', resetNamespace: true });\n  });\n});\n```\n\n```\naController.replaceRoute('blogComment', aPost, aComment);\naController.replaceRoute('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`).\n\n```javascript\naController.replaceRoute('/');\naController.replaceRoute('/blog/post/1/comment/13');\n```",
      "params": [
        {
          "name": "name",
          "description": "the name of the route or a URL",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used\nwhile transitioning to the route.",
          "type": "...Object"
        }
      ],
      "itemtype": "method",
      "name": "replaceRoute",
      "access": "public",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/api.ts",
      "line": 78,
      "description": "This is deprecated in favor of using the container to lookup the location\nimplementation as desired.\n\nFor example:\n\n```javascript\n// Given a location registered as follows:\ncontainer.register('location:history-test', HistoryTestLocation);\n\n// You could create a new instance via:\ncontainer.lookup('location:history-test');\n```",
      "itemtype": "method",
      "name": "create",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "an instance of an implementation of the `location` API",
        "type": "Object"
      },
      "deprecated": true,
      "deprecationMessage": "Use the container to lookup the location implementation that you\n need.",
      "access": "private",
      "tagname": "",
      "class": "Location",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 73,
      "description": "Called by the router to instruct the location to do any feature detection\nnecessary. In the case of AutoLocation, we detect whether to use history\nor hash concrete implementations.",
      "access": "private",
      "tagname": "",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 119,
      "access": "private",
      "tagname": "Will be pre-pended to path upon state change.",
      "since": "1.5.1",
      "itemtype": "property",
      "name": "rootURL",
      "default": "'/'",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 136,
      "access": "private",
      "tagname": "The browser's `location` object. This is typically equivalent to\n`window.location`, but may be overridden for testing.",
      "itemtype": "property",
      "name": "location",
      "default": "environment.location",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 147,
      "access": "private",
      "tagname": "The browser's `history` object. This is typically equivalent to\n`window.history`, but may be overridden for testing.",
      "since": "1.5.1",
      "itemtype": "property",
      "name": "history",
      "default": "environment.history",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 159,
      "access": "private",
      "tagname": "The user agent's global variable. In browsers, this will be `window`.",
      "since": "1.11",
      "itemtype": "property",
      "name": "global",
      "default": "window",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 170,
      "access": "private",
      "tagname": "The browser's `userAgent`. This is typically equivalent to\n`navigator.userAgent`, but may be overridden for testing.",
      "since": "1.5.1",
      "itemtype": "property",
      "name": "userAgent",
      "default": "environment.history",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 182,
      "access": "private",
      "tagname": "This property is used by the router to know whether to cancel the routing\nsetup process, which is needed while we redirect the browser.",
      "since": "1.5.1",
      "itemtype": "property",
      "name": "cancelRouterSetup",
      "default": "false",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 273,
      "access": "private",
      "tagname": "Returns the current path as it should appear for HistoryLocation supported\nbrowsers. This may very well differ from the real current path (e.g. if it\nstarts off as a hashed URL)",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/auto_location.ts",
      "line": 317,
      "access": "private",
      "tagname": "Returns the current path as it should appear for HashLocation supported\nbrowsers. This may very well differ from the real current path.",
      "itemtype": "method",
      "name": "_getHashPath",
      "class": "AutoLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 48,
      "access": "private",
      "tagname": "Returns normalized location.hash",
      "since": "1.5.1",
      "itemtype": "method",
      "name": "getHash",
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 60,
      "description": "Returns the normalized URL, constructed from `location.hash`.\n\ne.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.\n\nBy convention, hashed paths must begin with a forward slash, otherwise they\nare not treated as a path so we can distinguish intent.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getURL",
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 90,
      "description": "Set the `location.hash` and remembers what was set. This prevents\n`onUpdateURL` callbacks from triggering when the hash was set by\n`HashLocation`.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setURL",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 104,
      "description": "Uses location.replace to update the url without a page reload\nor history modification.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "replaceURL",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 117,
      "description": "Register a callback to be invoked when the hash changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after `setURL` is invoked.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "onUpdateURL",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 142,
      "description": "Given a URL, formats it to be placed into the page as part\nof an element's `href` attribute.\n\nThis is used, for example, when using the {{action}} helper\nto generate a URL based on an event.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "formatURL",
      "params": [
        {
          "name": "url",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/hash_location.ts",
      "line": 157,
      "description": "Cleans up the HashLocation event listener.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "willDestroy",
      "class": "HashLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 56,
      "description": "Will be pre-pended to path upon state change",
      "itemtype": "property",
      "name": "rootURL",
      "default": "'/'",
      "access": "private",
      "tagname": "",
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 64,
      "access": "private",
      "tagname": "Returns normalized location.hash",
      "itemtype": "method",
      "name": "getHash",
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 90,
      "description": "Used to set state on first call to setURL",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "initState",
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 111,
      "description": "Returns the current `location.pathname` without `rootURL` or `baseURL`",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getURL",
      "return": {
        "description": "url",
        "type": "String"
      },
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 138,
      "description": "Uses `history.pushState` to update the url without a page reload.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setURL",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 154,
      "description": "Uses `history.replaceState` to update the url without a page reload\nor history modification.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "replaceURL",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 171,
      "description": "Pushes a new state.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "pushState",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 187,
      "description": "Replaces the current state.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "replaceState",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 203,
      "description": "Register a callback to be invoked whenever the browser\nhistory changes, including using forward and back buttons.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "onUpdateURL",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 228,
      "description": "Used when using `{{action}}` helper.  The url is always appended to the rootURL.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "formatURL",
      "params": [
        {
          "name": "url",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "formatted url",
        "type": "String"
      },
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/history_location.ts",
      "line": 252,
      "description": "Cleans up the HistoryLocation event listener.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "willDestroy",
      "class": "HistoryLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 37,
      "description": "Returns the current path without `rootURL`.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getURL",
      "return": {
        "description": "path",
        "type": "String"
      },
      "class": "NoneLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 54,
      "description": "Set the path and remembers what was set. Using this method\nto change the path will not invoke the `updateURL` callback.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setURL",
      "params": [
        {
          "name": "path",
          "description": "",
          "type": "String"
        }
      ],
      "class": "NoneLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 66,
      "description": "Register a callback to be invoked when the path changes. These\ncallbacks will execute when the user presses the back or forward\nbutton, but not after `setURL` is invoked.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "onUpdateURL",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "class": "NoneLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 79,
      "description": "Sets the path and calls the `updateURL` callback.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "handleURL",
      "params": [
        {
          "name": "url",
          "description": "",
          "type": "String"
        }
      ],
      "class": "NoneLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 91,
      "description": "Given a URL, formats it to be placed into the page as part\nof an element's `href` attribute.\n\nThis is used, for example, when using the {{action}} helper\nto generate a URL based on an event.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "formatURL",
      "params": [
        {
          "name": "url",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "url",
        "type": "String"
      },
      "class": "NoneLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/none_location.ts",
      "line": 118,
      "description": "Will be pre-pended to path.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "rootURL",
      "default": "'/'",
      "class": "NoneLocation",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/util.ts",
      "line": 1,
      "access": "private",
      "tagname": "Returns the current `location.pathname`, normalized for IE inconsistencies.",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/util.ts",
      "line": 16,
      "access": "private",
      "tagname": "Returns the current `location.search`.",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/util.ts",
      "line": 25,
      "access": "private",
      "tagname": "Returns the hash or empty string",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/location/util.ts",
      "line": 98,
      "description": "Replaces the current location, making sure we explicitly include the origin\nto prevent redirecting to a different origin.",
      "access": "private",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 86,
      "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\nSee [transitionTo](/ember/release/classes/Route/methods/transitionTo?anchor=transitionTo) for more info.\n\nCalling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.\nThis behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.\nSee the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.\n\nIn the following example we use the Router service to navigate to a route with a\nspecific model from a Component in the first action, and in the second we trigger\na query-params only transition.\n\n```app/components/example.js\nimport Component from '@glimmer/component';\nimport { action } from '@ember/object';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n\n  @action\n  goToComments(post) {\n    this.router.transitionTo('comments', post);\n  }\n\n  @action\n  fetchMoreComments(latestComment) {\n    this.router.transitionTo({\n      queryParams: { commentsAfter: latestComment }\n    });\n  }\n}\n```",
      "itemtype": "method",
      "name": "transitionTo",
      "params": [
        {
          "name": "routeNameOrUrl",
          "description": "the name of the route or a URL",
          "type": "String",
          "optional": true
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
          "type": "...Object",
          "optional": true
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters. May be supplied as the only\n parameter to trigger a query-parameter-only transition.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "the transition object associated with this\n  attempted transition",
        "type": "Transition"
      },
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 148,
      "description": "Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,\nit replaces the entry for the current route.\nWhen the user clicks the \"back\" button in the browser, there will be fewer steps.\nThis is most commonly used to manage redirects in a way that does not cause confusing additions\nto the user's browsing history.\n\nSee [replaceWith](/ember/release/classes/Route/methods/replaceWith?anchor=replaceWith) for more info.\n\nCalling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.\nThis behavior is different from calling `replaceWith` on a route.\nSee the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.\n\nUsage example:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\n\nexport default class extends Route {\n  beforeModel() {\n    if (!authorized()){\n      this.replaceWith('unauthorized');\n    }\n  }\n});\n```",
      "itemtype": "method",
      "name": "replaceWith",
      "params": [
        {
          "name": "routeNameOrUrl",
          "description": "the name of the route or a URL of the desired destination",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route i.e. an object of params to pass to the destination route",
          "type": "...Object"
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "the transition object associated with this\n  attempted transition",
        "type": "Transition"
      },
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 189,
      "description": "Generate a URL based on the supplied route name and optionally a model. The\nURL is returned as a string that can be used for any purpose.\n\nIn this example, the URL for the `author.books` route for a given author\nis copied to the clipboard.\n\n```app/templates/application.hbs\n<CopyLink @author={{hash id=\"tomster\" name=\"Tomster\"}} />\n```\n\n```app/components/copy-link.js\nimport Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\nimport { action } from '@ember/object';\n\nexport default class CopyLinkComponent extends Component {\n  @service router;\n  @service clipboard;\n\n  @action\n  copyBooksURL() {\n    if (this.author) {\n      const url = this.router.urlFor('author.books', this.args.author);\n      this.clipboard.set(url);\n      // Clipboard now has /author/tomster/books\n    }\n  }\n}\n```\n\nJust like with `transitionTo` and `replaceWith`, `urlFor` can also handle\nquery parameters.\n\n```app/templates/application.hbs\n<CopyLink @author={{hash id=\"tomster\" name=\"Tomster\"}} />\n```\n\n```app/components/copy-link.js\nimport Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\nimport { action } from '@ember/object';\n\nexport default class CopyLinkComponent extends Component {\n  @service router;\n  @service clipboard;\n\n  @action\n  copyOnlyEmberBooksURL() {\n    if (this.author) {\n      const url = this.router.urlFor('author.books', this.author, {\n        queryParams: { filter: 'emberjs' }\n      });\n      this.clipboard.set(url);\n      // Clipboard now has /author/tomster/books?filter=emberjs\n    }\n  }\n}\n```",
      "itemtype": "method",
      "name": "urlFor",
      "params": [
        {
          "name": "routeName",
          "description": "the name of the route",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used while\n   transitioning to the route.",
          "type": "...Object"
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n   containing a mapping of query parameters",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "the string representing the generated URL",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 262,
      "description": "Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.\nSee [model](api/ember/release/classes/Route/methods/model?anchor=model) and\n[queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.\n\nIn the following example, `isActive` will return `true` if the current route is `/posts`.\n\n```app/components/posts.js\nimport Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n\n  displayComments() {\n    return this.get('router').isActive('posts');\n  }\n});\n```\n\nThe next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,\nassuming the post has an id of 1:\n\n```app/components/posts.js\nimport Component from '@glimmer/component';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n\n  displayComments(post) {\n    return this.get('router').isActive('posts', post.id);\n  }\n});\n```\n\nWhere `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].\nIf `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.",
      "itemtype": "method",
      "name": "isActive",
      "params": [
        {
          "name": "routeName",
          "description": "the name of the route",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used when determining the active route.",
          "type": "...Object"
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "true if the provided routeName/models/queryParams are active",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 359,
      "description": "Takes a string URL and returns a `RouteInfo` for the leafmost route represented\nby the URL. Returns `null` if the URL is not recognized. This method expects to\nreceive the actual URL as seen by the browser including the app's `rootURL`.\n\nSee [RouteInfo](/ember/release/classes/RouteInfo) for more info.\n\nIn the following example `recognize` is used to verify if a path belongs to our\napplication before transitioning to it.\n\n```\nimport Component from '@ember/component';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Component {\n  @service router;\n  path = '/';\n\n  click() {\n    if (this.router.recognize(this.path)) {\n      this.router.transitionTo(this.path);\n    }\n  }\n}\n```",
      "itemtype": "method",
      "name": "recognize",
      "params": [
        {
          "name": "url",
          "description": "",
          "type": "String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 398,
      "description": "Takes a string URL and returns a promise that resolves to a\n`RouteInfoWithAttributes` for the leafmost route represented by the URL.\nThe promise rejects if the URL is not recognized or an unhandled exception\nis encountered. This method expects to receive the actual URL as seen by\nthe browser including the app's `rootURL`.",
      "itemtype": "method",
      "name": "recognizeAndLoad",
      "params": [
        {
          "name": "url",
          "description": "",
          "type": "String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 418,
      "description": "The `routeWillChange` event is fired at the beginning of any\nattempted transition with a `Transition` object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.\n\nA good example is preventing navigation when a form is\nhalf-filled out:\n\n```app/routes/contact-form.js\nimport Route from '@ember/routing';\nimport { action } from '@ember/object';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Route {\n  @service router;\n\n  constructor() {\n    super(...arguments);\n\n    this.router.on('routeWillChange', (transition) => {\n      if (!transition.to.find(route => route.name === this.routeName)) {\n        alert(\"Please save or cancel your changes.\");\n        transition.abort();\n      }\n    })\n  }\n}\n```\n\nThe `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.",
      "itemtype": "event",
      "name": "routeWillChange",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 455,
      "description": "The `routeDidChange` event only fires once a transition has settled.\nThis includes aborts and error substates. Like the `routeWillChange` event\nit receives a Transition as the sole argument.\n\nA good example is sending some analytics when the route has transitioned:\n\n```app/routes/contact-form.js\nimport Route from '@ember/routing';\nimport { action } from '@ember/object';\nimport { inject as service } from '@ember/service';\n\nexport default class extends Route {\n  @service router;\n\n  constructor() {\n    super(...arguments);\n\n    this.router.on('routeDidChange', (transition) => {\n      ga.send('pageView', {\n        current: transition.to.name,\n        from: transition.from.name\n      });\n    })\n  }\n}\n```\n\n`routeDidChange` will be called after any `Route`'s\n[didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)\naction has been fired.\nThe updates of properties\n[currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),\n[currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)\nand\n[currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)\nare completed at the time `routeDidChange` is called.",
      "itemtype": "event",
      "name": "routeDidChange",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 500,
      "description": "Name of the current route.\n\nThis property represents the logical name of the route,\nwhich is comma separated.\nFor the following router:\n\n```app/router.js\nRouter.map(function() {\n  this.route('about');\n  this.route('blog', function () {\n    this.route('post', { path: ':post_id' });\n  });\n});\n```\n\nIt will return:\n\n* `index` when you visit `/`\n* `about` when you visit `/about`\n* `blog.index` when you visit `/blog`\n* `blog.post` when you visit `/blog/some-post-id`",
      "itemtype": "property",
      "name": "currentRouteName",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 529,
      "description": "Current URL for the application.\n\n    This property represents the URL path for this route.\n    For the following router:\n\n```app/router.js\nRouter.map(function() {\n  this.route('about');\n  this.route('blog', function () {\n    this.route('post', { path: ':post_id' });\n  });\n});\n```\n\nIt will return:\n\n* `/` when you visit `/`\n* `/about` when you visit `/about`\n* `/blog` when you visit `/blog`\n* `/blog/some-post-id` when you visit `/blog/some-post-id`",
      "itemtype": "property",
      "name": "currentURL",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 557,
      "description": "The `location` property returns what implementation of the `location` API\nyour application is using, which determines what type of URL is being used.\n\nSee [Location](/ember/release/classes/Location) for more information.\n\nTo force a particular `location` API implementation to be used in your\napplication you can set a location type on your `config/environment`.\nFor example, to set the `history` type:\n\n```config/environment.js\n'use strict';\n\nmodule.exports = function(environment) {\n  let ENV = {\n    modulePrefix: 'router-service',\n    environment,\n    rootURL: '/',\n    locationType: 'history',\n    ...\n  }\n}\n```\n\nThe following location types are available by default:\n`auto`, `hash`, `history`, `none`.\n\nSee [HashLocation](/ember/release/classes/HashLocation).\nSee [HistoryLocation](/ember/release/classes/HistoryLocation).\nSee [NoneLocation](/ember/release/classes/NoneLocation).\nSee [AutoLocation](/ember/release/classes/AutoLocation).",
      "itemtype": "property",
      "name": "location",
      "default": "'hash'",
      "see": [
        "{Location}"
      ],
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 596,
      "description": "The `rootURL` property represents the URL of the root of\nthe application, '/' by default.\nThis prefix is assumed on all routes defined on this app.\n\nIf you change the `rootURL` in your environment configuration\nlike so:\n\n```config/environment.js\n'use strict';\n\nmodule.exports = function(environment) {\n  let ENV = {\n    modulePrefix: 'router-service',\n    environment,\n    rootURL: '/my-root',\n  …\n  }\n]\n```\n\nThis property will return `/my-root`.",
      "itemtype": "property",
      "name": "rootURL",
      "default": "'/'",
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/services/router.ts",
      "line": 625,
      "description": "The `currentRoute` property contains metadata about the current leaf route.\nIt returns a `RouteInfo` object that has information like the route name,\nparams, query params and more.\n\nSee [RouteInfo](/ember/release/classes/RouteInfo) for more info.\n\nThis property is guaranteed to change whenever a route transition\nhappens (even when that transition only changes parameters\nand doesn't change the active route).\n\nUsage example:\n```app/components/header.js\n  import Component from '@glimmer/component';\n  import { inject as service } from '@ember/service';\n  import { notEmpty } from '@ember/object/computed';\n\n  export default class extends Component {\n    @service router;\n\n    @notEmpty('router.currentRoute.child') isChildRoute;\n  });\n```",
      "itemtype": "property",
      "name": "currentRoute",
      "type": "RouteInfo",
      "access": "public",
      "tagname": "",
      "class": "RouterService",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/controller_for.ts",
      "line": 7,
      "description": "Finds a controller instance.",
      "itemtype": "method",
      "name": "controllerFor",
      "access": "private",
      "tagname": "",
      "class": "Ember",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/generate_controller.ts",
      "line": 10,
      "description": "Generates a controller factory",
      "itemtype": "method",
      "name": "generateControllerFactory",
      "access": "private",
      "tagname": "",
      "class": "Ember",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/generate_controller.ts",
      "line": 34,
      "description": "Generates and instantiates a controller extending from `controller:basic`\nif present, or `Controller` if not.",
      "itemtype": "method",
      "name": "generateController",
      "access": "private",
      "tagname": "",
      "since": "1.3.0",
      "class": "Ember",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 14,
      "description": "The dot-separated, fully-qualified name of the\nroute, like \"people.index\".",
      "itemtype": "property",
      "name": "name",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 21,
      "description": "The final segment of the fully-qualified name of\nthe route, like \"index\"",
      "itemtype": "property",
      "name": "localName",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 28,
      "description": "The values of the route's parameters. These are the\nsame params that are received as arguments to the\nroute's model hook. Contains only the parameters\nvalid for this route, if any (params for parent or\nchild routes are not merged).",
      "itemtype": "property",
      "name": "params",
      "type": "Object",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 38,
      "description": "The ordered list of the names of the params\nrequired for this route. It will contain the same\nstrings as `Object.keys(params)`, but here the order\nis significant. This allows users to correctly pass\nparams into routes programmatically.",
      "itemtype": "property",
      "name": "paramNames",
      "type": "Array",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 48,
      "description": "The values of any queryParams on this route.",
      "itemtype": "property",
      "name": "queryParams",
      "type": "Object",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 54,
      "description": "This is the resolved return value from the\nroute's model hook.",
      "itemtype": "property",
      "name": "attributes",
      "type": "Object|Array|String",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 61,
      "description": "Will contain the result `Route#buildRouteInfoMetadata`\nfor the corresponding Route.",
      "itemtype": "property",
      "name": "metadata",
      "type": "Any",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 68,
      "description": "A reference to the parent route's RouteInfo.\nThis can be used to traverse upward to the topmost\n`RouteInfo`.",
      "itemtype": "property",
      "name": "parent",
      "type": "RouteInfo|null",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 76,
      "description": "A reference to the child route's RouteInfo.\nThis can be used to traverse downward to the\nleafmost `RouteInfo`.",
      "itemtype": "property",
      "name": "child",
      "type": "RouteInfo|null",
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 84,
      "description": "Allows you to traverse through the linked list\nof `RouteInfo`s from the topmost to leafmost.\nReturns the first `RouteInfo` in the linked list\nfor which the callback returns true.\n\n  This method is similar to the `find()` method\n  defined in ECMAScript 2015.\n\n  The callback method you provide should have the\n  following signature (all parameters are optional):\n\n  ```javascript\n  function(item, index, array);\n  ```\n\n  - `item` is the current item in the iteration.\n  - `index` is the current index in the iteration.\n  - `array` is the array itself.\n\n  It should return the `true` to include the item in\n  the results, `false` otherwise.\n\n  Note that in addition to a callback, you can also\n  pass an optional target object that will be set as\n  `this` on the context.",
      "itemtype": "method",
      "name": "find",
      "params": [
        {
          "name": "callback",
          "description": "the callback to execute",
          "type": "Function"
        },
        {
          "name": "target*",
          "description": "optional target to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Found item or undefined",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "RouteInfoWithAttributes",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 129,
      "description": "The dot-separated, fully-qualified name of the\nroute, like \"people.index\".",
      "itemtype": "property",
      "name": "name",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 136,
      "description": "The final segment of the fully-qualified name of\nthe route, like \"index\"",
      "itemtype": "property",
      "name": "localName",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 143,
      "description": "The values of the route's parameters. These are the\nsame params that are received as arguments to the\nroute's `model` hook. Contains only the parameters\nvalid for this route, if any (params for parent or\nchild routes are not merged).",
      "itemtype": "property",
      "name": "params",
      "type": "Object",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 153,
      "description": "The ordered list of the names of the params\nrequired for this route. It will contain the same\nstrings as Object.keys(params), but here the order\nis significant. This allows users to correctly pass\nparams into routes programmatically.",
      "itemtype": "property",
      "name": "paramNames",
      "type": "Array",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 163,
      "description": "The values of any queryParams on this route.",
      "itemtype": "property",
      "name": "queryParams",
      "type": "Object",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 169,
      "description": "A reference to the parent route's `RouteInfo`.\nThis can be used to traverse upward to the topmost\n`RouteInfo`.",
      "itemtype": "property",
      "name": "parent",
      "type": "RouteInfo|null",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 177,
      "description": "A reference to the child route's `RouteInfo`.\nThis can be used to traverse downward to the\nleafmost `RouteInfo`.",
      "itemtype": "property",
      "name": "child",
      "type": "RouteInfo|null",
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route-info.ts",
      "line": 185,
      "description": "Allows you to traverse through the linked list\nof `RouteInfo`s from the topmost to leafmost.\nReturns the first `RouteInfo` in the linked list\nfor which the callback returns true.\n\n  This method is similar to the `find()` method\n  defined in ECMAScript 2015.\n\n  The callback method you provide should have the\n  following signature (all parameters are optional):\n\n  ```javascript\n  function(item, index, array);\n  ```\n\n  - `item` is the current item in the iteration.\n  - `index` is the current index in the iteration.\n  - `array` is the array itself.\n\n  It should return the `true` to include the item in\n  the results, `false` otherwise.\n\n  Note that in addition to a callback, you can also\n  pass an optional target object that will be set as\n  `this` on the context.",
      "itemtype": "method",
      "name": "find",
      "params": [
        {
          "name": "callback",
          "description": "the callback to execute",
          "type": "Function"
        },
        {
          "name": "target*",
          "description": "optional target to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Found item or undefined",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "RouteInfo",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 111,
      "description": "The name of the route, dot-delimited.\n\nFor example, a route found at `app/routes/posts/post.js` will have\na `routeName` of `posts.post`.",
      "itemtype": "property",
      "name": "routeName",
      "type": "String",
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 124,
      "description": "The name of the route, dot-delimited, including the engine prefix\nif applicable.\n\nFor example, a route found at `addon/routes/posts/post.js` within an\nengine named `admin` will have a `fullRouteName` of `admin.posts.post`.",
      "itemtype": "property",
      "name": "fullRouteName",
      "type": "String",
      "since": "2.10.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 138,
      "description": "Sets the name for this route, including a fully resolved name for routes\ninside engines.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_setRouteName",
      "params": [
        {
          "name": "name",
          "description": "",
          "type": "String"
        }
      ],
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 151,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_stashNames",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 182,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_activeQPChanged",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 191,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_updatingQPChanged",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 199,
      "description": "Returns a hash containing the parameters of an ancestor route.\n\nYou may notice that `this.paramsFor` sometimes works when referring to a\nchild route, but this behavior should not be relied upon as only ancestor\nroutes are certain to be loaded in time.\n\nExample\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('member', { path: ':name' }, function() {\n    this.route('interest', { path: ':interest' });\n  });\n});\n```\n\n```app/routes/member.js\nimport Route from '@ember/routing/route';\n\nexport default class MemberRoute extends Route {\n  queryParams = {\n    memberQp: { refreshModel: true }\n  }\n}\n```\n\n```app/routes/member/interest.js\nimport Route from '@ember/routing/route';\n\nexport default class MemberInterestRoute Route {\n  queryParams = {\n    interestQp: { refreshModel: true }\n  }\n\n  model() {\n    return this.paramsFor('member');\n  }\n}\n```\n\nIf we visit `/turing/maths?memberQp=member&interestQp=interest` the model for\nthe `member.interest` route is a hash with:\n\n* `name`: `turing`\n* `memberQp`: `member`",
      "itemtype": "method",
      "name": "paramsFor",
      "params": [
        {
          "name": "name",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "hash containing the parameters of the route `name`",
        "type": "Object"
      },
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 278,
      "description": "Serializes the query parameter key",
      "itemtype": "method",
      "name": "serializeQueryParamKey",
      "params": [
        {
          "name": "controllerPropertyName",
          "description": "",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 289,
      "description": "Serializes value of the query parameter based on defaultValueType",
      "itemtype": "method",
      "name": "serializeQueryParam",
      "params": [
        {
          "name": "value",
          "description": "",
          "type": "Object"
        },
        {
          "name": "urlKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "defaultValueType",
          "description": "",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 305,
      "description": "Deserializes value of the query parameter based on defaultValueType",
      "itemtype": "method",
      "name": "deserializeQueryParam",
      "params": [
        {
          "name": "value",
          "description": "",
          "type": "Object"
        },
        {
          "name": "urlKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "defaultValueType",
          "description": "",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 321,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_optionsForQueryParam",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 330,
      "description": "A hook you can use to reset controller values either when the model\nchanges or the route is exiting.\n\n```app/routes/articles.js\nimport Route from '@ember/routing/route';\n\nexport default class ArticlesRoute extends Route {\n  resetController(controller, isExiting, transition) {\n    if (isExiting && transition.targetName !== 'error') {\n      controller.set('page', 1);\n    }\n  }\n}\n```",
      "itemtype": "method",
      "name": "resetController",
      "params": [
        {
          "name": "controller",
          "description": "instance",
          "type": "Controller"
        },
        {
          "name": "isExiting",
          "description": "",
          "type": "Boolean"
        },
        {
          "name": "transition",
          "description": "",
          "type": "Object"
        }
      ],
      "since": "1.7.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 357,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "exit",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 368,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_internalReset",
      "since": "3.6.0",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 381,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "enter",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 392,
      "description": "The `willTransition` action is fired at the beginning of any\nattempted transition with a `Transition` object as the sole\nargument. This action can be used for aborting, redirecting,\nor decorating the transition from the currently active routes.\n\nA good example is preventing navigation when a form is\nhalf-filled out:\n\n```app/routes/contact-form.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ContactFormRoute extends Route {\n  @action\n  willTransition(transition) {\n    if (this.controller.get('userHasEnteredData')) {\n      this.controller.displayNavigationConfirm();\n      transition.abort();\n    }\n  }\n}\n```\n\nYou can also redirect elsewhere by calling\n`this.transitionTo('elsewhere')` from within `willTransition`.\nNote that `willTransition` will not be fired for the\nredirecting `transitionTo`, since `willTransition` doesn't\nfire when there is already a transition underway. If you want\nsubsequent `willTransition` actions to fire for the redirecting\ntransition, you must first explicitly call\n`transition.abort()`.\n\nTo allow the `willTransition` event to continue bubbling to the parent\nroute, use `return true;`. When the `willTransition` method has a\nreturn value of `true` then the parent route's `willTransition` method\nwill be fired, enabling \"bubbling\" behavior for the event.",
      "itemtype": "event",
      "name": "willTransition",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 436,
      "description": "The `didTransition` action is fired after a transition has\nsuccessfully been completed. This occurs after the normal model\nhooks (`beforeModel`, `model`, `afterModel`, `setupController`)\nhave resolved. The `didTransition` action has no arguments,\nhowever, it can be useful for tracking page views or resetting\nstate on the controller.\n\n```app/routes/login.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class LoginRoute extends Route {\n  @action\n  didTransition() {\n    this.controller.get('errors.base').clear();\n    return true; // Bubble the didTransition event\n  }\n}\n```",
      "itemtype": "event",
      "name": "didTransition",
      "since": "1.2.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 462,
      "description": "The `loading` action is fired on the route when a route's `model`\nhook returns a promise that is not already resolved. The current\n`Transition` object is the first parameter and the route that\ntriggered the loading event is the second parameter.\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  loading(transition, route) {\n    let controller = this.controllerFor('foo');\n    controller.set('currentlyLoading', true);\n\n    transition.finally(function() {\n      controller.set('currentlyLoading', false);\n    });\n  }\n}\n```",
      "itemtype": "event",
      "name": "loading",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        },
        {
          "name": "route",
          "description": "The route that triggered the loading event",
          "type": "Route"
        }
      ],
      "since": "1.2.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 492,
      "description": "When attempting to transition into a route, any of the hooks\nmay return a promise that rejects, at which point an `error`\naction will be fired on the partially-entered routes, allowing\nfor per-route error handling logic, or shared error handling\nlogic defined on a parent route.\n\nHere is an example of an error handler that will be invoked\nfor rejected promises from the various hooks on the route,\nas well as any unhandled errors from child routes:\n\n```app/routes/admin.js\nimport { reject } from 'rsvp';\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class AdminRoute extends Route {\n  beforeModel() {\n    return reject('bad things!');\n  }\n\n  @action\n  error(error, transition) {\n    // Assuming we got here due to the error in `beforeModel`,\n    // we can expect that error === \"bad things!\",\n    // but a promise model rejecting would also\n    // call this hook, as would any errors encountered\n    // in `afterModel`.\n\n    // The `error` hook is also provided the failed\n    // `transition`, which can be stored and later\n    // `.retry()`d if desired.\n\n    this.transitionTo('login');\n  }\n}\n```\n\n`error` actions that bubble up all the way to `ApplicationRoute`\nwill fire a default error handler that logs the error. You can\nspecify your own global default error handler by overriding the\n`error` handler on `ApplicationRoute`:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  error(error, transition) {\n    this.controllerFor('banner').displayError(error.message);\n  }\n}\n```",
      "itemtype": "event",
      "name": "error",
      "params": [
        {
          "name": "error",
          "description": "",
          "type": "Error"
        },
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 553,
      "description": "This event is triggered when the router enters the route. It is\nnot executed when the model for the route changes.\n\n```app/routes/application.js\nimport { on } from '@ember/object/evented';\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  collectAnalytics: on('activate', function(){\n    collectAnalytics();\n  })\n});\n```",
      "itemtype": "event",
      "name": "activate",
      "since": "1.9.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 573,
      "description": "This event is triggered when the router completely exits this\nroute. It is not executed when the model for the route changes.\n\n```app/routes/index.js\nimport { on } from '@ember/object/evented';\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  trackPageLeaveAnalytics: on('deactivate', function(){\n    trackPageLeaveAnalytics();\n  })\n});\n```",
      "itemtype": "event",
      "name": "deactivate",
      "since": "1.9.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 593,
      "description": "This hook is executed when the router completely exits this route. It is\nnot executed when the model for the route changes.",
      "itemtype": "method",
      "name": "deactivate",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 604,
      "description": "This hook is executed when the router enters the route. It is not executed\nwhen the model for the route changes.",
      "itemtype": "method",
      "name": "activate",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 615,
      "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\n```javascript\nthis.transitionTo('blogPosts');\nthis.transitionTo('blogPosts.recentEntries');\n```\n\nOptionally supply a model for the route in question. The model\nwill be serialized into the URL using the `serialize` hook of\nthe route:\n\n```javascript\nthis.transitionTo('blogPost', aPost);\n```\n\nIf a literal is passed (such as a number or a string), it will\nbe treated as an identifier instead. In this case, the `model`\nhook of the route will be triggered:\n\n```javascript\nthis.transitionTo('blogPost', 1);\n```\n\nMultiple models will be applied last to first recursively up the\nroute tree.\n\n```app/routes.js\n// ...\n\nRouter.map(function() {\n  this.route('blogPost', { path:':blogPostId' }, function() {\n    this.route('blogComment', { path: ':blogCommentId' });\n  });\n});\n\nexport default Router;\n```\n\n```javascript\nthis.transitionTo('blogComment', aPost, aComment);\nthis.transitionTo('blogComment', 1, 13);\n```\n\nIt is also possible to pass a URL (a string that starts with a\n`/`).\n\n```javascript\nthis.transitionTo('/');\nthis.transitionTo('/blog/post/1/comment/13');\nthis.transitionTo('/blog/posts?sort=title');\n```\n\nAn options hash with a `queryParams` property may be provided as\nthe final argument to add query parameters to the destination URL.\n\n```javascript\nthis.transitionTo('blogPost', 1, {\n  queryParams: { showComments: 'true' }\n});\n\n// if you just want to transition the query parameters without changing the route\nthis.transitionTo({ queryParams: { sort: 'date' } });\n```\n\nSee also [replaceWith](#method_replaceWith).\n\nSimple Transition Example\n\n```app/routes.js\n// ...\n\nRouter.map(function() {\n  this.route('index');\n  this.route('secret');\n  this.route('fourOhFour', { path: '*:' });\n});\n\nexport default Router;\n```\n\n```app/routes/index.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class IndexRoute extends Route {\n  @action\n  moveToSecret(context) {\n    if (authorized()) {\n      this.transitionTo('secret', context);\n    } else {\n      this.transitionTo('fourOhFour');\n    }\n  }\n}\n```\n\nTransition to a nested route\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('articles', { path: '/articles' }, function() {\n    this.route('new');\n  });\n});\n\nexport default Router;\n```\n\n```app/routes/index.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class IndexRoute extends Route {\n  @action\n  transitionToNewArticle() {\n    this.transitionTo('articles.new');\n  }\n}\n```\n\nMultiple Models Example\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('index');\n\n  this.route('breakfast', { path: ':breakfastId' }, function() {\n    this.route('cereal', { path: ':cerealId' });\n  });\n});\n\nexport default Router;\n```\n\n```app/routes/index.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class IndexRoute extends Route {\n  @action\n  moveToChocolateCereal() {\n    let cereal = { cerealId: 'ChocolateYumminess' };\n    let breakfast = { breakfastId: 'CerealAndMilk' };\n\n    this.transitionTo('breakfast.cereal', breakfast, cereal);\n  }\n}\n```\n\nNested Route with Query String Example\n\n```app/routes.js\n// ...\n\nRouter.map(function() {\n  this.route('fruits', function() {\n    this.route('apples');\n  });\n});\n\nexport default Router;\n```\n\n```app/routes/index.js\nimport Route from '@ember/routing/route';\n\nexport default class IndexRoute extends Route {\n  @action\n  transitionToApples() {\n    this.transitionTo('fruits.apples', { queryParams: { color: 'red' } });\n  }\n}\n```",
      "itemtype": "method",
      "name": "transitionTo",
      "params": [
        {
          "name": "name",
          "description": "the name of the route or a URL.",
          "type": "String",
          "optional": true
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
          "type": "...Object",
          "optional": true
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters. May be supplied as the only\n  parameter to trigger a query-parameter-only transition.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "the transition object associated with this\n  attempted transition",
        "type": "Transition"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 812,
      "description": "Perform a synchronous transition into another route without attempting\nto resolve promises, update the URL, or abort any currently active\nasynchronous transitions (i.e. regular transitions caused by\n`transitionTo` or URL changes).\n\nThis method is handy for performing intermediate transitions on the\nway to a final destination route, and is called internally by the\ndefault implementations of the `error` and `loading` handlers.",
      "itemtype": "method",
      "name": "intermediateTransitionTo",
      "params": [
        {
          "name": "name",
          "description": "the name of the route",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) to be used while transitioning\nto the route.",
          "type": "...Object"
        }
      ],
      "since": "1.2.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 834,
      "description": "Refresh the model on this route and any child routes, firing the\n`beforeModel`, `model`, and `afterModel` hooks in a similar fashion\nto how routes are entered when transitioning in from other route.\nThe current route params (e.g. `article_id`) will be passed in\nto the respective model hooks, and if a different model is returned,\n`setupController` and associated route hooks will re-fire as well.\n\nAn example usage of this method is re-querying the server for the\nlatest information using the same parameters as when the route\nwas first entered.\n\nNote that this will cause `model` hooks to fire even on routes\nthat were provided a model object when the route was initially\nentered.",
      "itemtype": "method",
      "name": "refresh",
      "return": {
        "description": "the transition object associated with this\n  attempted transition",
        "type": "Transition"
      },
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 860,
      "description": "Transition into another route while replacing the current URL, if possible.\nThis will replace the current history entry instead of adding a new one.\nBeside that, it is identical to `transitionTo` in all other respects. See\n'transitionTo' for additional information regarding multiple models.\n\nExample\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('index');\n  this.route('secret');\n});\n\nexport default Router;\n```\n\n```app/routes/secret.js\nimport Route from '@ember/routing/route';\n\nexport default class SecretRoute Route {\n  afterModel() {\n    if (!authorized()){\n      this.replaceWith('index');\n    }\n  }\n}\n```",
      "itemtype": "method",
      "name": "replaceWith",
      "params": [
        {
          "name": "name",
          "description": "the name of the route or a URL",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
          "type": "...Object"
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "the transition object associated with this\n  attempted transition",
        "type": "Transition"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 906,
      "description": "This hook is the entry point for router.js",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setup",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 986,
      "description": "This hook is the first of the route entry validation hooks\ncalled when an attempt is made to transition into a route\nor one of its children. It is called before `model` and\n`afterModel`, and is appropriate for cases when:\n\n1) A decision can be made to redirect elsewhere without\n   needing to resolve the model first.\n2) Any async operations need to occur first before the\n   model is attempted to be resolved.\n\nThis hook is provided the current `transition` attempt\nas a parameter, which can be used to `.abort()` the transition,\nsave it for a later `.retry()`, or retrieve values set\non it from a previous hook. You can also just call\n`this.transitionTo` to another route to implicitly\nabort the `transition`.\n\nYou can return a promise from this hook to pause the\ntransition until the promise resolves (or rejects). This could\nbe useful, for instance, for retrieving async code from\nthe server that is required to enter a route.",
      "itemtype": "method",
      "name": "beforeModel",
      "params": [
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "return": {
        "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
        "type": "Any | Promise<any>"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1020,
      "description": "This hook is called after this route's model has resolved.\nIt follows identical async/promise semantics to `beforeModel`\nbut is provided the route's resolved model in addition to\nthe `transition`, and is therefore suited to performing\nlogic that can only take place after the model has already\nresolved.\n\n```app/routes/posts.js\nimport Route from '@ember/routing/route';\n\nexport default class PostsRoute extends Route {\n  afterModel(posts, transition) {\n    if (posts.get('length') === 1) {\n      this.transitionTo('post.show', posts.get('firstObject'));\n    }\n  }\n}\n```\n\nRefer to documentation for `beforeModel` for a description\nof transition-pausing semantics when a promise is returned\nfrom this hook.",
      "itemtype": "method",
      "name": "afterModel",
      "params": [
        {
          "name": "resolvedModel",
          "description": "the value returned from `model`,\n  or its resolved value if it was a promise",
          "type": "Object"
        },
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "return": {
        "description": "if the value returned from this hook is\n  a promise, the transition will pause until the transition\n  resolves. Otherwise, non-promise return values are not\n  utilized in any way.",
        "type": "Any | Promise<any>"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1057,
      "description": "A hook you can implement to optionally redirect to another route.\n\nCalling `this.transitionTo` from inside of the `redirect` hook will\nabort the current transition (into the route that has implemented `redirect`).\n\n`redirect` and `afterModel` behave very similarly and are\ncalled almost at the same time, but they have an important\ndistinction when calling `this.transitionTo` to a child route\nof the current route. From `afterModel`, this new transition\ninvalidates the current transition, causing `beforeModel`,\n`model`, and `afterModel` hooks to be called again. But the\nsame transition started from `redirect` does _not_ invalidate\nthe current transition. In other words, by the time the `redirect`\nhook has been called, both the resolved model and the attempted\nentry into this route are considered fully validated.",
      "itemtype": "method",
      "name": "redirect",
      "params": [
        {
          "name": "model",
          "description": "the model for this route",
          "type": "Object"
        },
        {
          "name": "transition",
          "description": "the transition object associated with the current transition",
          "type": "Transition"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1082,
      "description": "Called when the context is changed by router.js.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "contextDidChange",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1092,
      "description": "A hook you can implement to convert the URL into the model for\nthis route.\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\nexport default Router;\n```\n\nThe model for the `post` route is `store.findRecord('post', params.post_id)`.\n\nBy default, if your route has a dynamic segment ending in `_id`:\n\n* The model class is determined from the segment (`post_id`'s\n  class is `App.Post`)\n* The find method is called on the model class with the value of\n  the dynamic segment.\n\nNote that for routes with dynamic segments, this hook is not always\nexecuted. If the route is entered through a transition (e.g. when\nusing the `link-to` Handlebars helper or the `transitionTo` method\nof routes), and a model context is already provided this hook\nis not called.\n\nA model context does not include a primitive string or number,\nwhich does cause the model hook to be called.\n\nRoutes without dynamic segments will always execute the model hook.\n\n```javascript\n// no dynamic segment, model hook always called\nthis.transitionTo('posts');\n\n// model passed in, so model hook not called\nthePost = store.findRecord('post', 1);\nthis.transitionTo('post', thePost);\n\n// integer passed in, model hook is called\nthis.transitionTo('post', 1);\n\n// model id passed in, model hook is called\n// useful for forcing the hook to execute\nthePost = store.findRecord('post', 1);\nthis.transitionTo('post', thePost.id);\n```\n\nThis hook follows the asynchronous/promise semantics\ndescribed in the documentation for `beforeModel`. In particular,\nif a promise returned from `model` fails, the error will be\nhandled by the `error` hook on `Route`.\n\nExample\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  model(params) {\n    return this.store.findRecord('post', params.post_id);\n  }\n}\n```",
      "itemtype": "method",
      "name": "model",
      "params": [
        {
          "name": "params",
          "description": "the parameters extracted from the URL",
          "type": "Object"
        },
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "return": {
        "description": "the model for this route. If\n  a promise is returned, the transition will pause until\n  the promise resolves, and the resolved value of the promise\n  will be used as the model for this route.",
        "type": "Any | Promise<any>"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1201,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "deserialize",
      "params": [
        {
          "name": "params",
          "description": "the parameters extracted from the URL",
          "type": "Object"
        },
        {
          "name": "transition",
          "description": "",
          "type": "Transition"
        }
      ],
      "return": {
        "description": "the model for this route.\n\nRouter.js hook.",
        "type": "Any | Promise<any>"
      },
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1214,
      "itemtype": "method",
      "name": "findModel",
      "params": [
        {
          "name": "type",
          "description": "the model type",
          "type": "String"
        },
        {
          "name": "value",
          "description": "the value passed to find",
          "type": "Object"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1225,
      "description": "A hook you can use to setup the controller for the current route.\n\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook.\n\nBy default, the `setupController` hook sets the `model` property of\nthe controller to the specified `model` when it is not `undefined`.\n\nIf you implement the `setupController` hook in your Route, it will\nprevent this default behavior. If you want to preserve that behavior\nwhen implementing your `setupController` function, make sure to call\n`super`:\n\n```app/routes/photos.js\nimport Route from '@ember/routing/route';\n\nexport default class PhotosRoute extends Route {\n  model() {\n    return this.store.findAll('photo');\n  }\n\n  setupController(controller, model) {\n    super.setupController(controller, model);\n\n    this.controllerFor('application').set('showingPhotos', true);\n  }\n}\n```\n\nThe provided controller will be one resolved based on the name\nof this route.\n\nIf no explicit controller is defined, Ember will automatically create one.\n\nAs an example, consider the router:\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\nexport default Router;\n```\n\nIf you have defined a file for the post controller,\nthe framework will use it.\nIf it is not defined, a basic `Controller` instance would be used.",
      "example": [
        " Behavior of a basic Controller\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  setupController(controller, model) {\n    controller.set('model', model);\n  }\n});\n```"
      ],
      "itemtype": "method",
      "name": "setupController",
      "params": [
        {
          "name": "controller",
          "description": "instance",
          "type": "Controller"
        },
        {
          "name": "model",
          "description": "",
          "type": "Object"
        },
        {
          "name": "transition",
          "description": "",
          "type": "Object"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1302,
      "description": "Returns the controller of the current route, or a parent (or any ancestor)\nroute in a route hierarchy.\n\nThe controller instance must already have been created, either through entering the\nassociated route or using `generateController`.\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  setupController(controller, post) {\n    super.setupController(controller, post);\n\n    this.controllerFor('posts').set('currentPost', post);\n  }\n}\n```",
      "itemtype": "method",
      "name": "controllerFor",
      "params": [
        {
          "name": "name",
          "description": "the name of the route or controller",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Controller"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1348,
      "description": "Generates a controller for a route.\n\nExample\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class Post extends Route {\n  setupController(controller, post) {\n    super.setupController(controller, post);\n\n    this.generateController('posts');\n  }\n}\n```",
      "itemtype": "method",
      "name": "generateController",
      "params": [
        {
          "name": "name",
          "description": "the name of the controller",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1375,
      "description": "Returns the resolved model of a parent (or any ancestor) route\nin a route hierarchy.  During a transition, all routes\nmust resolve a model object, and if a route\nneeds access to a parent route's model in order to\nresolve a model (or just reuse the model from a parent),\nit can call `this.modelFor(theNameOfParentRoute)` to\nretrieve it. If the ancestor route's model was a promise,\nits resolved result is returned.\n\nExample\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' }, function() {\n    this.route('comments');\n  });\n});\n\nexport default Router;\n```\n\n```app/routes/post/comments.js\nimport Route from '@ember/routing/route';\n\nexport default class PostCommentsRoute extends Route {\n  model() {\n    let post = this.modelFor('post');\n\n    return post.comments;\n  }\n}\n```",
      "itemtype": "method",
      "name": "modelFor",
      "params": [
        {
          "name": "name",
          "description": "the name of the route",
          "type": "String"
        }
      ],
      "return": {
        "description": "the model object",
        "type": "Object"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1446,
      "description": "A hook you can use to render the template for the current route.\n\nThis method is called with the controller for the current route and the\nmodel supplied by the `model` hook. By default, it renders the route's\ntemplate, configured with the controller for the route.\n\nThis method can be overridden to set up and render additional or\nalternative templates.\n\n```app/routes/posts.js\nimport Route from '@ember/routing/route';\n\nexport default class PostsRoute extends Route {\n  renderTemplate(controller, model) {\n    let favController = this.controllerFor('favoritePost');\n\n    // Render the `favoritePost` template into\n    // the outlet `posts`, and display the `favoritePost`\n    // controller.\n    this.render('favoritePost', {\n      outlet: 'posts',\n      controller: favController\n    });\n  }\n}\n```",
      "itemtype": "method",
      "name": "renderTemplate",
      "params": [
        {
          "name": "controller",
          "description": "the route's controller",
          "type": "Object"
        },
        {
          "name": "model",
          "description": "the route's model",
          "type": "Object"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1485,
      "description": "`render` is used to render a template into a region of another template\n(indicated by an `{{outlet}}`). `render` is used both during the entry\nphase of routing (via the `renderTemplate` hook) and later in response to\nuser interaction.\n\nFor example, given the following minimal router and templates:\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('photos');\n});\n\nexport default Router;\n```\n\n```handlebars\n<!-- application.hbs -->\n<div class='something-in-the-app-hbs'>\n  {{outlet \"anOutletName\"}}\n</div>\n```\n\n```handlebars\n<!-- photos.hbs -->\n<h1>Photos</h1>\n```\n\nYou can render `photos.hbs` into the `\"anOutletName\"` outlet of\n`application.hbs` by calling `render`:\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  renderTemplate() {\n    this.render('photos', {\n      into: 'application',\n      outlet: 'anOutletName'\n    })\n  }\n}\n```\n\n`render` additionally allows you to supply which `controller` and\n`model` objects should be loaded and associated with the rendered template.\n\n```app/routes/posts.js\nimport Route from '@ember/routing/route';\n\nexport default class PostsRoute extends Route {\n  renderTemplate(controller, model) {\n    this.render('posts', {    // the template to render, referenced by name\n      into: 'application',    // the template to render into, referenced by name\n      outlet: 'anOutletName', // the outlet inside `options.into` to render into.\n      controller: 'someControllerName', // the controller to use for this template, referenced by name\n      model: model            // the model to set on `options.controller`.\n    })\n  }\n}\n```\n\nThe string values provided for the template name, and controller\nwill eventually pass through to the resolver for lookup. See\nResolver for how these are mapped to JavaScript objects in your\napplication. The template to render into needs to be related to  either the\ncurrent route or one of its ancestors.\n\nNot all options need to be passed to `render`. Default values will be used\nbased on the name of the route specified in the router or the Route's\n`controllerName` and `templateName` properties.\n\nFor example:\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('index');\n  this.route('post', { path: '/posts/:post_id' });\n});\n\nexport default Router;\n```\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  renderTemplate() {\n    this.render(); // all defaults apply\n  }\n}\n```\n\nThe name of the route, defined by the router, is `post`.\n\nThe following equivalent default options will be applied when\nthe Route calls `render`:\n\n```javascript\nthis.render('post', {  // the template name associated with 'post' Route\n  into: 'application', // the parent route to 'post' Route\n  outlet: 'main',      // {{outlet}} and {{outlet 'main'}} are synonymous,\n  controller: 'post',  // the controller associated with the 'post' Route\n})\n```\n\nBy default the controller's `model` will be the route's model, so it does not\nneed to be passed unless you wish to change which model is being used.",
      "itemtype": "method",
      "name": "render",
      "params": [
        {
          "name": "name",
          "description": "the name of the template to render",
          "type": "String"
        },
        {
          "name": "options",
          "description": "the options",
          "type": "Object",
          "optional": true,
          "props": [
            {
              "name": "into",
              "description": "the template to render into,\n                referenced by name. Defaults to the parent template",
              "type": "String",
              "optional": true
            },
            {
              "name": "outlet",
              "description": "the outlet inside `options.into` to render into.\n                Defaults to 'main'",
              "type": "String",
              "optional": true
            },
            {
              "name": "controller",
              "description": "the controller to use for this template,\n                referenced by name or as a controller instance. Defaults to the Route's paired controller",
              "type": "String|Object",
              "optional": true
            },
            {
              "name": "model",
              "description": "the model object to set on `options.controller`.\n                Defaults to the return value of the Route's model hook",
              "type": "Object",
              "optional": true
            }
          ]
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1618,
      "description": "Disconnects a view that has been rendered into an outlet.\n\nYou may pass any or all of the following options to `disconnectOutlet`:\n\n* `outlet`: the name of the outlet to clear (default: 'main')\n* `parentView`: the name of the view containing the outlet to clear\n   (default: the view rendered by the parent route)\n\nExample:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  showModal(evt) {\n    this.render(evt.modalName, {\n      outlet: 'modal',\n      into: 'application'\n    });\n  }\n\n  @action\n  hideModal() {\n    this.disconnectOutlet({\n      outlet: 'modal',\n      parentView: 'application'\n    });\n  }\n}\n```\n\nAlternatively, you can pass the `outlet` name directly as a string.\n\nExample:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  showModal(evt) {\n    // ...\n  }\n\n  @action\n  hideModal(evt) {\n    this.disconnectOutlet('modal');\n  }\n}\n```",
      "itemtype": "method",
      "name": "disconnectOutlet",
      "params": [
        {
          "name": "options",
          "description": "the options hash or outlet name",
          "type": "Object|String"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1740,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "teardownViews",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 1753,
      "description": "Allows you to produce custom metadata for the route.\nThe return value of this method will be attached to\nits corresponding RouteInfoWithAttributes object.\n\nExample\n\n```app/routes/posts/index.js\nimport Route from '@ember/routing/route';\n\nexport default class PostsIndexRoute extends Route {\n  buildRouteInfoMetadata() {\n    return { title: 'Posts Page' }\n  }\n}\n```\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class ApplicationRoute extends Route {\n  @service router\n\n  constructor() {\n    super(...arguments);\n\n    this.router.on('routeDidChange', transition => {\n      document.title = transition.to.metadata.title;\n      // would update document's title to \"Posts Page\"\n    });\n  }\n}\n```",
      "itemtype": "method",
      "name": "buildRouteInfoMetadata",
      "return": {
        "description": "any"
      },
      "since": "3.10.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2067,
      "description": "A hook you can implement to convert the route's model into parameters\nfor the URL.\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('post', { path: '/posts/:post_id' });\n});\n\n```\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\nexport default class PostRoute extends Route {\n  model({ post_id }) {\n    // the server returns `{ id: 12 }`\n    return fetch(`/posts/${post_id}`;\n  }\n\n  serialize(model) {\n    // this will make the URL `/posts/12`\n    return { post_id: model.id };\n  }\n}\n```\n\nThe default `serialize` method will insert the model's `id` into the\nroute's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.\nIf the route has multiple dynamic segments or does not contain '_id', `serialize`\nwill return `getProperties(model, params)`\n\nThis method is called when `transitionTo` is called with a context\nin order to populate the URL.",
      "itemtype": "method",
      "name": "serialize",
      "params": [
        {
          "name": "model",
          "description": "the routes model",
          "type": "Object"
        },
        {
          "name": "params",
          "description": "an Array of parameter names for the current\n  route (in the example, `['post_id']`.",
          "type": "Array"
        }
      ],
      "return": {
        "description": "the serialized parameters",
        "type": "Object"
      },
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2117,
      "description": "Configuration hash for this route's queryParams. The possible\nconfiguration options and their defaults are as follows\n(assuming a query param whose controller property is `page`):\n\n```javascript\nqueryParams: {\n  page: {\n    // By default, controller query param properties don't\n    // cause a full transition when they are changed, but\n    // rather only cause the URL to update. Setting\n    // `refreshModel` to true will cause an \"in-place\"\n    // transition to occur, whereby the model hooks for\n    // this route (and any child routes) will re-fire, allowing\n    // you to reload models (e.g., from the server) using the\n    // updated query param values.\n    refreshModel: false,\n\n    // By default, changes to controller query param properties\n    // cause the URL to update via `pushState`, which means an\n    // item will be added to the browser's history, allowing\n    // you to use the back button to restore the app to the\n    // previous state before the query param property was changed.\n    // Setting `replace` to true will use `replaceState` (or its\n    // hash location equivalent), which causes no browser history\n    // item to be added. This options name and default value are\n    // the same as the `link-to` helper's `replace` option.\n    replace: false,\n\n    // By default, the query param URL key is the same name as\n    // the controller property name. Use `as` to specify a\n    // different URL key.\n    as: 'page'\n  }\n}\n```",
      "itemtype": "property",
      "name": "queryParams",
      "type": "Object",
      "since": "1.6.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2162,
      "description": "The name of the template to use by default when rendering this routes\ntemplate.\n\n```app/routes/posts/list.js\nimport Route from '@ember/routing/route';\n\nexport default class extends Route {\n  templateName = 'posts/list'\n});\n```\n\n```app/routes/posts/index.js\nimport PostsList from '../posts/list';\n\nexport default class extends PostsList {};\n```\n\n```app/routes/posts/archived.js\nimport PostsList from '../posts/list';\n\nexport default class extends PostsList {};\n```",
      "itemtype": "property",
      "name": "templateName",
      "type": "String",
      "default": "null",
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2194,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_names",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2201,
      "description": "The name of the controller to associate with this route.\n\nBy default, Ember will lookup a route's controller that matches the name\nof the route (i.e. `posts.new`). However,\nif you would like to define a specific controller to use, you can do so\nusing this property.\n\nThis is useful in many ways, as the controller specified will be:\n\n* passed to the `setupController` method.\n* used as the controller for the template being rendered by the route.\n* returned from a call to `controllerFor` for the route.",
      "itemtype": "property",
      "name": "controllerName",
      "type": "String",
      "default": "null",
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2223,
      "description": "Store property provides a hook for data persistence libraries to inject themselves.\n\nBy default, this store property provides the exact same functionality previously\nin the model hook.\n\nCurrently, the required interface is:\n\n`store.find(modelName, findArguments)`",
      "itemtype": "property",
      "name": "store",
      "type": "{Object}",
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2275,
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_qp",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2402,
      "description": "Sends an action to the router, which will delegate it to the currently\nactive route hierarchy per the bubbling rules explained under `actions`.\n\nExample\n\n```app/router.js\n// ...\n\nRouter.map(function() {\n  this.route('index');\n});\n\nexport default Router;\n```\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class ApplicationRoute extends Route {\n  @action\n  track(arg) {\n    console.log(arg, 'was clicked');\n  }\n}\n```\n\n```app/routes/index.js\nimport Route from '@ember/routing/route';\nimport { action } from '@glimmer/tracking';\n\nexport default class IndexRoute extends Route {\n  @action\n  trackIfDebug(arg) {\n    if (debug) {\n      this.send('track', arg);\n    }\n  }\n}\n```",
      "itemtype": "method",
      "name": "send",
      "params": [
        {
          "name": "name",
          "description": "the name of the action to trigger",
          "type": "String"
        },
        {
          "name": "args",
          "description": "",
          "type": "...*"
        }
      ],
      "since": "1.0.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2465,
      "description": "The controller associated with this route.\n\nExample\n\n```app/routes/form.js\nimport Route from '@ember/routing/route';\nimport { action } from '@ember/object';\n\nexport default class FormRoute extends Route {\n  @action\n  willTransition(transition) {\n    if (this.controller.get('userHasEnteredData') &&\n        !confirm('Are you sure you want to abandon progress?')) {\n      transition.abort();\n    } else {\n      // Bubble the `willTransition` action so that\n      // parent routes can decide whether or not to abort.\n      return true;\n    }\n  }\n}\n```",
      "itemtype": "property",
      "name": "controller",
      "type": "Controller",
      "since": "1.6.0",
      "access": "public",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/route.ts",
      "line": 2496,
      "description": "This action is called when one or more query params have changed. Bubbles.",
      "itemtype": "method",
      "name": "queryParamsDidChange",
      "params": [
        {
          "name": "changed",
          "description": "Keys are names of query params that have changed.",
          "type": "Object"
        },
        {
          "name": "totalPresent",
          "description": "Keys are names of query params that are currently set.",
          "type": "Object"
        },
        {
          "name": "removed",
          "description": "Keys are names of query params that have been removed.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "Route",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 381,
      "description": "Initializes the current router instance and sets up the change handling\nevent listeners used by the instances `location` implementation.\n\nA property named `initialURL` will be used to determine the initial URL.\nIf no value is found `/` will be used.",
      "itemtype": "method",
      "name": "startRouting",
      "access": "private",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 494,
      "description": "Transition the application into another route. The route may\nbe either a single route or route path:\n\nSee [transitionTo](/ember/release/classes/Route/methods/transitionTo?anchor=transitionTo) for more info.",
      "itemtype": "method",
      "name": "transitionTo",
      "params": [
        {
          "name": "name",
          "description": "the name of the route or a URL",
          "type": "String"
        },
        {
          "name": "models",
          "description": "the model(s) or identifier(s) to be used while\n  transitioning to the route.",
          "type": "...Object"
        },
        {
          "name": "options",
          "description": "optional hash with a queryParams property\n  containing a mapping of query parameters",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "the transition object associated with this\n  attempted transition",
        "type": "Transition"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 549,
      "description": "Determines if the supplied route is currently active.",
      "itemtype": "method",
      "name": "isActive",
      "params": [
        {
          "name": "routeName",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 561,
      "description": "An alternative form of `isActive` that doesn't require\nmanual concatenation of the arguments into a single\narray.",
      "itemtype": "method",
      "name": "isActiveIntent",
      "params": [
        {
          "name": "routeName",
          "description": ""
        },
        {
          "name": "models",
          "description": ""
        },
        {
          "name": "queryParams",
          "description": ""
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "since": "1.7.0",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 583,
      "description": "Does this router instance have the given route.",
      "itemtype": "method",
      "name": "hasRoute",
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 594,
      "description": "Resets the state of the router by clearing the current route\nhandlers and deactivating them.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "reset",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 700,
      "description": "Serializes the given query params according to their QP meta information.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_serializeQueryParams",
      "params": [
        {
          "name": "routeInfos",
          "description": "",
          "type": "Arrray<RouteInfo>"
        },
        {
          "name": "queryParams",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 727,
      "description": "Serializes the value of a query parameter based on a type",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_serializeQueryParam",
      "params": [
        {
          "name": "value",
          "description": "",
          "type": "Object"
        },
        {
          "name": "type",
          "description": "",
          "type": "String"
        }
      ],
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 745,
      "description": "Deserializes the given query params according to their QP meta information.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_deserializeQueryParams",
      "params": [
        {
          "name": "routeInfos",
          "description": "",
          "type": "Array<RouteInfo>"
        },
        {
          "name": "queryParams",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 770,
      "description": "Deserializes the value of a query parameter based on a default type",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_deserializeQueryParam",
      "params": [
        {
          "name": "value",
          "description": "",
          "type": "Object"
        },
        {
          "name": "defaultType",
          "description": "",
          "type": "String"
        }
      ],
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 791,
      "description": "Removes (prunes) any query params with default values from the given QP\nobject. Default values are determined from the QP meta information per key.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_pruneDefaultQueryParamValues",
      "params": [
        {
          "name": "routeInfos",
          "description": "",
          "type": "Array<RouteInfo>"
        },
        {
          "name": "queryParams",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 871,
      "description": "Prepares the query params for a URL or Transition. Restores any undefined QP\nkeys/values, serializes all values, and then prunes any default values.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_prepareQueryParams",
      "params": [
        {
          "name": "targetRouteName",
          "description": "",
          "type": "String"
        },
        {
          "name": "models",
          "description": "",
          "type": "Array<Object>"
        },
        {
          "name": "queryParams",
          "description": "",
          "type": "Object"
        },
        {
          "name": "keepDefaultQueryParamValues",
          "description": "",
          "type": "Boolean"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 898,
      "description": "Returns the meta information for the query params of a given route. This\nwill be overridden to allow support for lazy routes.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_getQPMeta",
      "params": [
        {
          "name": "routeInfo",
          "description": "",
          "type": "RouteInfo"
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 912,
      "description": "Returns a merged query params meta object for a given set of routeInfos.\nUseful for knowing what query params are available for a given route hierarchy.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_queryParamsFor",
      "params": [
        {
          "name": "routeInfos",
          "description": "",
          "type": "Array<RouteInfo>"
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 977,
      "description": "Maps all query param keys to their fully scoped property name of the form\n`controllerName:propName`.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_fullyScopeQueryParams",
      "params": [
        {
          "name": "leafRouteName",
          "description": "",
          "type": "String"
        },
        {
          "name": "contexts",
          "description": "",
          "type": "Array<Object>"
        },
        {
          "name": "queryParams",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1019,
      "description": "Hydrates (adds/restores) any query params that have pre-existing values into\nthe given queryParams hash. This is what allows query params to be \"sticky\"\nand restore their last known values for their scope.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_hydrateUnsuppliedQueryParams",
      "params": [
        {
          "name": "state",
          "description": "",
          "type": "TransitionState"
        },
        {
          "name": "queryParams",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1322,
      "description": "Finds the name of the substate route if it exists for the given route. A\nsubstate route is of the form `route_state`, such as `foo_loading`.",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "route",
          "description": "",
          "type": "Route"
        },
        {
          "name": "state",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "String"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1341,
      "description": "Finds the name of the state route if it exists for the given route. A state\nroute is of the form `route.state`, such as `foo.loading`. Properly Handles\n`application` named routes.",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "route",
          "description": "",
          "type": "Route"
        },
        {
          "name": "state",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "String"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1361,
      "description": "Determines whether or not a route has been defined by checking that the route\nis in the Router's map and the owner has a registration for that route.",
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "owner",
          "description": "",
          "type": "Owner"
        },
        {
          "name": "router",
          "description": "",
          "type": "Router"
        },
        {
          "name": "localName",
          "description": "",
          "type": "String"
        },
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1517,
      "description": "The `Router.map` function allows you to define mappings from URLs to routes\nin your application. These mappings are defined within the\nsupplied callback function using `this.route`.\n\nThe first parameter is the name of the route which is used by default as the\npath name as well.\n\nThe second parameter is the optional options hash. Available options are:\n\n  * `path`: allows you to provide your own path as well as mark dynamic\n    segments.\n  * `resetNamespace`: false by default; when nesting routes, ember will\n    combine the route names to form the fully-qualified route name, which is\n    used with `{{link-to}}` or manually transitioning to routes. Setting\n    `resetNamespace: true` will cause the route not to inherit from its\n    parent route's names. This is handy for preventing extremely long route names.\n    Keep in mind that the actual URL path behavior is still retained.\n\nThe third parameter is a function, which can be used to nest routes.\nNested routes, by default, will have the parent route tree's route name and\npath prepended to it's own.\n\n```app/router.js\nRouter.map(function(){\n  this.route('post', { path: '/post/:post_id' }, function() {\n    this.route('edit');\n    this.route('comments', { resetNamespace: true }, function() {\n      this.route('new');\n    });\n  });\n});\n```",
      "itemtype": "method",
      "name": "map",
      "params": [
        {
          "name": "callback",
          "description": ""
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1713,
      "description": "Handles updating the paths and notifying any listeners of the URL\nchange.\n\nTriggers the router level `didTransition` hook.\n\nFor example, to notify google analytics when the route changes,\nyou could use this hook.  (Note: requires also including GA scripts, etc.)\n\n```javascript\nimport config from './config/environment';\nimport EmberRouter from '@ember/routing/router';\nimport { inject as service } from '@ember/service';\n\nlet Router = EmberRouter.extend({\n  location: config.locationType,\n\n  router: service(),\n\n  didTransition: function() {\n    this._super(...arguments);\n\n    ga('send', 'pageview', {\n      page: this.router.currentURL,\n      title: this.router.currentRouteName,\n    });\n  }\n});\n```",
      "itemtype": "method",
      "name": "didTransition",
      "access": "public",
      "tagname": "",
      "since": "1.2.0",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1749,
      "description": "Handles notifying any listeners of an impending URL\nchange.\n\nTriggers the router level `willTransition` hook.",
      "itemtype": "method",
      "name": "willTransition",
      "access": "public",
      "tagname": "",
      "since": "1.11.0",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1760,
      "description": "Represents the URL of the root of the application, often '/'. This prefix is\nassumed on all routes defined on this router.",
      "itemtype": "property",
      "name": "rootURL",
      "default": "'/'",
      "access": "public",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1770,
      "description": "The `location` property determines the type of URL's that your\napplication will use.\n\nThe following location types are currently available:\n\n* `history` - use the browser's history API to make the URLs look just like any standard URL\n* `hash` - use `#` to separate the server part of the URL from the Ember part: `/blog/#/posts/new`\n* `none` - do not store the Ember URL in the actual browser URL (mainly used for testing)\n* `auto` - use the best option based on browser capabilities: `history` if possible, then `hash` if possible, otherwise `none`\n\nThis value is defaulted to `auto` by the `locationType` setting of `/config/environment.js`",
      "itemtype": "property",
      "name": "location",
      "default": "'hash'",
      "see": [
        "{Location}"
      ],
      "access": "public",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/router.ts",
      "line": 1790,
      "description": "Represents the current URL.",
      "itemtype": "property",
      "name": "url",
      "type": "{String}",
      "access": "private",
      "tagname": "",
      "class": "EmberRouter",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 12,
      "description": "The Transition's internal promise. Calling `.then` on this property\nis that same as calling `.then` on the Transition object itself, but\nthis property is exposed for when you want to pass around a\nTransition's promise, but not the Transition object itself, since\nTransition object can be externally `abort`ed, while the promise\ncannot.",
      "itemtype": "property",
      "name": "promise",
      "type": "{Object}",
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 25,
      "description": "Custom state can be stored on a Transition's `data` object.\nThis can be useful for decorating a Transition within an earlier\nhook and shared with a later hook. Properties set on `data` will\nbe copied to new transitions generated by calling `retry` on this\ntransition.",
      "itemtype": "property",
      "name": "data",
      "type": "{Object}",
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 37,
      "description": "A standard promise hook that resolves if the transition\nsucceeds and rejects if it fails/redirects/aborts.\n\nForwards to the internal `promise` property which you can\nuse in situations where you want to pass around a thennable,\nbut not the Transition itself.",
      "itemtype": "method",
      "name": "then",
      "params": [
        {
          "name": "onFulfilled",
          "description": "",
          "type": "Function"
        },
        {
          "name": "onRejected",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\nUseful for tooling.",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 54,
      "description": "Forwards to the internal `promise` property which you can\n  use in situations where you want to pass around a thennable,\n  but not the Transition itself.",
      "itemtype": "method",
      "name": "catch",
      "params": [
        {
          "name": "onRejection",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\n  Useful for tooling.",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 68,
      "description": "Forwards to the internal `promise` property which you can\n  use in situations where you want to pass around a thennable,\n  but not the Transition itself.",
      "itemtype": "method",
      "name": "finally",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "optional string for labeling the promise.\n  Useful for tooling.",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Promise"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 82,
      "description": "Aborts the Transition. Note you can also implicitly abort a transition\nby initiating another transition while a previous one is underway.",
      "itemtype": "method",
      "name": "abort",
      "return": {
        "description": "this transition",
        "type": "Transition"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 91,
      "description": "Retries a previously-aborted transition (making sure to abort the\n  transition if it's still active). Returns a new transition that\n  represents the new attempt to transition.",
      "itemtype": "method",
      "name": "retry",
      "return": {
        "description": "new transition",
        "type": "Transition"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 102,
      "description": "Sets the URL-changing method to be employed at the end of a\n  successful transition. By default, a new Transition will just\n  use `updateURL`, but passing 'replace' to this method will\n  cause the URL to update using 'replaceWith' instead. Omitting\n  a parameter will disable the URL change, allowing for transitions\n  that don't update the URL at completion (this is also used for\n  handleURL, since the URL has already changed before the\n  transition took place).",
      "itemtype": "method",
      "name": "method",
      "params": [
        {
          "name": "method",
          "description": "the type of URL-changing method to use\n    at the end of a transition. Accepted values are 'replace',\n    falsy values, or any other non-falsy value (which is\n    interpreted as an updateURL transition).",
          "type": "String"
        }
      ],
      "return": {
        "description": "this transition",
        "type": "Transition"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 123,
      "description": "Fires an event on the current list of resolved/resolving\n  handlers within this transition. Useful for firing events\n  on route hierarchies that haven't fully been entered yet.\nNote: This method is also aliased as `send`",
      "itemtype": "method",
      "name": "trigger",
      "params": [
        {
          "name": "ignoreFailure",
          "description": "a boolean specifying whether unhandled events throw an error",
          "type": "Boolean",
          "optional": true,
          "optdefault": "false"
        },
        {
          "name": "name",
          "description": "the name of the event to fire",
          "type": "String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 137,
      "description": "This property is a `RouteInfo` object that represents\nwhere the router is transitioning to. It's important\nto note that a `RouteInfo` is a linked list and this\nproperty represents the leafmost route.",
      "itemtype": "property",
      "name": "to",
      "type": "Null|RouteInfo|RouteInfoWithAttributes",
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 146,
      "description": "This property is a `RouteInfo` object that represents\nwhere transition originated from. It's important\nto note that a `RouteInfo` is a linked list and this\nproperty represents the head node of the list.\nIn the case of an initial render, `from` will be set to\n`null`.",
      "itemtype": "property",
      "name": "from",
      "type": "Null|RouteInfoWithAttributes",
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/routing/lib/system/transition.ts",
      "line": 157,
      "description": "Transitions are aborted and their promises rejected\nwhen redirects occur; this method returns a promise\nthat will follow any redirects that occur and fulfill\nwith the value fulfilled by any redirecting transitions\nthat occur.",
      "itemtype": "method",
      "name": "followRedirects",
      "return": {
        "description": "a promise that fulfills with the same\n  value that the final redirecting transition fulfills with",
        "type": "Promise"
      },
      "access": "public",
      "tagname": "",
      "class": "Transition",
      "module": "@ember/routing"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/ext/function.js",
      "line": 12,
      "description": "The `property` extension of Javascript's Function prototype is available\nwhen `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is\n`true`, which is the default.\n\nComputed properties allow you to treat a function like a property:\n\n```app/utils/president.js\nimport EmberObject from '@ember/object';\n\nexport default EmberObject.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n  }.property() // Call this flag to mark the function as a property\n});\n```\n\n```javascript\nlet president = President.create({\n  firstName: 'Barack',\n  lastName: 'Obama'\n});\n\npresident.get('fullName'); // 'Barack Obama'\n```\n\nTreating a function like a property is useful because they can work with\nbindings, just like any other property.\n\nMany computed properties have dependencies on other properties. For\nexample, in the above example, the `fullName` property depends on\n`firstName` and `lastName` to determine its value. You can tell Ember\nabout these dependencies like this:\n\n```app/utils/president.js\nimport EmberObject from '@ember/object';\n\nexport default EmberObject.extend({\n  firstName: '',\n  lastName:  '',\n\n  fullName: function() {\n    return this.get('firstName') + ' ' + this.get('lastName');\n\n    // Tell Ember.js that this computed property depends on firstName\n    // and lastName\n  }.property('firstName', 'lastName')\n});\n```\n\nMake sure you list these dependencies so Ember knows when to update\nbindings that connect to a computed property. Changing a dependency\nwill not immediately trigger an update of the computed property, but\nwill instead clear the cache so that it is updated when the next `get`\nis called on the property.\n\nSee [ComputedProperty](/ember/release/classes/ComputedProperty), [@ember/object/computed](/ember/release/classes/@ember%2Fobject%2Fcomputed).",
      "itemtype": "method",
      "name": "property",
      "access": "public",
      "tagname": "",
      "class": "Function",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/ext/function.js",
      "line": 95,
      "description": "The `observes` extension of Javascript's Function prototype is available\nwhen `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is\ntrue, which is the default.\n\nYou can observe property changes simply by adding the `observes`\ncall to the end of your method declarations in classes that you write.\nFor example:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nEmberObject.extend({\n  valueObserver: function() {\n    // Executes whenever the \"value\" property changes\n  }.observes('value')\n});\n```\n\nIn the future this method may become asynchronous.\n\nSee `observer`.",
      "itemtype": "method",
      "name": "observes",
      "access": "public",
      "tagname": "",
      "class": "Function",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/ext/function.js",
      "line": 141,
      "description": "The `on` extension of Javascript's Function prototype is available\nwhen `EmberENV.EXTEND_PROTOTYPES` or `EmberENV.EXTEND_PROTOTYPES.Function` is\ntrue, which is the default.\n\nYou can listen for events simply by adding the `on` call to the end of\nyour method declarations in classes or mixins that you write. For example:\n\n```javascript\nimport Mixin from '@ember/mixin';\n\nMixin.create({\n  doSomethingWithElement: function() {\n    // Executes whenever the \"didInsertElement\" event fires\n  }.on('didInsertElement')\n});\n```\n\nSee `@ember/object/evented/on`.",
      "itemtype": "method",
      "name": "on",
      "access": "public",
      "tagname": "",
      "class": "Function",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/-proxy.js",
      "line": 36,
      "description": "The object whose properties will be forwarded.",
      "itemtype": "property",
      "name": "content",
      "type": "{unknown}",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Ember.ProxyMixin",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/action_handler.js",
      "line": 22,
      "description": "The collection of functions, keyed by name, available on this\n`ActionHandler` as action targets.\n\nThese functions will be invoked when a matching `{{action}}` is triggered\nfrom within a template and the application's current route is this route.\n\nActions can also be invoked from other parts of your application\nvia `ActionHandler#send`.\n\nThe `actions` hash will inherit action handlers from\nthe `actions` hash defined on extended parent classes\nor mixins rather than just replace the entire hash, e.g.:\n\n```app/mixins/can-display-banner.js\nimport Mixin from '@ember/mixin';\n\nexport default Mixin.create({\n  actions: {\n    displayBanner(msg) {\n      // ...\n    }\n  }\n});\n```\n\n```app/routes/welcome.js\nimport Route from '@ember/routing/route';\nimport CanDisplayBanner from '../mixins/can-display-banner';\n\nexport default Route.extend(CanDisplayBanner, {\n  actions: {\n    playMusic() {\n      // ...\n    }\n  }\n});\n\n// `WelcomeRoute`, when active, will be able to respond\n// to both actions, since the actions hash is merged rather\n// then replaced when extending mixins / parent classes.\nthis.send('displayBanner');\nthis.send('playMusic');\n```\n\nWithin a Controller, Route or Component's action handler,\nthe value of the `this` context is the Controller, Route or\nComponent object:\n\n```app/routes/song.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    myAction() {\n      this.controllerFor(\"song\");\n      this.transitionTo(\"other.route\");\n      ...\n    }\n  }\n});\n```\n\nIt is also possible to call `this._super(...arguments)` from within an\naction handler if it overrides a handler defined on a parent\nclass or mixin:\n\nTake for example the following routes:\n\n```app/mixins/debug-route.js\nimport Mixin from '@ember/mixin';\n\nexport default Mixin.create({\n  actions: {\n    debugRouteInformation() {\n      console.debug(\"It's a-me, console.debug!\");\n    }\n  }\n});\n```\n\n```app/routes/annoying-debug.js\nimport Route from '@ember/routing/route';\nimport DebugRoute from '../mixins/debug-route';\n\nexport default Route.extend(DebugRoute, {\n  actions: {\n    debugRouteInformation() {\n      // also call the debugRouteInformation of mixed in DebugRoute\n      this._super(...arguments);\n\n      // show additional annoyance\n      window.alert(...);\n    }\n  }\n});\n```\n\n## Bubbling\n\nBy default, an action will stop bubbling once a handler defined\non the `actions` hash handles it. To continue bubbling the action,\nyou must return `true` from the handler:\n\n```app/router.js\nRouter.map(function() {\n  this.route(\"album\", function() {\n    this.route(\"song\");\n  });\n});\n```\n\n```app/routes/album.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    startPlaying: function() {\n    }\n  }\n});\n```\n\n```app/routes/album-song.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    startPlaying() {\n      // ...\n\n      if (actionShouldAlsoBeTriggeredOnParentRoute) {\n        return true;\n      }\n    }\n  }\n});\n```",
      "itemtype": "property",
      "name": "actions",
      "type": "Object",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Ember.ActionHandler",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/action_handler.js",
      "line": 167,
      "description": "Triggers a named action on the `ActionHandler`. Any parameters\nsupplied after the `actionName` string will be passed as arguments\nto the action target function.\n\nIf the `ActionHandler` has its `target` property set, actions may\nbubble to the `target`. Bubbling happens when an `actionName` can\nnot be found in the `ActionHandler`'s `actions` hash or if the\naction target function returns `true`.\n\nExample\n\n```app/routes/welcome.js\nimport Route from '@ember/routing/route';\n\nexport default Route.extend({\n  actions: {\n    playTheme() {\n      this.send('playMusic', 'theme.mp3');\n    },\n    playMusic(track) {\n      // ...\n    }\n  }\n});\n```",
      "itemtype": "method",
      "name": "send",
      "params": [
        {
          "name": "actionName",
          "description": "The action to trigger",
          "type": "String"
        },
        {
          "name": "context",
          "description": "a context to send with the action",
          "type": "*"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Ember.ActionHandler",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 111,
      "description": "Returns true if the passed object is an array or Array-like.\n\nObjects are considered Array-like if any of the following are true:\n\n  - the object is a native Array\n  - the object has an objectAt property\n  - the object is an Object, and has a length property\n\nUnlike `typeOf` this method returns true even if the passed object is\nnot formally an array but appears to be array-like (i.e. implements `Array`)\n\n```javascript\nimport { isArray } from '@ember/array';\nimport ArrayProxy from '@ember/array/proxy';\n\nisArray();                                      // false\nisArray([]);                                    // true\nisArray(ArrayProxy.create({ content: [] }));    // true\n```",
      "itemtype": "method",
      "name": "isArray",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object to test",
          "type": "Object"
        }
      ],
      "return": {
        "description": "true if the passed object is an array or Array-like",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/array",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 224,
      "description": "__Required.__ You must implement this method to apply this mixin.\n\nYour array must support the `length` property. Your replace methods should\nset this property whenever it changes.",
      "itemtype": "property",
      "name": "length",
      "type": "Number",
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 234,
      "description": "Returns the object at the given `index`. If the given `index` is negative\nor is greater or equal than the array length, returns `undefined`.\n\nThis is one of the primitives you must implement to support `EmberArray`.\nIf your object supports retrieving the value of an array item using `get()`\n(i.e. `myArray.get(0)`), then you do not need to implement this method\nyourself.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\n\narr.objectAt(0);   // 'a'\narr.objectAt(3);   // 'd'\narr.objectAt(-1);  // undefined\narr.objectAt(4);   // undefined\narr.objectAt(5);   // undefined\n```",
      "itemtype": "method",
      "name": "objectAt",
      "params": [
        {
          "name": "idx",
          "description": "The index of the item to return.",
          "type": "Number"
        }
      ],
      "return": {
        "description": "item at index or undefined",
        "type": "*"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 259,
      "description": "This returns the objects at the specified indexes, using `objectAt`.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd'];\n\narr.objectsAt([0, 1, 2]);  // ['a', 'b', 'c']\narr.objectsAt([2, 3, 4]);  // ['c', 'd', undefined]\n```",
      "itemtype": "method",
      "name": "objectsAt",
      "params": [
        {
          "name": "indexes",
          "description": "An array of indexes of items to return.",
          "type": "Array"
        }
      ],
      "return": {
        "description": "",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 278,
      "description": "This is the handler for the special array content property. If you get\nthis property, it will return this. If you set this property to a new\narray, it will replace the current content.\n\n```javascript\nlet peopleToMoon = ['Armstrong', 'Aldrin'];\n\npeopleToMoon.get('[]'); // ['Armstrong', 'Aldrin']\n\npeopleToMoon.set('[]', ['Collins']); // ['Collins']\npeopleToMoon.get('[]'); // ['Collins']\n```",
      "itemtype": "property",
      "name": "[]",
      "return": {
        "description": "this"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 306,
      "description": "The first object in the array, or `undefined` if the array is empty.\n\n```javascript\nlet vowels = ['a', 'e', 'i', 'o', 'u'];\nvowels.firstObject; // 'a'\n\nvowels.shiftObject();\nvowels.firstObject; // 'e'\n\nvowels.reverseObjects();\nvowels.firstObject; // 'u'\n\nvowels.clear();\nvowels.firstObject; // undefined\n```",
      "itemtype": "property",
      "name": "firstObject",
      "return": {
        "description": "The first object in the array",
        "type": "Object | undefined"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 331,
      "description": "The last object in the array, or `undefined` if the array is empty.",
      "itemtype": "property",
      "name": "lastObject",
      "return": {
        "description": "The last object in the array",
        "type": "Object | undefined"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 343,
      "description": "Returns a new array that is a slice of the receiver. This implementation\nuses the observable array methods to retrieve the objects for the new\nslice.\n\n```javascript\nlet arr = ['red', 'green', 'blue'];\n\narr.slice(0);       // ['red', 'green', 'blue']\narr.slice(0, 2);    // ['red', 'green']\narr.slice(1, 100);  // ['green', 'blue']\n```",
      "itemtype": "method",
      "name": "slice",
      "params": [
        {
          "name": "beginIndex",
          "description": "(Optional) index to begin slicing from.",
          "type": "Number"
        },
        {
          "name": "endIndex",
          "description": "(Optional) index to end the slice at (but not included).",
          "type": "Number"
        }
      ],
      "return": {
        "description": "New array with specified slice",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 383,
      "description": "Used to determine the passed object's first occurrence in the array.\nReturns the index if found, -1 if no match is found.\n\nThe optional `startAt` argument can be used to pass a starting\nindex to search from, effectively slicing the searchable portion\nof the array. If it's negative it will add the array length to\nthe startAt value passed in as the index to search from. If less\nthan or equal to `-1 * array.length` the entire array is searched.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.indexOf('a');       //  0\narr.indexOf('z');       // -1\narr.indexOf('a', 2);    //  4\narr.indexOf('a', -1);   //  4, equivalent to indexOf('a', 4)\narr.indexOf('a', -100); //  0, searches entire array\narr.indexOf('b', 3);    // -1\narr.indexOf('a', 100);  // -1\n\nlet people = [{ name: 'Zoey' }, { name: 'Bob' }]\nlet newPerson = { name: 'Tom' };\npeople = [newPerson, ...people, newPerson];\n\npeople.indexOf(newPerson);     //  0\npeople.indexOf(newPerson, 1);  //  3\npeople.indexOf(newPerson, -4); //  0\npeople.indexOf(newPerson, 10); // -1\n```",
      "itemtype": "method",
      "name": "indexOf",
      "params": [
        {
          "name": "object",
          "description": "the item to search for",
          "type": "Object"
        },
        {
          "name": "startAt",
          "description": "optional starting location to search, default 0",
          "type": "Number"
        }
      ],
      "return": {
        "description": "index or -1 if not found",
        "type": "Number"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 425,
      "description": "Returns the index of the given `object`'s last occurrence.\n\n- If no `startAt` argument is given, the search starts from\nthe last position.\n- If it's greater than or equal to the length of the array,\nthe search starts from the last position.\n- If it's negative, it is taken as the offset from the end\nof the array i.e. `startAt + array.length`.\n- If it's any other positive number, will search backwards\nfrom that index of the array.\n\nReturns -1 if no match is found.\n\n```javascript\nlet arr = ['a', 'b', 'c', 'd', 'a'];\n\narr.lastIndexOf('a');       //  4\narr.lastIndexOf('z');       // -1\narr.lastIndexOf('a', 2);    //  0\narr.lastIndexOf('a', -1);   //  4\narr.lastIndexOf('a', -3);   //  0\narr.lastIndexOf('b', 3);    //  1\narr.lastIndexOf('a', 100);  //  4\n```",
      "itemtype": "method",
      "name": "lastIndexOf",
      "params": [
        {
          "name": "object",
          "description": "the item to search for",
          "type": "Object"
        },
        {
          "name": "startAt",
          "description": "optional starting location to search from\nbackwards, defaults to `(array.length - 1)`",
          "type": "Number"
        }
      ],
      "return": {
        "description": "The last index of the `object` in the array or -1\nif not found",
        "type": "Number"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 483,
      "description": "Adds an array observer to the receiving array. The array observer object\nnormally must implement two methods:\n\n* `willChange(observedObj, start, removeCount, addCount)` - This method will be\n  called just before the array is modified.\n* `didChange(observedObj, start, removeCount, addCount)` - This method will be\n  called just after the array is modified.\n\nBoth callbacks will be passed the observed object, starting index of the\nchange as well as a count of the items to be removed and added. You can use\nthese callbacks to optionally inspect the array during the change, clear\ncaches, or do any other bookkeeping necessary.\n\nIn addition to passing a target, you can also include an options hash\nwhich you can use to override the method names that will be invoked on the\ntarget.",
      "itemtype": "method",
      "name": "addArrayObserver",
      "params": [
        {
          "name": "target",
          "description": "The observer object.",
          "type": "Object"
        },
        {
          "name": "opts",
          "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "example": [
        "\n    import Service from '@ember/service';\n\n    export default Service.extend({\n      data: Ember.A(),\n\n      init() {\n        this._super(...arguments);\n\n        this.data.addArrayObserver(this, {\n          willChange: 'dataWillChange',\n          didChange: 'dataDidChange'\n        });\n      },\n\n      dataWillChange(array, start, removeCount, addCount) {\n        console.log('array will change', array, start, removeCount, addCount);\n      },\n\n      dataDidChange(array, start, removeCount, addCount) {\n        console.log('array did change', array, start, removeCount, addCount);\n      }\n    });"
      ],
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 536,
      "description": "Removes an array observer from the object if the observer is current\nregistered. Calling this method multiple times with the same object will\nhave no effect.",
      "itemtype": "method",
      "name": "removeArrayObserver",
      "params": [
        {
          "name": "target",
          "description": "The object observing the array.",
          "type": "Object"
        },
        {
          "name": "opts",
          "description": "Optional hash of configuration options including\n  `willChange` and `didChange` option.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 552,
      "description": "Becomes true whenever the array currently has observers watching changes\non the array.\n\n```javascript\nlet arr = [1, 2, 3, 4, 5];\narr.hasArrayObservers; // false\n\narr.addArrayObserver(this, {\n  willChange() {\n    console.log('willChange');\n  }\n});\narr.hasArrayObservers; // true\n```",
      "itemtype": "property",
      "name": "hasArrayObservers",
      "type": "Boolean",
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 579,
      "description": "If you are implementing an object that supports `EmberArray`, call this\nmethod just before the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n```app/components/show-post.js\nimport Component from '@ember/component';\nimport EmberObject from '@ember/object';\n\nconst Post = EmberObject.extend({\n  body: '',\n  save() {}\n})\n\nexport default Component.extend({\n  attemptsToModify: 0,\n  successfulModifications: 0,\n  posts: null,\n\n  init() {\n    this._super(...arguments);\n\n    this.posts = [1, 2, 3].map(i => Post.create({ body: i }));\n    this.posts.addArrayObserver(this, {\n      willChange() {\n        this.incrementProperty('attemptsToModify');\n      },\n      didChange() {\n        this.incrementProperty('successfulModifications');\n      }\n    });\n  },\n\n  actions: {\n    editPost(post, newContent) {\n      let oldContent = post.body,\n          postIndex = this.posts.indexOf(post);\n\n      this.posts.arrayContentWillChange(postIndex, 0, 0); // attemptsToModify = 1\n      post.set('body', newContent);\n\n      post.save()\n        .then(response => {\n          this.posts.arrayContentDidChange(postIndex, 0, 0); // successfulModifications = 1\n        })\n        .catch(error => {\n          post.set('body', oldContent);\n        })\n    }\n  }\n});\n```",
      "itemtype": "method",
      "name": "arrayContentWillChange",
      "params": [
        {
          "name": "startIdx",
          "description": "The starting index in the array that will change.",
          "type": "Number"
        },
        {
          "name": "removeAmt",
          "description": "The number of items that will be removed. If you\n  pass `null` assumes 0",
          "type": "Number"
        },
        {
          "name": "addAmt",
          "description": "The number of items that will be added. If you\n  pass `null` assumes 0.",
          "type": "Number"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 646,
      "description": "If you are implementing an object that supports `EmberArray`, call this\nmethod just after the array content changes to notify any observers and\ninvalidate any related properties. Pass the starting index of the change\nas well as a delta of the amounts to change.\n\n```javascript\nlet arr = [1, 2, 3, 4, 5];\n\narr.copyWithin(-2); // [1, 2, 3, 1, 2]\n// arr.lastObject = 5\narr.arrayContentDidChange(3, 2, 2);\n// arr.lastObject = 2\n```",
      "itemtype": "method",
      "name": "arrayContentDidChange",
      "params": [
        {
          "name": "startIdx",
          "description": "The starting index in the array that did change.",
          "type": "Number"
        },
        {
          "name": "removeAmt",
          "description": "The number of items that were removed. If you\n  pass `null` assumes 0",
          "type": "Number"
        },
        {
          "name": "addAmt",
          "description": "The number of items that were added. If you\n  pass `null` assumes 0.",
          "type": "Number"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 674,
      "description": "Iterates through the array, calling the passed function on each\nitem. This method corresponds to the `forEach()` method defined in\nJavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nlet foods = [\n  { name: 'apple', eaten: false },\n  { name: 'banana', eaten: false },\n  { name: 'carrot', eaten: false }\n];\n\nfoods.forEach((food) => food.eaten = true);\n\nlet output = '';\nfoods.forEach((item, index, array) =>\n  output += `${index + 1}/${array.length} ${item.name}\\n`;\n);\nconsole.log(output);\n// 1/3 apple\n// 2/3 banana\n// 3/3 carrot\n```",
      "itemtype": "method",
      "name": "forEach",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "receiver",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 734,
      "description": "Alias for `mapBy`.\n\nReturns the value of the named\nproperty on all items in the enumeration.\n\n```javascript\nlet people = [{name: 'Joe'}, {name: 'Matt'}];\n\npeople.getEach('name');\n// ['Joe', 'Matt'];\n\npeople.getEach('nonexistentProperty');\n// [undefined, undefined];\n```",
      "itemtype": "method",
      "name": "getEach",
      "params": [
        {
          "name": "key",
          "description": "name of the property",
          "type": "String"
        }
      ],
      "return": {
        "description": "The mapped array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 757,
      "description": "Sets the value on the named property for each member. This is more\nergonomic than using other methods defined on this helper. If the object\nimplements Observable, the value will be changed to `set(),` otherwise\nit will be set directly. `null` objects are skipped.\n\n```javascript\nlet people = [{name: 'Joe'}, {name: 'Matt'}];\n\npeople.setEach('zipCode', '10011');\n// [{name: 'Joe', zipCode: '10011'}, {name: 'Matt', zipCode: '10011'}];\n```",
      "itemtype": "method",
      "name": "setEach",
      "params": [
        {
          "name": "key",
          "description": "The key to set",
          "type": "String"
        },
        {
          "name": "value",
          "description": "The object to set",
          "type": "Object"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 780,
      "description": "Maps all of the items in the enumeration to another value, returning\na new array. This method corresponds to `map()` defined in JavaScript 1.6.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\nlet arr = [1, 2, 3, 4, 5, 6];\n\narr.map(element => element * element);\n// [1, 4, 9, 16, 25, 36];\n\narr.map((element, index) => element + index);\n// [1, 3, 5, 7, 9, 11];\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nIt should return the mapped value.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.",
      "itemtype": "method",
      "name": "map",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "The mapped array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 824,
      "description": "Similar to map, this specialized function returns the value of the named\nproperty on all items in the enumeration.\n\n```javascript\nlet people = [{name: 'Joe'}, {name: 'Matt'}];\n\npeople.mapBy('name');\n// ['Joe', 'Matt'];\n\npeople.mapBy('unknownProperty');\n// [undefined, undefined];\n```",
      "itemtype": "method",
      "name": "mapBy",
      "params": [
        {
          "name": "key",
          "description": "name of the property",
          "type": "String"
        }
      ],
      "return": {
        "description": "The mapped array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 845,
      "description": "Returns a new array with all of the items in the enumeration that the provided\ncallback function returns true for. This method corresponds to [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n\nThe callback method should have the following signature:\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nAll parameters are optional. The function should return `true` to include the item\nin the results, and `false` otherwise.\n\nExample:\n\n```javascript\nfunction isAdult(person) {\n  return person.age > 18;\n};\n\nlet people = Ember.A([{ name: 'John', age: 14 }, { name: 'Joan', age: 45 }]);\n\npeople.filter(isAdult); // returns [{ name: 'Joan', age: 45 }];\n```\n\nNote that in addition to a callback, you can pass an optional target object\nthat will be set as `this` on the context. This is a good way to give your\niterator function access to the current object. For example:\n\n```javascript\nfunction isAdultAndEngineer(person) {\n  return person.age > 18 && this.engineering;\n}\n\nclass AdultsCollection {\n  engineering = false;\n\n  constructor(opts = {}) {\n    super(...arguments);\n\n    this.engineering = opts.engineering;\n    this.people = Ember.A([{ name: 'John', age: 14 }, { name: 'Joan', age: 45 }]);\n  }\n}\n\nlet collection = new AdultsCollection({ engineering: true });\ncollection.people.filter(isAdultAndEngineer, { target: collection });\n```",
      "itemtype": "method",
      "name": "filter",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "A filtered array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 918,
      "description": "Returns an array with all of the items in the enumeration where the passed\nfunction returns false. This method is the inverse of filter().\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- *item* is the current item in the iteration.\n- *index* is the current index in the iteration\n- *array* is the array itself.\n\nIt should return a falsey value to include the item in the results.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as \"this\" on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nconst food = [\n  { food: 'apple', isFruit: true },\n  { food: 'bread', isFruit: false },\n  { food: 'banana', isFruit: true }\n];\nconst nonFruits = food.reject(function(thing) {\n  return thing.isFruit;\n}); // [{food: 'bread', isFruit: false}]\n```",
      "itemtype": "method",
      "name": "reject",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "A rejected array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 965,
      "description": "Filters the array by the property and an optional value. If a value is given, it returns\nthe items that have said value for the property. If not, it returns all the items that\nhave a truthy value for the property.\n\nExample Usage:\n\n```javascript\nlet things = Ember.A([{ food: 'apple', isFruit: true }, { food: 'beans', isFruit: false }]);\n\nthings.filterBy('food', 'beans'); // [{ food: 'beans' }]\nthings.filterBy('isFruit'); // [{ food: 'apple' }]\n```",
      "itemtype": "method",
      "name": "filterBy",
      "params": [
        {
          "name": "key",
          "description": "the property to test",
          "type": "String"
        },
        {
          "name": "value",
          "description": "optional value to test against.",
          "type": "*",
          "optional": true
        }
      ],
      "return": {
        "description": "filtered array",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 989,
      "description": "Returns an array with the items that do not have truthy values for the provided key.\nYou can pass an optional second argument with a target value to reject for the key.\nOtherwise this will reject objects where the provided property evaluates to false.\n\nExample Usage:\n\n```javascript\n  let food = [\n    { name: \"apple\", isFruit: true },\n    { name: \"carrot\", isFruit: false },\n    { name: \"bread\", isFruit: false },\n  ];\n  food.rejectBy('isFruit'); // [{ name: \"carrot\", isFruit: false }, { name: \"bread\", isFruit: false }]\n  food.rejectBy('name', 'carrot'); // [{ name: \"apple\", isFruit: true }}, { name: \"bread\", isFruit: false }]\n```",
      "itemtype": "method",
      "name": "rejectBy",
      "params": [
        {
          "name": "key",
          "description": "the property to test",
          "type": "String"
        },
        {
          "name": "value",
          "description": "optional value to test against.",
          "type": "*",
          "optional": true
        }
      ],
      "return": {
        "description": "rejected array",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1016,
      "description": "Returns the first item in the array for which the callback returns true.\nThis method is similar to the `find()` method defined in ECMAScript 2015.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nIt should return the `true` to include the item in the results, `false`\notherwise.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nExample Usage:\n\n```javascript\nlet users = [\n  { id: 1, name: 'Yehuda' },\n  { id: 2, name: 'Tom' },\n  { id: 3, name: 'Melanie' },\n  { id: 4, name: 'Leah' }\n];\n\nusers.find((user) => user.name == 'Tom'); // [{ id: 2, name: 'Tom' }]\nusers.find(({ id }) => id == 3); // [{ id: 3, name: 'Melanie' }]\n```",
      "itemtype": "method",
      "name": "find",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Found item or `undefined`.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1063,
      "description": "Returns the first item with a property matching the passed value. You\ncan pass an optional second argument with the target value. Otherwise\nthis will match any property that evaluates to `true`.\n\nThis method works much like the more generic `find()` method.\n\nUsage Example:\n\n```javascript\nlet users = [\n  { id: 1, name: 'Yehuda', isTom: false },\n  { id: 2, name: 'Tom', isTom: true },\n  { id: 3, name: 'Melanie', isTom: false },\n  { id: 4, name: 'Leah', isTom: false }\n];\n\nusers.findBy('id', 4); // { id: 4, name: 'Leah', isTom: false }\nusers.findBy('name', 'Melanie'); // { id: 3, name: 'Melanie', isTom: false }\nusers.findBy('isTom'); // { id: 2, name: 'Tom', isTom: true }\n```",
      "itemtype": "method",
      "name": "findBy",
      "params": [
        {
          "name": "key",
          "description": "the property to test",
          "type": "String"
        },
        {
          "name": "value",
          "description": "optional value to test against.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "found item or `undefined`",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1095,
      "description": "Returns `true` if the passed function returns true for every item in the\nenumeration. This corresponds with the `Array.prototype.every()` method defined in ES5.\n\nThe callback method should have the following signature:\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nAll params are optional. The method should return `true` or `false`.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. This is a good way\nto give your iterator function access to the current object.\n\nUsage example:\n\n```javascript\nfunction isAdult(person) {\n  return person.age > 18;\n};\n\nconst people = Ember.A([{ name: 'John', age: 24 }, { name: 'Joan', age: 45 }]);\nconst areAllAdults = people.every(isAdult);\n```",
      "itemtype": "method",
      "name": "every",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1137,
      "description": "Returns `true` if the passed property resolves to the value of the second\nargument for all items in the array. This method is often simpler/faster\nthan using a callback.\n\nNote that like the native `Array.every`, `isEvery` will return true when called\non any empty array.\n```javascript\nclass Language {\n  constructor(name, isProgrammingLanguage) {\n    this.name = name;\n    this.programmingLanguage = isProgrammingLanguage;\n  }\n}\n\nconst compiledLanguages = [\n  new Language('Java', true),\n  new Language('Go', true),\n  new Language('Rust', true)\n]\n\nconst languagesKnownByMe = [\n  new Language('Javascript', true),\n  new Language('English', false),\n  new Language('Ruby', true)\n]\n\ncompiledLanguages.isEvery('programmingLanguage'); // true\nlanguagesKnownByMe.isEvery('programmingLanguage'); // false\n```",
      "itemtype": "method",
      "name": "isEvery",
      "params": [
        {
          "name": "key",
          "description": "the property to test",
          "type": "String"
        },
        {
          "name": "value",
          "description": "optional value to test against. Defaults to `true`",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "since": "1.3.0",
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1179,
      "description": "The any() method executes the callback function once for each element\npresent in the array until it finds the one where callback returns a truthy\nvalue (i.e. `true`). If such an element is found, any() immediately returns\ntrue. Otherwise, any() returns false.\n\n```javascript\nfunction(item, index, array);\n```\n\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array object itself.\n\nNote that in addition to a callback, you can also pass an optional target\nobject that will be set as `this` on the context. It can be a good way\nto give your iterator function access to an object in cases where an ES6\narrow function would not be appropriate.\n\nUsage Example:\n\n```javascript\nlet includesManager = people.any(this.findPersonInManagersList, this);\n\nlet includesStockHolder = people.any(person => {\n  return this.findPersonInStockHoldersList(person)\n});\n\nif (includesManager || includesStockHolder) {\n  Paychecks.addBiggerBonus();\n}\n```",
      "itemtype": "method",
      "name": "any",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "target",
          "description": "The target object to use",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "`true` if the passed function returns `true` for any item",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1223,
      "description": "Returns `true` if the passed property resolves to the value of the second\nargument for any item in the array. This method is often simpler/faster\nthan using a callback.\n\nExample usage:\n\n```javascript\nconst food = [\n  { food: 'apple', isFruit: true },\n  { food: 'bread', isFruit: false },\n  { food: 'banana', isFruit: true }\n];\n\nfood.isAny('isFruit'); // true\n```",
      "itemtype": "method",
      "name": "isAny",
      "params": [
        {
          "name": "key",
          "description": "the property to test",
          "type": "String"
        },
        {
          "name": "value",
          "description": "optional value to test against. Defaults to `true`",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "since": "1.3.0",
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1251,
      "description": "This will combine the values of the array into a single value. It\nis a useful way to collect a summary value from an array. This\ncorresponds to the `reduce()` method defined in JavaScript 1.8.\n\nThe callback method you provide should have the following signature (all\nparameters are optional):\n\n```javascript\nfunction(previousValue, item, index, array);\n```\n\n- `previousValue` is the value returned by the last call to the iterator.\n- `item` is the current item in the iteration.\n- `index` is the current index in the iteration.\n- `array` is the array itself.\n\nReturn the new cumulative value.\n\nIn addition to the callback you can also pass an `initialValue`. An error\nwill be raised if you do not pass an initial value and the enumerator is\nempty.\n\nNote that unlike the other methods, this method does not allow you to\npass a target object to set as this for the callback. It's part of the\nspec. Sorry.\n\nExample Usage:\n\n```javascript\n  let numbers = [1, 2, 3, 4, 5];\n\n  numbers.reduce(function(summation, current) {\n    return summation + current;\n  }); // 15 (1 + 2 + 3 + 4 + 5)\n\n  numbers.reduce(function(summation, current) {\n    return summation + current;\n  }, -15); // 0 (-15 + 1 + 2 + 3 + 4 + 5)\n\n\n  let binaryValues = [true, false, false];\n\n  binaryValues.reduce(function(truthValue, current) {\n    return truthValue && current;\n  }); // false (true && false && false)\n```",
      "itemtype": "method",
      "name": "reduce",
      "params": [
        {
          "name": "callback",
          "description": "The callback to execute",
          "type": "Function"
        },
        {
          "name": "initialValue",
          "description": "Initial value for the reduce",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The reduced value.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1317,
      "description": "Invokes the named method on every object in the receiver that\nimplements it. This method corresponds to the implementation in\nPrototype 1.6.\n\n```javascript\nclass Person {\n  name = null;\n\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet(prefix='Hello') {\n    return `${prefix} ${this.name}`;\n  }\n}\n\nlet people = [new Person('Joe'), new Person('Matt')];\n\npeople.invoke('greet'); // ['Hello Joe', 'Hello Matt']\npeople.invoke('greet', 'Bonjour'); // ['Bonjour Joe', 'Bonjour Matt']\n```",
      "itemtype": "method",
      "name": "invoke",
      "params": [
        {
          "name": "methodName",
          "description": "the name of the method",
          "type": "String"
        },
        {
          "name": "args",
          "description": "optional arguments to pass as well.",
          "type": "Object..."
        }
      ],
      "return": {
        "description": "return values from calling invoke.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1355,
      "description": "Simply converts the object into a genuine array. The order is not\nguaranteed. Corresponds to the method implemented by Prototype.",
      "itemtype": "method",
      "name": "toArray",
      "return": {
        "description": "the object as an array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1367,
      "description": "Returns a copy of the array with all `null` and `undefined` elements removed.\n\n```javascript\nlet arr = ['a', null, 'c', undefined];\narr.compact();  // ['a', 'c']\n```",
      "itemtype": "method",
      "name": "compact",
      "return": {
        "description": "the array without null and undefined elements.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1383,
      "description": "Used to determine if the array contains the passed object.\nReturns `true` if found, `false` otherwise.\n\nThe optional `startAt` argument can be used to pass a starting\nindex to search from, effectively slicing the searchable portion\nof the array. If it's negative it will add the array length to\nthe startAt value passed in as the index to search from. If less\nthan or equal to `-1 * array.length` the entire array is searched.\n\nThis method has the same behavior of JavaScript's [Array.includes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).\n\n```javascript\n[1, 2, 3].includes(2);     // true\n[1, 2, 3].includes(4);     // false\n[1, 2, 3].includes(3, 2);  // true\n[1, 2, 3].includes(3, 3);  // false\n[1, 2, 3].includes(3, -1); // true\n[1, 2, 3].includes(1, -1); // false\n[1, 2, 3].includes(1, -4); // true\n[1, 2, NaN].includes(NaN); // true\n```",
      "itemtype": "method",
      "name": "includes",
      "params": [
        {
          "name": "object",
          "description": "The object to search for.",
          "type": "Object"
        },
        {
          "name": "startAt",
          "description": "optional starting location to search, default 0",
          "type": "Number"
        }
      ],
      "return": {
        "description": "`true` if object is found in the array.",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1416,
      "description": "Sorts the array by the keys specified in the argument.\n\nYou may provide multiple arguments to sort by multiple properties.\n\n```javascript\n   let colors = [\n { name: 'red', weight: 500 },\n { name: 'green', weight: 600 },\n { name: 'blue', weight: 500 }\n];\n\n   colors.sortBy('name');\n   // [{name: 'blue', weight: 500}, {name: 'green', weight: 600}, {name: 'red', weight: 500}]\n\n   colors.sortBy('weight', 'name');\n   // [{name: 'blue', weight: 500}, {name: 'red', weight: 500}, {name: 'green', weight: 600}]\n   ```",
      "itemtype": "method",
      "name": "sortBy",
      "params": [
        {
          "name": "property",
          "description": "name(s) to sort on",
          "type": "String"
        }
      ],
      "return": {
        "description": "The sorted array.",
        "type": "Array"
      },
      "since": "1.2.0",
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1460,
      "description": "Returns a new array that contains only unique values. The default\nimplementation returns an array regardless of the receiver type.\n\n```javascript\nlet arr = ['a', 'a', 'b', 'b'];\narr.uniq();  // ['a', 'b']\n```\n\nThis only works on primitive data types, e.g. Strings, Numbers, etc.",
      "itemtype": "method",
      "name": "uniq",
      "return": {
        "description": "",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1479,
      "description": "Returns a new array that contains only items containing a unique property value.\nThe default implementation returns an array regardless of the receiver type.\n\n```javascript\nlet arr = [{ value: 'a' }, { value: 'a' }, { value: 'b' }, { value: 'b' }];\narr.uniqBy('value');  // [{ value: 'a' }, { value: 'b' }]\n\nlet arr = [2.2, 2.1, 3.2, 3.3];\narr.uniqBy(Math.floor);  // [2.2, 3.2];\n```",
      "itemtype": "method",
      "name": "uniqBy",
      "params": [
        {
          "name": "key",
          "description": "",
          "type": "String,Function"
        }
      ],
      "return": {
        "description": "",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1501,
      "description": "Returns a new array that excludes the passed value. The default\nimplementation returns an array regardless of the receiver type.\nIf the receiver does not contain the value it returns the original array.\n\n```javascript\nlet arr = ['a', 'b', 'a', 'c'];\narr.without('a');  // ['b', 'c']\n```",
      "itemtype": "method",
      "name": "without",
      "params": [
        {
          "name": "value",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "EmberArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1549,
      "description": "__Required.__ You must implement this method to apply this mixin.\n\nThis is one of the primitives you must implement to support `Array`.\nYou should replace amt objects started at idx with the objects in the\npassed array. You should also call `this.arrayContentDidChange()`\n\nNote that this method is expected to validate the type(s) of objects that it expects.",
      "itemtype": "method",
      "name": "replace",
      "params": [
        {
          "name": "idx",
          "description": "Starting index in the array to replace. If\n  idx >= length, then append to the end of the array.",
          "type": "Number"
        },
        {
          "name": "amt",
          "description": "Number of elements that should be removed from\n  the array, starting at *idx*.",
          "type": "Number"
        },
        {
          "name": "objects",
          "description": "An array of zero or more objects that should be\n  inserted into the array at *idx*",
          "type": "EmberArray"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1568,
      "description": "Remove all elements from the array. This is useful if you\nwant to reuse an existing array without having to recreate it.\n\n```javascript\nlet colors = ['red', 'green', 'blue'];\n\ncolors.length;  // 3\ncolors.clear(); // []\ncolors.length;  // 0\n```",
      "itemtype": "method",
      "name": "clear",
      "return": {
        "description": "An empty Array.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1594,
      "description": "This will use the primitive `replace()` method to insert an object at the\nspecified index.\n\n```javascript\nlet colors = ['red', 'green', 'blue'];\n\ncolors.insertAt(2, 'yellow');  // ['red', 'green', 'yellow', 'blue']\ncolors.insertAt(5, 'orange');  // Error: Index out of range\n```",
      "itemtype": "method",
      "name": "insertAt",
      "params": [
        {
          "name": "idx",
          "description": "index of insert the object at.",
          "type": "Number"
        },
        {
          "name": "object",
          "description": "object to insert",
          "type": "Object"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1616,
      "description": "Remove an object at the specified index using the `replace()` primitive\nmethod. You can pass either a single index, or a start and a length.\n\nIf you pass a start and length that is beyond the\nlength this method will throw an assertion.\n\n```javascript\nlet colors = ['red', 'green', 'blue', 'yellow', 'orange'];\n\ncolors.removeAt(0);     // ['green', 'blue', 'yellow', 'orange']\ncolors.removeAt(2, 2);  // ['green', 'blue']\ncolors.removeAt(4, 2);  // Error: Index out of range\n```",
      "itemtype": "method",
      "name": "removeAt",
      "params": [
        {
          "name": "start",
          "description": "index, start of range",
          "type": "Number"
        },
        {
          "name": "len",
          "description": "length of passing range",
          "type": "Number"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1641,
      "description": "Push the object onto the end of the array. Works just like `push()` but it\nis KVO-compliant.\n\n```javascript\nlet colors = ['red', 'green'];\n\ncolors.pushObject('black');     // ['red', 'green', 'black']\ncolors.pushObject(['yellow']);  // ['red', 'green', ['yellow']]\n```",
      "itemtype": "method",
      "name": "pushObject",
      "params": [
        {
          "name": "obj",
          "description": "object to push",
          "type": "*"
        }
      ],
      "return": {
        "description": "object same object passed as a param"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1661,
      "description": "Add the objects in the passed array to the end of the array. Defers\nnotifying observers of the change until all objects are added.\n\n```javascript\nlet colors = ['red'];\n\ncolors.pushObjects(['yellow', 'orange']);  // ['red', 'yellow', 'orange']\n```",
      "itemtype": "method",
      "name": "pushObjects",
      "params": [
        {
          "name": "objects",
          "description": "the objects to add",
          "type": "EmberArray"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1681,
      "description": "Pop object from array or nil if none are left. Works just like `pop()` but\nit is KVO-compliant.\n\n```javascript\nlet colors = ['red', 'green', 'blue'];\n\ncolors.popObject();   // 'blue'\nconsole.log(colors);  // ['red', 'green']\n```",
      "itemtype": "method",
      "name": "popObject",
      "return": {
        "description": "object"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1707,
      "description": "Shift an object from start of array or nil if none are left. Works just\nlike `shift()` but it is KVO-compliant.\n\n```javascript\nlet colors = ['red', 'green', 'blue'];\n\ncolors.shiftObject();  // 'red'\nconsole.log(colors);   // ['green', 'blue']\n```",
      "itemtype": "method",
      "name": "shiftObject",
      "return": {
        "description": "object"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1732,
      "description": "Unshift an object to start of array. Works just like `unshift()` but it is\nKVO-compliant.\n\n```javascript\nlet colors = ['red'];\n\ncolors.unshiftObject('yellow');    // ['yellow', 'red']\ncolors.unshiftObject(['black']);   // [['black'], 'yellow', 'red']\n```",
      "itemtype": "method",
      "name": "unshiftObject",
      "params": [
        {
          "name": "obj",
          "description": "object to unshift",
          "type": "*"
        }
      ],
      "return": {
        "description": "object same object passed as a param"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1752,
      "description": "Adds the named objects to the beginning of the array. Defers notifying\nobservers until all objects have been added.\n\n```javascript\nlet colors = ['red'];\n\ncolors.unshiftObjects(['black', 'white']);   // ['black', 'white', 'red']\ncolors.unshiftObjects('yellow'); // Type Error: 'undefined' is not a function\n```",
      "itemtype": "method",
      "name": "unshiftObjects",
      "params": [
        {
          "name": "objects",
          "description": "the objects to add",
          "type": "Enumberable"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1773,
      "description": "Reverse objects in the array. Works just like `reverse()` but it is\nKVO-compliant.",
      "itemtype": "method",
      "name": "reverseObjects",
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1792,
      "description": "Replace all the receiver's content with content of the argument.\nIf argument is an empty array receiver will be cleared.\n\n```javascript\nlet colors = ['red', 'green', 'blue'];\n\ncolors.setObjects(['black', 'white']);  // ['black', 'white']\ncolors.setObjects([]);                  // []\n```",
      "itemtype": "method",
      "name": "setObjects",
      "params": [
        {
          "name": "objects",
          "description": "array whose content will be used for replacing\n    the content of the receiver",
          "type": "EmberArray"
        }
      ],
      "return": {
        "description": "receiver with the new content",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1819,
      "description": "Remove all occurrences of an object in the array.\n\n```javascript\nlet cities = ['Chicago', 'Berlin', 'Lima', 'Chicago'];\n\ncities.removeObject('Chicago');  // ['Berlin', 'Lima']\ncities.removeObject('Lima');     // ['Berlin']\ncities.removeObject('Tokyo')     // ['Berlin']\n```",
      "itemtype": "method",
      "name": "removeObject",
      "params": [
        {
          "name": "obj",
          "description": "object to remove",
          "type": "*"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1847,
      "description": "Removes each object in the passed array from the receiver.",
      "itemtype": "method",
      "name": "removeObjects",
      "params": [
        {
          "name": "objects",
          "description": "the objects to remove",
          "type": "EmberArray"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1864,
      "description": "Push the object onto the end of the array if it is not already\npresent in the array.\n\n```javascript\nlet cities = ['Chicago', 'Berlin'];\n\ncities.addObject('Lima');    // ['Chicago', 'Berlin', 'Lima']\ncities.addObject('Berlin');  // ['Chicago', 'Berlin', 'Lima']\n```",
      "itemtype": "method",
      "name": "addObject",
      "params": [
        {
          "name": "obj",
          "description": "object to add, if not already present",
          "type": "*"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1890,
      "description": "Adds each object in the passed array to the receiver.",
      "itemtype": "method",
      "name": "addObjects",
      "params": [
        {
          "name": "objects",
          "description": "the objects to add.",
          "type": "EmberArray"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "EmberArray"
      },
      "access": "public",
      "tagname": "",
      "class": "MutableArray",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/array.js",
      "line": 1906,
      "description": "Creates an `Ember.NativeArray` from an Array-like object.\nDoes not modify the original object's contents. `A()` is not needed if\n`EmberENV.EXTEND_PROTOTYPES` is `true` (the default value). However,\nit is recommended that you use `A()` when creating addons for\nember or when you can not guarantee that `EmberENV.EXTEND_PROTOTYPES`\nwill be `true`.\n\nExample\n\n```app/components/my-component.js\nimport Component from '@ember/component';\nimport { A } from '@ember/array';\n\nexport default Component.extend({\n  tagName: 'ul',\n  classNames: ['pagination'],\n\n  init() {\n    this._super(...arguments);\n\n    if (!this.get('content')) {\n      this.set('content', A());\n      this.set('otherContent', A([1,2,3]));\n    }\n  }\n});\n```",
      "itemtype": "method",
      "name": "A",
      "static": 1,
      "return": {
        "description": "",
        "type": "Ember.NativeArray"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/array",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/comparable.js",
      "line": 19,
      "description": "__Required.__ You must implement this method to apply this mixin.\n\nOverride to return the result of the comparison of the two parameters. The\ncompare method should return:\n\n- `-1` if `a < b`\n- `0` if `a == b`\n- `1` if `a > b`\n\nDefault implementation raises an exception.",
      "itemtype": "method",
      "name": "compare",
      "params": [
        {
          "name": "a",
          "description": "the first object to compare",
          "type": "Object"
        },
        {
          "name": "b",
          "description": "the second object to compare",
          "type": "Object"
        }
      ],
      "return": {
        "description": "the result of the comparison",
        "type": "Number"
      },
      "access": "private",
      "tagname": "",
      "class": "Ember.Comparable",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "line": 15,
      "description": "The container stores state.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "__container__",
      "type": "Ember.Container",
      "class": "ContainerProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "line": 23,
      "description": "Returns an object that can be used to provide an owner to a\nmanually created instance.\n\nExample:\n\n```\nimport { getOwner } from '@ember/application';\n\nlet owner = getOwner(this);\n\nUser.create(\n  owner.ownerInjection(),\n  { username: 'rwjblue' }\n)\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "ownerInjection",
      "since": "2.3.0",
      "return": {
        "description": "",
        "type": "Object"
      },
      "class": "ContainerProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "line": 49,
      "description": "Given a fullName return a corresponding instance.\n\nThe default behavior is for lookup to return a singleton instance.\nThe singleton is scoped to the container, allowing multiple containers\nto all have their own locally scoped singletons.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nlet twitter = container.lookup('api:twitter');\n\ntwitter instanceof Twitter; // => true\n\n// by default the container will return singletons\nlet twitter2 = container.lookup('api:twitter');\ntwitter2 instanceof Twitter; // => true\n\ntwitter === twitter2; //=> true\n```\n\nIf singletons are not wanted an optional flag can be provided at lookup.\n\n```javascript\nlet registry = new Registry();\nlet container = registry.container();\n\nregistry.register('api:twitter', Twitter);\n\nlet twitter = container.lookup('api:twitter', { singleton: false });\nlet twitter2 = container.lookup('api:twitter', { singleton: false });\n\ntwitter === twitter2; //=> false\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "lookup",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Any"
      },
      "class": "ContainerProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/container_proxy.js",
      "line": 110,
      "description": "Given a fullName return a factory manager.\n\n This method returns a manager which can be used for introspection of the\n factory's class or for the creation of factory instances with initial\n properties. The manager is an object with the following properties:\n\n * `class` - The registered or resolved class.\n * `create` - A function that will create an instance of the class with\n   any dependencies injected.\n\n For example:\n\n ```javascript\n import { getOwner } from '@ember/application';\n\n let owner = getOwner(otherInstance);\n // the owner is commonly the `applicationInstance`, and can be accessed via\n // an instance initializer.\n\n let factory = owner.factoryFor('service:bespoke');\n\n factory.class;\n // The registered or resolved class. For example when used with an Ember-CLI\n // app, this would be the default export from `app/services/bespoke.js`.\n\n let instance = factory.create({\n   someProperty: 'an initial property value'\n });\n // Create an instance with any injections and the passed options as\n // initial properties.\n ```\n\n Any instances created via the factory's `.create()` method *must* be destroyed\n manually by the caller of `.create()`. Typically, this is done during the creating\n objects own `destroy` or `willDestroy` methods.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "factoryFor",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "FactoryManager"
      },
      "class": "ContainerProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/copyable.js",
      "line": 22,
      "description": "__Required.__ You must implement this method to apply this mixin.\n\nOverride to return a copy of the receiver. Default implementation raises\nan exception.",
      "itemtype": "method",
      "name": "copy",
      "params": [
        {
          "name": "deep",
          "description": "if `true`, a deep copy of the object should be made",
          "type": "Boolean"
        }
      ],
      "return": {
        "description": "copy of receiver",
        "type": "Object"
      },
      "access": "private",
      "tagname": "",
      "class": "Ember.Copyable",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "line": 54,
      "description": "Subscribes to a named event with given function.\n\n```javascript\nperson.on('didLoad', function() {\n  // fired once the person has loaded\n});\n```\n\nAn optional target can be passed in as the 2nd argument that will\nbe set as the \"this\" for the callback. This is a good way to give your\nfunction access to the object triggering the event. When the target\nparameter is used the callback method becomes the third argument.",
      "itemtype": "method",
      "name": "on",
      "params": [
        {
          "name": "name",
          "description": "The name of the event",
          "type": "String"
        },
        {
          "name": "target",
          "description": "The \"this\" binding for the callback",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "A function or the name of a function to be called on `target`",
          "type": "Function|String"
        }
      ],
      "return": {
        "description": "this"
      },
      "access": "public",
      "tagname": "",
      "class": "Evented",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "line": 80,
      "description": "Subscribes a function to a named event and then cancels the subscription\nafter the first time the event is triggered. It is good to use ``one`` when\nyou only care about the first time an event has taken place.\n\nThis function takes an optional 2nd argument that will become the \"this\"\nvalue for the callback. When the target parameter is used the callback method\nbecomes the third argument.",
      "itemtype": "method",
      "name": "one",
      "params": [
        {
          "name": "name",
          "description": "The name of the event",
          "type": "String"
        },
        {
          "name": "target",
          "description": "The \"this\" binding for the callback",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "A function or the name of a function to be called on `target`",
          "type": "Function|String"
        }
      ],
      "return": {
        "description": "this"
      },
      "access": "public",
      "tagname": "",
      "class": "Evented",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "line": 101,
      "description": "Triggers a named event for the object. Any additional arguments\nwill be passed as parameters to the functions that are subscribed to the\nevent.\n\n```javascript\nperson.on('didEat', function(food) {\n  console.log('person ate some ' + food);\n});\n\nperson.trigger('didEat', 'broccoli');\n\n// outputs: person ate some broccoli\n```",
      "itemtype": "method",
      "name": "trigger",
      "params": [
        {
          "name": "name",
          "description": "The name of the event",
          "type": "String"
        },
        {
          "name": "args",
          "description": "Optional arguments to pass on",
          "type": "Object..."
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Evented",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "line": 124,
      "description": "Cancels subscription for given name, target, and method.",
      "itemtype": "method",
      "name": "off",
      "params": [
        {
          "name": "name",
          "description": "The name of the event",
          "type": "String"
        },
        {
          "name": "target",
          "description": "The target of the subscription",
          "type": "Object"
        },
        {
          "name": "method",
          "description": "The function or the name of a function of the subscription",
          "type": "Function|String"
        }
      ],
      "return": {
        "description": "this"
      },
      "access": "public",
      "tagname": "",
      "class": "Evented",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/evented.js",
      "line": 139,
      "description": "Checks to see if object has any subscriptions for named event.",
      "itemtype": "method",
      "name": "has",
      "params": [
        {
          "name": "name",
          "description": "The name of the event",
          "type": "String"
        }
      ],
      "return": {
        "description": "does the object have a subscription for event",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "Evented",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 93,
      "description": "Retrieves the value of a property from the object.\n\nThis method is usually similar to using `object[keyName]` or `object.keyName`,\nhowever it supports both computed properties and the unknownProperty\nhandler.\n\nBecause `get` unifies the syntax for accessing all these kinds\nof properties, it can make many refactorings easier, such as replacing a\nsimple property with a computed property, or vice versa.\n\n### Computed Properties\n\nComputed properties are methods defined with the `property` modifier\ndeclared at the end, such as:\n\n```javascript\nimport { computed } from '@ember/object';\n\nfullName: computed('firstName', 'lastName', function() {\n  return this.get('firstName') + ' ' + this.get('lastName');\n})\n```\n\nWhen you call `get` on a computed property, the function will be\ncalled and the return value will be returned instead of the function\nitself.\n\n### Unknown Properties\n\nLikewise, if you try to call `get` on a property whose value is\n`undefined`, the `unknownProperty()` method will be called on the object.\nIf this method returns any value other than `undefined`, it will be returned\ninstead. This allows you to implement \"virtual\" properties that are\nnot defined upfront.",
      "itemtype": "method",
      "name": "get",
      "params": [
        {
          "name": "keyName",
          "description": "The property to retrieve",
          "type": "String"
        }
      ],
      "return": {
        "description": "The property value or undefined.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 138,
      "description": "To get the values of multiple properties at once, call `getProperties`\nwith a list of strings or an array:\n\n```javascript\nrecord.getProperties('firstName', 'lastName', 'zipCode');\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```\n\nis equivalent to:\n\n```javascript\nrecord.getProperties(['firstName', 'lastName', 'zipCode']);\n// { firstName: 'John', lastName: 'Doe', zipCode: '10011' }\n```",
      "itemtype": "method",
      "name": "getProperties",
      "params": [
        {
          "name": "list",
          "description": "of keys to get",
          "type": "String...|Array"
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 163,
      "description": "Sets the provided key or path to the value.\n\n```javascript\nrecord.set(\"key\", value);\n```\n\nThis method is generally very similar to calling `object[\"key\"] = value` or\n`object.key = value`, except that it provides support for computed\nproperties, the `setUnknownProperty()` method and property observers.\n\n### Computed Properties\n\nIf you try to set a value on a key that has a computed property handler\ndefined (see the `get()` method for an example), then `set()` will call\nthat method, passing both the value and key instead of simply changing\nthe value itself. This is useful for those times when you need to\nimplement a property that is composed of one or more member\nproperties.\n\n### Unknown Properties\n\nIf you try to set a value on a key that is undefined in the target\nobject, then the `setUnknownProperty()` handler will be called instead. This\ngives you an opportunity to implement complex \"virtual\" properties that\nare not predefined on the object. If `setUnknownProperty()` returns\nundefined, then `set()` will simply set the value on the object.\n\n### Property Observers\n\nIn addition to changing the property, `set()` will also register a property\nchange with the object. Unless you have placed this call inside of a\n`beginPropertyChanges()` and `endPropertyChanges(),` any \"local\" observers\n(i.e. observer methods declared on the same object), will be called\nimmediately. Any \"remote\" observers (i.e. observer methods declared on\nanother object) will be placed in a queue and called at a later time in a\ncoalesced manner.",
      "itemtype": "method",
      "name": "set",
      "params": [
        {
          "name": "keyName",
          "description": "The property to set",
          "type": "String"
        },
        {
          "name": "value",
          "description": "The value to set or `null`.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The passed value",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 211,
      "description": "Sets a list of properties at once. These properties are set inside\na single `beginPropertyChanges` and `endPropertyChanges` batch, so\nobservers will be buffered.\n\n```javascript\nrecord.setProperties({ firstName: 'Charles', lastName: 'Jolley' });\n```",
      "itemtype": "method",
      "name": "setProperties",
      "params": [
        {
          "name": "hash",
          "description": "the hash of keys and values to set",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The passed in hash",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 229,
      "description": "Begins a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call this\nmethod at the beginning of the changes to begin deferring change\nnotifications. When you are done making changes, call\n`endPropertyChanges()` to deliver the deferred change notifications and end\ndeferring.",
      "itemtype": "method",
      "name": "beginPropertyChanges",
      "return": {
        "description": "",
        "type": "Observable"
      },
      "access": "private",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 249,
      "description": "Ends a grouping of property changes.\n\nYou can use this method to group property changes so that notifications\nwill not be sent until the changes are finished. If you plan to make a\nlarge number of changes to an object at one time, you should call\n`beginPropertyChanges()` at the beginning of the changes to defer change\nnotifications. When you are done making changes, call this method to\ndeliver the deferred change notifications and end deferring.",
      "itemtype": "method",
      "name": "endPropertyChanges",
      "return": {
        "description": "",
        "type": "Observable"
      },
      "access": "private",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 268,
      "description": "Notify the observer system that a property has just changed.\n\nSometimes you need to change a value directly or indirectly without\nactually calling `get()` or `set()` on it. In this case, you can use this\nmethod instead. Calling this method will notify all observers that the\nproperty has potentially changed value.",
      "itemtype": "method",
      "name": "notifyPropertyChange",
      "params": [
        {
          "name": "keyName",
          "description": "The property key to be notified about.",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Observable"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 286,
      "description": "Adds an observer on a property.\n\nThis is the core method used to register an observer for a property.\n\nOnce you call this method, any time the key's value is set, your observer\nwill be notified. Note that the observers are triggered any time the\nvalue is set, regardless of whether it has actually changed. Your\nobserver should be prepared to handle that.\n\nThere are two common invocation patterns for `.addObserver()`:\n\n- Passing two arguments:\n  - the name of the property to observe (as a string)\n  - the function to invoke (an actual function)\n- Passing three arguments:\n  - the name of the property to observe (as a string)\n  - the target object (will be used to look up and invoke a\n    function on)\n  - the name of the function to invoke on the target object\n    (as a string).\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n\n    // the following are equivalent:\n\n    // using three arguments\n    this.addObserver('foo', this, 'fooDidChange');\n\n    // using two arguments\n    this.addObserver('foo', (...args) => {\n      this.fooDidChange(...args);\n    });\n  },\n\n  fooDidChange() {\n    // your custom logic code\n  }\n});\n```\n\n### Observer Methods\n\nObserver methods have the following signature:\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  init() {\n    this._super(...arguments);\n    this.addObserver('foo', this, 'fooDidChange');\n  },\n\n  fooDidChange(sender, key, value, rev) {\n    // your code\n  }\n});\n```\n\nThe `sender` is the object that changed. The `key` is the property that\nchanges. The `value` property is currently reserved and unused. The `rev`\nis the last property revision of the object when it changed, which you can\nuse to detect if the key value has really changed or not.\n\nUsually you will not need the value or revision parameters at\nthe end. In this case, it is common to write observer methods that take\nonly a sender and key value as parameters or, if you aren't interested in\nany of these values, to write an observer that has no parameters at all.",
      "itemtype": "method",
      "name": "addObserver",
      "params": [
        {
          "name": "key",
          "description": "The key to observe",
          "type": "String"
        },
        {
          "name": "target",
          "description": "The target object to invoke",
          "type": "Object"
        },
        {
          "name": "method",
          "description": "The method to invoke",
          "type": "String|Function"
        },
        {
          "name": "sync",
          "description": "Whether the observer is sync or not",
          "type": "Boolean"
        }
      ],
      "return": {
        "description": "",
        "type": "Observable"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 374,
      "description": "Remove an observer you have previously registered on this object. Pass\nthe same key, target, and method you passed to `addObserver()` and your\ntarget will no longer receive notifications.",
      "itemtype": "method",
      "name": "removeObserver",
      "params": [
        {
          "name": "key",
          "description": "The key to observe",
          "type": "String"
        },
        {
          "name": "target",
          "description": "The target object to invoke",
          "type": "Object"
        },
        {
          "name": "method",
          "description": "The method to invoke",
          "type": "String|Function"
        },
        {
          "name": "sync",
          "description": "Whether the observer is async or not",
          "type": "Boolean"
        }
      ],
      "return": {
        "description": "",
        "type": "Observable"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 392,
      "description": "Returns `true` if the object currently has observers registered for a\nparticular key. You can use this method to potentially defer performing\nan expensive action until someone begins observing a particular property\non the object.",
      "itemtype": "method",
      "name": "hasObserverFor",
      "params": [
        {
          "name": "key",
          "description": "Key to check",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 407,
      "description": "Retrieves the value of a property, or a default value in the case that the\nproperty returns `undefined`.\n\n```javascript\nperson.getWithDefault('lastName', 'Doe');\n```",
      "itemtype": "method",
      "name": "getWithDefault",
      "params": [
        {
          "name": "keyName",
          "description": "The name of the property to retrieve",
          "type": "String"
        },
        {
          "name": "defaultValue",
          "description": "The value to return if the property value is undefined",
          "type": "Object"
        }
      ],
      "return": {
        "description": "The property value or the defaultValue.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "deprecated": true,
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 426,
      "description": "Set the value of a property to the current value plus some amount.\n\n```javascript\nperson.incrementProperty('age');\nteam.incrementProperty('score', 2);\n```",
      "itemtype": "method",
      "name": "incrementProperty",
      "params": [
        {
          "name": "keyName",
          "description": "The name of the property to increment",
          "type": "String"
        },
        {
          "name": "increment",
          "description": "The amount to increment by. Defaults to 1",
          "type": "Number"
        }
      ],
      "return": {
        "description": "The new property value",
        "type": "Number"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 448,
      "description": "Set the value of a property to the current value minus some amount.\n\n```javascript\nplayer.decrementProperty('lives');\norc.decrementProperty('health', 5);\n```",
      "itemtype": "method",
      "name": "decrementProperty",
      "params": [
        {
          "name": "keyName",
          "description": "The name of the property to decrement",
          "type": "String"
        },
        {
          "name": "decrement",
          "description": "The amount to decrement by. Defaults to 1",
          "type": "Number"
        }
      ],
      "return": {
        "description": "The new property value",
        "type": "Number"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 470,
      "description": "Set the value of a boolean property to the opposite of its\ncurrent value.\n\n```javascript\nstarship.toggleProperty('warpDriveEngaged');\n```",
      "itemtype": "method",
      "name": "toggleProperty",
      "params": [
        {
          "name": "keyName",
          "description": "The name of the property to toggle",
          "type": "String"
        }
      ],
      "return": {
        "description": "The new property value",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/observable.js",
      "line": 487,
      "description": "Returns the cached value of a computed property, if it exists.\nThis allows you to inspect the value of a computed property\nwithout accidentally invoking it if it is intended to be\ngenerated lazily.",
      "itemtype": "method",
      "name": "cacheFor",
      "params": [
        {
          "name": "keyName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "The cached value of the computed property, if any",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "Observable",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 101,
      "description": "If the proxied promise is rejected this will contain the reason\nprovided.",
      "itemtype": "property",
      "name": "reason",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 111,
      "description": "Once the proxied promise has settled this will become `false`.",
      "itemtype": "property",
      "name": "isPending",
      "default": "true",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 122,
      "description": "Once the proxied promise has settled this will become `true`.",
      "itemtype": "property",
      "name": "isSettled",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 133,
      "description": "Will become `true` if the proxied promise is rejected.",
      "itemtype": "property",
      "name": "isRejected",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 142,
      "description": "Will become `true` if the proxied promise is fulfilled.",
      "itemtype": "property",
      "name": "isFulfilled",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 151,
      "description": "The promise whose fulfillment value is being proxied by this object.\n\nThis property must be specified upon creation, and should not be\nchanged once created.\n\nExample:\n\n```javascript\nimport ObjectProxy from '@ember/object/proxy';\nimport PromiseProxyMixin from '@ember/object/promise-proxy-mixin';\n\nObjectProxy.extend(PromiseProxyMixin).create({\n  promise: <thenable>\n});\n```",
      "itemtype": "property",
      "name": "promise",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 180,
      "description": "An alias to the proxied promise's `then`.\n\nSee RSVP.Promise.then.",
      "itemtype": "method",
      "name": "then",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise"
      },
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 192,
      "description": "An alias to the proxied promise's `catch`.\n\nSee RSVP.Promise.catch.",
      "itemtype": "method",
      "name": "catch",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise"
      },
      "since": "1.3.0",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/promise_proxy.js",
      "line": 205,
      "description": "An alias to the proxied promise's `finally`.\n\nSee RSVP.Promise.finally.",
      "itemtype": "method",
      "name": "finally",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise"
      },
      "since": "1.3.0",
      "access": "public",
      "tagname": "",
      "class": "PromiseProxyMixin",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 18,
      "description": "Given a fullName return the corresponding factory.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "resolveRegistration",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "fullName's factory",
        "type": "Function"
      },
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 31,
      "description": "Registers a factory that can be used for dependency injection (with\n`inject`) or for service lookup. Each factory is registered with\na full name including two parts: `type:name`.\n\nA simple example:\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\n\nApp.Orange = EmberObject.extend();\nApp.register('fruit:favorite', App.Orange);\n```\n\nEmber will resolve factories from the `App` namespace automatically.\nFor example `App.CarsController` will be discovered and returned if\nan application requests `controller:cars`.\n\nAn example of registering a controller with a non-standard name:\n\n```javascript\nimport Application from '@ember/application';\nimport Controller from '@ember/controller';\n\nlet App = Application.create();\nlet Session = Controller.extend();\n\nApp.register('controller:session', Session);\n\n// The Session controller can now be treated like a normal controller,\n// despite its non-standard name.\nApp.ApplicationController = Controller.extend({\n  needs: ['session']\n});\n```\n\nRegistered factories are **instantiated** by having `create`\ncalled on them. Additionally they are **singletons**, each time\nthey are looked up they return the same instance.\n\nSome examples modifying that default behavior:\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\n\nApp.Person = EmberObject.extend();\nApp.Orange = EmberObject.extend();\nApp.Email = EmberObject.extend();\nApp.session = EmberObject.create();\n\nApp.register('model:user', App.Person, { singleton: false });\nApp.register('fruit:favorite', App.Orange);\nApp.register('communication:main', App.Email, { singleton: false });\nApp.register('session', App.session, { instantiate: false });\n```",
      "itemtype": "method",
      "name": "register",
      "params": [
        {
          "name": "fullName",
          "description": "type:name (e.g., 'model:user')",
          "type": "String"
        },
        {
          "name": "factory",
          "description": "(e.g., App.Person)",
          "type": "Any"
        },
        {
          "name": "options",
          "description": "(optional) disable instantiation or singleton usage",
          "type": "Object"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 101,
      "description": "Unregister a factory.\n\n```javascript\nimport Application from '@ember/application';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\nlet User = EmberObject.extend();\nApp.register('model:user', User);\n\nApp.resolveRegistration('model:user').create() instanceof User //=> true\n\nApp.unregister('model:user')\nApp.resolveRegistration('model:user') === undefined //=> true\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "unregister",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 124,
      "description": "Check if a factory is registered.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "hasRegistration",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 134,
      "description": "Return a specific registered option for a particular factory.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "registeredOption",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "optionName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "options",
        "type": "Object"
      },
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 145,
      "description": "Register options for a particular factory.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "registerOptions",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 155,
      "description": "Return registered options for a particular factory.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "registeredOptions",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "options",
        "type": "Object"
      },
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 165,
      "description": "Allow registering options for all factories of a type.\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create();\nlet appInstance = App.buildInstance();\n\n// if all of type `connection` must not be singletons\nappInstance.registerOptionsForType('connection', { singleton: false });\n\nappInstance.register('connection:twitter', TwitterConnection);\nappInstance.register('connection:facebook', FacebookConnection);\n\nlet twitter = appInstance.lookup('connection:twitter');\nlet twitter2 = appInstance.lookup('connection:twitter');\n\ntwitter === twitter2; // => false\n\nlet facebook = appInstance.lookup('connection:facebook');\nlet facebook2 = appInstance.lookup('connection:facebook');\n\nfacebook === facebook2; // => false\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "registerOptionsForType",
      "params": [
        {
          "name": "type",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 198,
      "description": "Return the registered options for all factories of a type.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "registeredOptionsForType",
      "params": [
        {
          "name": "type",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "options",
        "type": "Object"
      },
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/registry_proxy.js",
      "line": 208,
      "description": "Define a dependency injection onto a specific factory or all factories\nof a type.\n\nWhen Ember instantiates a controller, view, or other framework component\nit can attach a dependency to that component. This is often used to\nprovide services to a set of framework components.\n\nAn example of providing a session object to all controllers:\n\n```javascript\nimport { alias } from '@ember/object/computed';\nimport Application from '@ember/application';\nimport Controller from '@ember/controller';\nimport EmberObject from '@ember/object';\n\nlet App = Application.create();\nlet Session = EmberObject.extend({ isAuthenticated: false });\n\n// A factory must be registered before it can be injected\nApp.register('session:main', Session);\n\n// Inject 'session:main' onto all factories of the type 'controller'\n// with the name 'session'\nApp.inject('controller', 'session', 'session:main');\n\nApp.IndexController = Controller.extend({\n  isLoggedIn: alias('session.isAuthenticated')\n});\n```\n\nInjections can also be performed on specific factories.\n\n```javascript\nApp.inject(<full_name or type>, <property name>, <full_name>)\nApp.inject('route', 'source', 'source:main')\nApp.inject('route:application', 'email', 'model:email')\n```\n\nIt is important to note that injections can only be performed on\nclasses that are instantiated by Ember itself. Instantiating a class\ndirectly (via `create` or `new`) bypasses the dependency injection\nsystem.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "inject",
      "params": [
        {
          "name": "factoryNameOrType",
          "description": "",
          "type": "String"
        },
        {
          "name": "property",
          "description": "",
          "type": "String"
        },
        {
          "name": "injectionName",
          "description": "",
          "type": "String"
        }
      ],
      "class": "RegistryProxyMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/mixins/target_action_support.js",
      "line": 39,
      "description": "Send an `action` with an `actionContext` to a `target`. The action, actionContext\nand target will be retrieved from properties of the object. For example:\n\n```javascript\nimport { alias } from '@ember/object/computed';\n\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: alias('controller'),\n  action: 'save',\n  actionContext: alias('context'),\n  click() {\n    this.triggerAction(); // Sends the `save` action, along with the current context\n                          // to the current controller\n  }\n});\n```\n\nThe `target`, `action`, and `actionContext` can be provided as properties of\nan optional object argument to `triggerAction` as well.\n\n```javascript\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  click() {\n    this.triggerAction({\n      action: 'save',\n      target: this.get('controller'),\n      actionContext: this.get('context')\n    }); // Sends the `save` action, along with the current context\n        // to the current controller\n  }\n});\n```\n\nThe `actionContext` defaults to the object you are mixing `TargetActionSupport` into.\nBut `target` and `action` must be specified either as properties or with the argument\nto `triggerAction`, or a combination:\n\n```javascript\nimport { alias } from '@ember/object/computed';\n\nApp.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {\n  target: alias('controller'),\n  click() {\n    this.triggerAction({\n      action: 'save'\n    }); // Sends the `save` action, along with a reference to `this`,\n        // to the current controller\n  }\n});\n```",
      "itemtype": "method",
      "name": "triggerAction",
      "params": [
        {
          "name": "opts",
          "description": "(optional, with the optional keys action, target and/or actionContext)",
          "type": "Object"
        }
      ],
      "return": {
        "description": "true if the action was sent successfully and did not return false",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "Ember.TargetActionSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "line": 138,
      "description": "The content array. Must be an object that implements `Array` and/or\n`MutableArray.`",
      "itemtype": "property",
      "name": "content",
      "type": "EmberArray",
      "access": "public",
      "tagname": "",
      "class": "ArrayProxy",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "line": 147,
      "description": "Should actually retrieve the object at the specified index from the\ncontent. You can override this method in subclasses to transform the\ncontent item to something new.\n\nThis method will only be called if content is non-`null`.",
      "itemtype": "method",
      "name": "objectAtContent",
      "params": [
        {
          "name": "idx",
          "description": "The index to retrieve.",
          "type": "Number"
        }
      ],
      "return": {
        "description": "the value or undefined if none found",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "ArrayProxy",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "line": 173,
      "description": "Should actually replace the specified objects on the content array.\nYou can override this method in subclasses to transform the content item\ninto something new.\n\nThis method will only be called if content is non-`null`.",
      "itemtype": "method",
      "name": "replaceContent",
      "params": [
        {
          "name": "idx",
          "description": "The starting index",
          "type": "Number"
        },
        {
          "name": "amt",
          "description": "The number of items to remove from the content.",
          "type": "Number"
        },
        {
          "name": "objects",
          "description": "Optional array of objects to insert or null if no\n  objects.",
          "type": "EmberArray"
        }
      ],
      "return": {
        "description": "",
        "type": "Void"
      },
      "access": "public",
      "tagname": "",
      "class": "ArrayProxy",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/array_proxy.js",
      "line": 343,
      "description": "The array that the proxy pretends to be. In the default `ArrayProxy`\nimplementation, this and `content` are the same. Subclasses of `ArrayProxy`\ncan override this property to provide things like sorting and filtering.",
      "itemtype": "property",
      "name": "arrangedContent",
      "access": "public",
      "tagname": "",
      "class": "ArrayProxy",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 290,
      "description": "An overridable method called when objects are instantiated. By default,\ndoes nothing unless it is overridden during class definition.\n\nExample:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  init() {\n    alert(`Name is ${this.get('name')}`);\n  }\n});\n\nlet steve = Person.create({\n  name: 'Steve'\n});\n\n// alerts 'Name is Steve'.\n```\n\nNOTE: If you do override `init` for a framework class like `Component`\nfrom `@ember/component`, be sure to call `this._super(...arguments)`\nin your `init` declaration!\nIf you don't, Ember may not have an opportunity to\ndo important setup work, and you'll see strange behavior in your\napplication.",
      "itemtype": "method",
      "name": "init",
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 324,
      "description": "Defines the properties that will be concatenated from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by combining the superclass' property\nvalue with the subclass' value. An example of this in use within Ember\nis the `classNames` property of `Component` from `@ember/component`.\n\nHere is some sample code showing the difference between a concatenated\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties to concatenate\n  concatenatedProperties: ['concatenatedProperty'],\n\n  someNonConcatenatedProperty: ['bar'],\n  concatenatedProperty: ['bar']\n});\n\nconst FooBar = Bar.extend({\n  someNonConcatenatedProperty: ['foo'],\n  concatenatedProperty: ['foo']\n});\n\nlet fooBar = FooBar.create();\nfooBar.get('someNonConcatenatedProperty'); // ['foo']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo']\n```\n\nThis behavior extends to object creation as well. Continuing the\nabove example:\n\n```javascript\nlet fooBar = FooBar.create({\n  someNonConcatenatedProperty: ['baz'],\n  concatenatedProperty: ['baz']\n})\nfooBar.get('someNonConcatenatedProperty'); // ['baz']\nfooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nAdding a single property that is not an array will just add it in the array:\n\n```javascript\nlet fooBar = FooBar.create({\n  concatenatedProperty: 'baz'\n})\nview.get('concatenatedProperty'); // ['bar', 'foo', 'baz']\n```\n\nUsing the `concatenatedProperties` property, we can tell Ember to mix the\ncontent of the properties.\n\nIn `Component` the `classNames`, `classNameBindings` and\n`attributeBindings` properties are concatenated.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual concatenated property (to not\nmislead your users to think they can override the property in a subclass).",
      "itemtype": "property",
      "name": "concatenatedProperties",
      "type": "Array",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 398,
      "description": "Defines the properties that will be merged from the superclass\n(instead of overridden).\n\nBy default, when you extend an Ember class a property defined in\nthe subclass overrides a property with the same name that is defined\nin the superclass. However, there are some cases where it is preferable\nto build up a property's value by merging the superclass property value\nwith the subclass property's value. An example of this in use within Ember\nis the `queryParams` property of routes.\n\nHere is some sample code showing the difference between a merged\nproperty and a normal one:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Bar = EmberObject.extend({\n  // Configure which properties are to be merged\n  mergedProperties: ['mergedProperty'],\n\n  someNonMergedProperty: {\n    nonMerged: 'superclass value of nonMerged'\n  },\n  mergedProperty: {\n    page: { replace: false },\n    limit: { replace: true }\n  }\n});\n\nconst FooBar = Bar.extend({\n  someNonMergedProperty: {\n    completelyNonMerged: 'subclass value of nonMerged'\n  },\n  mergedProperty: {\n    limit: { replace: false }\n  }\n});\n\nlet fooBar = FooBar.create();\n\nfooBar.get('someNonMergedProperty');\n// => { completelyNonMerged: 'subclass value of nonMerged' }\n//\n// Note the entire object, including the nonMerged property of\n// the superclass object, has been replaced\n\nfooBar.get('mergedProperty');\n// => {\n//   page: {replace: false},\n//   limit: {replace: false}\n// }\n//\n// Note the page remains from the superclass, and the\n// `limit` property's value of `false` has been merged from\n// the subclass.\n```\n\nThis behavior is not available during object `create` calls. It is only\navailable at `extend` time.\n\nIn `Route` the `queryParams` property is merged.\n\nThis feature is available for you to use throughout the Ember object model,\nalthough typical app developers are likely to use it infrequently. Since\nit changes expectations about behavior of properties, you should properly\ndocument its usage in each individual merged property (to not\nmislead your users to think they can override the property in a subclass).",
      "itemtype": "property",
      "name": "mergedProperties",
      "type": "Array",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 473,
      "description": "Destroyed object property flag.\n\nif this property is `true` the observers and bindings were already\nremoved by the effect of calling the `destroy()` method.",
      "itemtype": "property",
      "name": "isDestroyed",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 491,
      "description": "Destruction scheduled flag. The `destroy()` method has been called.\n\nThe object stays intact until the end of the run loop at which point\nthe `isDestroyed` flag is set.",
      "itemtype": "property",
      "name": "isDestroying",
      "default": "false",
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 509,
      "description": "Destroys an object by setting the `isDestroyed` flag and removing its\nmetadata, which effectively destroys observers and bindings.\n\nIf you try to set a property on a destroyed object, an exception will be\nraised.\n\nNote that destruction is scheduled for the end of the run loop and does not\nhappen immediately.  It will set an isDestroying flag immediately.",
      "itemtype": "method",
      "name": "destroy",
      "return": {
        "description": "receiver",
        "type": "EmberObject"
      },
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 536,
      "description": "Override to implement teardown.",
      "itemtype": "method",
      "name": "willDestroy",
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 544,
      "description": "Returns a string representation which attempts to provide more information\nthan Javascript's `toString` typically does, in a generic way for all Ember\nobjects.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend();\nperson = Person.create();\nperson.toString(); //=> \"<Person:ember1024>\"\n```\n\nIf the object's class is not defined on an Ember namespace, it will\nindicate it is a subclass of the registered superclass:\n\n```javascript\nconst Student = Person.extend();\nlet student = Student.create();\nstudent.toString(); //=> \"<(subclass of Person):ember1025>\"\n```\n\nIf the method `toStringExtension` is defined, its return value will be\nincluded in the output.\n\n```javascript\nconst Teacher = Person.extend({\n  toStringExtension() {\n    return this.get('fullName');\n  }\n});\nteacher = Teacher.create();\nteacher.toString(); //=> \"<Teacher:ember1026:Tom Dale>\"\n```",
      "itemtype": "method",
      "name": "toString",
      "return": {
        "description": "string representation",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "CoreObject",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 594,
      "description": "Creates a new subclass.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  say(thing) {\n    alert(thing);\n   }\n});\n```\n\nThis defines a new subclass of EmberObject: `Person`. It contains one method: `say()`.\n\nYou can also create a subclass from any existing class by calling its `extend()` method.\nFor example, you might want to create a subclass of Ember's built-in `Component` class:\n\n```javascript\nimport Component from '@ember/component';\n\nconst PersonComponent = Component.extend({\n  tagName: 'li',\n  classNameBindings: ['isAdministrator']\n});\n```\n\nWhen defining a subclass, you can override methods but still access the\nimplementation of your parent class by calling the special `_super()` method:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  say(thing) {\n    let name = this.get('name');\n    alert(`${name} says: ${thing}`);\n  }\n});\n\nconst Soldier = Person.extend({\n  say(thing) {\n    this._super(`${thing}, sir!`);\n  },\n  march(numberOfHours) {\n    alert(`${this.get('name')} marches for ${numberOfHours} hours.`);\n  }\n});\n\nlet yehuda = Soldier.create({\n  name: 'Yehuda Katz'\n});\n\nyehuda.say('Yes');  // alerts \"Yehuda Katz says: Yes, sir!\"\n```\n\nThe `create()` on line #17 creates an *instance* of the `Soldier` class.\nThe `extend()` on line #8 creates a *subclass* of `Person`. Any instance\nof the `Person` class will *not* have the `march()` method.\n\nYou can also pass `Mixin` classes to add additional properties to the subclass.\n\n```javascript\nimport EmberObject from '@ember/object';\nimport Mixin from '@ember/object/mixin';\n\nconst Person = EmberObject.extend({\n  say(thing) {\n    alert(`${this.get('name')} says: ${thing}`);\n  }\n});\n\nconst SingingMixin = Mixin.create({\n  sing(thing) {\n    alert(`${this.get('name')} sings: la la la ${thing}`);\n  }\n});\n\nconst BroadwayStar = Person.extend(SingingMixin, {\n  dance() {\n    alert(`${this.get('name')} dances: tap tap tap tap `);\n  }\n});\n```\n\nThe `BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.",
      "itemtype": "method",
      "name": "extend",
      "static": 1,
      "params": [
        {
          "name": "mixins",
          "description": "One or more Mixin classes",
          "type": "Mixin",
          "optional": true,
          "multiple": true
        },
        {
          "name": "arguments",
          "description": "Object containing values to use within the new class",
          "type": "Object",
          "optional": true,
          "multiple": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 694,
      "description": "Creates an instance of a class. Accepts either no arguments, or an object\ncontaining values to initialize the newly instantiated object with.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  helloWorld() {\n    alert(`Hi, my name is ${this.get('name')}`);\n  }\n});\n\nlet tom = Person.create({\n  name: 'Tom Dale'\n});\n\ntom.helloWorld(); // alerts \"Hi, my name is Tom Dale\".\n```\n\n`create` will call the `init` function if defined during\n`AnyObject.extend`\n\nIf no arguments are passed to `create`, it will not set values to the new\ninstance during initialization:\n\n```javascript\nlet noName = Person.create();\nnoName.helloWorld(); // alerts undefined\n```\n\nNOTE: For performance reasons, you cannot declare methods or computed\nproperties during `create`. You should instead declare methods and computed\nproperties when using `extend`.",
      "itemtype": "method",
      "name": "create",
      "static": 1,
      "params": [
        {
          "name": "arguments",
          "description": "",
          "optional": true,
          "multiple": true
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 754,
      "description": "Augments a constructor's prototype with additional\nproperties and functions:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst MyObject = EmberObject.extend({\n  name: 'an object'\n});\n\no = MyObject.create();\no.get('name'); // 'an object'\n\nMyObject.reopen({\n  say(msg) {\n    console.log(msg);\n  }\n});\n\no2 = MyObject.create();\no2.say('hello'); // logs \"hello\"\n\no.say('goodbye'); // logs \"goodbye\"\n```\n\nTo add functions and properties to the constructor itself,\nsee `reopenClass`",
      "itemtype": "method",
      "name": "reopen",
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 808,
      "description": "Augments a constructor's own properties and functions:\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst MyObject = EmberObject.extend({\n  name: 'an object'\n});\n\nMyObject.reopenClass({\n  canBuild: false\n});\n\nMyObject.canBuild; // false\no = MyObject.create();\n```\n\nIn other words, this creates static properties and functions for the class.\nThese are only available on the class and not on any instance of that class.\n\n```javascript\nimport EmberObject from '@ember/object';\n\nconst Person = EmberObject.extend({\n  name: '',\n  sayHello() {\n    alert(`Hello. My name is ${this.get('name')}`);\n  }\n});\n\nPerson.reopenClass({\n  species: 'Homo sapiens',\n\n  createPerson(name) {\n    return Person.create({ name });\n  }\n});\n\nlet tom = Person.create({\n  name: 'Tom Dale'\n});\nlet yehuda = Person.createPerson('Yehuda Katz');\n\ntom.sayHello(); // \"Hello. My name is Tom Dale\"\nyehuda.sayHello(); // \"Hello. My name is Yehuda Katz\"\nalert(Person.species); // \"Homo sapiens\"\n```\n\nNote that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`\nvariables. They are only valid on `Person`.\n\nTo add functions and properties to instances of\na constructor by extending the constructor's prototype\nsee `reopen`",
      "itemtype": "method",
      "name": "reopenClass",
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 891,
      "description": "In some cases, you may want to annotate computed properties with additional\nmetadata about how they function or what values they operate on. For\nexample, computed property functions may close over variables that are then\nno longer available for introspection.\n\nYou can pass a hash of these values to a computed property like this:\n\n```javascript\nimport { computed } from '@ember/object';\n\nperson: computed(function() {\n  let personId = this.get('personId');\n  return Person.create({ id: personId });\n}).meta({ type: Person })\n```\n\nOnce you've done this, you can retrieve the values saved to the computed\nproperty from your class like this:\n\n```javascript\nMyClass.metaForProperty('person');\n```\n\nThis will return the original hash that was passed to `meta()`.",
      "static": 1,
      "itemtype": "method",
      "name": "metaForProperty",
      "params": [
        {
          "name": "key",
          "description": "property name",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 934,
      "description": "Iterate over each computed property for the class, passing its name\nand any associated metadata (see `metaForProperty`) to the callback.",
      "static": 1,
      "itemtype": "method",
      "name": "eachComputedProperty",
      "params": [
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        },
        {
          "name": "binding",
          "description": "",
          "type": "Object"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 1043,
      "description": "Provides lookup-time type validation for injected properties.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_onLookup",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/system/core_object.js",
      "line": 1064,
      "description": "Returns a hash of property names and container names that injected\nproperties will lookup on the container lazily.",
      "itemtype": "method",
      "name": "_lazyInjections",
      "return": {
        "description": "Hash of all lazy injected property keys to container names",
        "type": "Object"
      },
      "access": "private",
      "tagname": "",
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/compare.js",
      "line": 44,
      "description": "Compares two javascript values and returns:\n\n - -1 if the first is smaller than the second,\n - 0 if both are equal,\n - 1 if the first is greater than the second.\n\n ```javascript\n import { compare } from '@ember/utils';\n\n compare('hello', 'hello');  // 0\n compare('abc', 'dfg');      // -1\n compare(2, 1);              // 1\n ```\n\nIf the types of the two objects are different precedence occurs in the\nfollowing order, with types earlier in the list considered `<` types\nlater in the list:\n\n - undefined\n - null\n - boolean\n - number\n - string\n - array\n - object\n - instance\n - function\n - class\n - date\n\n ```javascript\n import { compare } from '@ember/utils';\n\n compare('hello', 50);       // 1\n compare(50, 'hello');       // -1\n ```",
      "itemtype": "method",
      "name": "compare",
      "static": 1,
      "params": [
        {
          "name": "v",
          "description": "First value to compare",
          "type": "Object"
        },
        {
          "name": "w",
          "description": "Second value to compare",
          "type": "Object"
        }
      ],
      "return": {
        "description": "-1 if v < w, 0 if v = w and 1 if v > w.",
        "type": "Number"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/copy.js",
      "line": 79,
      "description": "Creates a shallow copy of the passed object. A deep copy of the object is\nreturned if the optional `deep` argument is `true`.\n\nIf the passed object implements the `Copyable` interface, then this\nfunction will delegate to the object's `copy()` method and return the\nresult. See `Copyable` for further details.\n\nFor primitive values (which are immutable in JavaScript), the passed object\nis simply returned.",
      "itemtype": "method",
      "name": "copy",
      "deprecated": true,
      "deprecationMessage": "Use 'ember-copy' addon instead",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object to clone",
          "type": "Object"
        },
        {
          "name": "deep",
          "description": "If true, a deep copy of the object is made.",
          "type": "Boolean",
          "optional": true,
          "optdefault": "false"
        }
      ],
      "return": {
        "description": "The copied object",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/internals",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/is-equal.js",
      "line": 4,
      "description": "Compares two objects, returning true if they are equal.\n\n```javascript\nimport { isEqual } from '@ember/utils';\n\nisEqual('hello', 'hello');                   // true\nisEqual(1, 2);                               // false\n```\n\n`isEqual` is a more specific comparison than a triple equal comparison.\nIt will call the `isEqual` instance method on the objects being\ncompared, allowing finer control over when objects should be considered\nequal to each other.\n\n```javascript\nimport { isEqual } from '@ember/utils';\nimport EmberObject from '@ember/object';\n\nlet Person = EmberObject.extend({\n  isEqual(other) { return this.ssn == other.ssn; }\n});\n\nlet personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});\nlet personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});\n\nisEqual(personA, personB); // true\n```\n\nDue to the expense of array comparisons, collections will never be equal to\neach other even if each of their items are equal to each other.\n\n```javascript\nimport { isEqual } from '@ember/utils';\n\nisEqual([4, 2], [4, 2]);                     // false\n```",
      "itemtype": "method",
      "name": "isEqual",
      "static": 1,
      "params": [
        {
          "name": "a",
          "description": "first object to compare",
          "type": "Object"
        },
        {
          "name": "b",
          "description": "second object to compare",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/runtime/lib/type-of.js",
      "line": 24,
      "description": "Returns a consistent type for the passed object.\n\nUse this instead of the built-in `typeof` to get the type of an item.\nIt will return the same result across all browsers and includes a bit\nmore detail. Here is what will be returned:\n\n    | Return Value  | Meaning                                              |\n    |---------------|------------------------------------------------------|\n    | 'string'      | String primitive or String object.                   |\n    | 'number'      | Number primitive or Number object.                   |\n    | 'boolean'     | Boolean primitive or Boolean object.                 |\n    | 'null'        | Null value                                           |\n    | 'undefined'   | Undefined value                                      |\n    | 'function'    | A function                                           |\n    | 'array'       | An instance of Array                                 |\n    | 'regexp'      | An instance of RegExp                                |\n    | 'date'        | An instance of Date                                  |\n    | 'filelist'    | An instance of FileList                              |\n    | 'class'       | An Ember class (created using EmberObject.extend())  |\n    | 'instance'    | An Ember object instance                             |\n    | 'error'       | An instance of the Error object                      |\n    | 'object'      | A JavaScript object not inheriting from EmberObject  |\n\nExamples:\n\n```javascript\nimport { A } from '@ember/array';\nimport { typeOf } from '@ember/utils';\nimport EmberObject from '@ember/object';\n\ntypeOf();                       // 'undefined'\ntypeOf(null);                   // 'null'\ntypeOf(undefined);              // 'undefined'\ntypeOf('michael');              // 'string'\ntypeOf(new String('michael'));  // 'string'\ntypeOf(101);                    // 'number'\ntypeOf(new Number(101));        // 'number'\ntypeOf(true);                   // 'boolean'\ntypeOf(new Boolean(true));      // 'boolean'\ntypeOf(A);                      // 'function'\ntypeOf(A());                    // 'array'\ntypeOf([1, 2, 90]);             // 'array'\ntypeOf(/abc/);                  // 'regexp'\ntypeOf(new Date());             // 'date'\ntypeOf(event.target.files);     // 'filelist'\ntypeOf(EmberObject.extend());   // 'class'\ntypeOf(EmberObject.create());   // 'instance'\ntypeOf(new Error('teamocil'));  // 'error'\n\n// 'normal' JavaScript object\ntypeOf({ a: 'b' });             // 'object'\n```",
      "itemtype": "method",
      "name": "typeOf",
      "params": [
        {
          "name": "item",
          "description": "the item to check",
          "type": "Object"
        }
      ],
      "return": {
        "description": "the type",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "static": 1,
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/guid.ts",
      "line": 8,
      "description": "Previously we used `Ember.$.uuid`, however `$.uuid` has been removed from\njQuery master. We'll just bootstrap our own uuid now.",
      "access": "private",
      "tagname": "",
      "return": {
        "description": "the uuid",
        "type": "Number"
      },
      "class": "Ember",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/guid.ts",
      "line": 17,
      "description": "Generates a universally unique identifier. This method\nis used internally by Ember for assisting with\nthe generation of GUID's and other unique identifiers.",
      "access": "public",
      "tagname": "",
      "return": {
        "description": "[description]",
        "type": "Number"
      },
      "class": "Ember",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/guid.ts",
      "line": 29,
      "description": "Prefix used for guids through out Ember.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "GUID_PREFIX",
      "type": "String",
      "final": 1,
      "class": "Ember",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/guid.ts",
      "line": 42,
      "description": "A unique key used to assign guids and other private metadata to objects.\nIf you inspect an object in your browser debugger you will often see these.\nThey can be safely ignored.\n\nOn browsers that support it, these properties are added with enumeration\ndisabled so they won't show up when you iterate over your properties.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "GUID_KEY",
      "type": "String",
      "final": 1,
      "class": "Ember",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/guid.ts",
      "line": 58,
      "description": "Generates a new guid, optionally saving the guid to the object that you\npass in. You will rarely need to use this method. Instead you should\ncall `guidFor(obj)`, which return an existing guid if available.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "generateGuid",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "Object the guid will be used for. If passed in, the guid will\n  be saved on the object and reused whenever you pass the same object\n  again.\n\n  If no object is passed, just generate a new guid.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "prefix",
          "description": "Prefix to place in front of the guid. Useful when you want to\n  separate the guid into separate namespaces.",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "the guid",
        "type": "String"
      },
      "class": "@ember/object/internals",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/guid.ts",
      "line": 86,
      "description": "Returns a unique id for the object. If the object does not yet have a guid,\none will be assigned to it. You can call this on any object,\n`EmberObject`-based or not.\n\nYou can also use this method on DOM Element objects.",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "guidFor",
      "params": [
        {
          "name": "obj",
          "description": "any object, string, number, Element, or primitive",
          "type": "Object"
        }
      ],
      "return": {
        "description": "the unique guid for this instance.",
        "type": "String"
      },
      "class": "@ember/object/internals",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/inspect.ts",
      "line": 14,
      "description": "Convenience method to inspect an object. This method will attempt to\nconvert the object into a useful string description.\n\nIt is a pretty simple implementation. If you want something more robust,\nuse something like JSDump: https://github.com/NV/jsDump",
      "itemtype": "method",
      "name": "inspect",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object you want to inspect.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "A description of the object",
        "type": "String"
      },
      "since": "1.4.0",
      "access": "private",
      "tagname": "",
      "class": "Ember",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/intern.ts",
      "line": 1,
      "description": "Strongly hint runtimes to intern the provided string.\n\nWhen do I need to use this function?\n\nFor the most part, never. Pre-mature optimization is bad, and often the\nruntime does exactly what you need it to, and more often the trade-off isn't\nworth it.\n\nWhy?\n\nRuntimes store strings in at least 2 different representations:\nRopes and Symbols (interned strings). The Rope provides a memory efficient\ndata-structure for strings created from concatenation or some other string\nmanipulation like splitting.\n\nUnfortunately checking equality of different ropes can be quite costly as\nruntimes must resort to clever string comparison algorithms. These\nalgorithms typically cost in proportion to the length of the string.\nLuckily, this is where the Symbols (interned strings) shine. As Symbols are\nunique by their string content, equality checks can be done by pointer\ncomparison.\n\nHow do I know if my string is a rope or symbol?\n\nTypically (warning general sweeping statement, but truthy in runtimes at\npresent) static strings created as part of the JS source are interned.\nStrings often used for comparisons can be interned at runtime if some\ncriteria are met.  One of these criteria can be the size of the entire rope.\nFor example, in chrome 38 a rope longer then 12 characters will not\nintern, nor will segments of that rope.\n\nSome numbers: http://jsperf.com/eval-vs-keys/8\n\nKnown Trick™",
      "access": "private",
      "tagname": "",
      "return": {
        "description": "interned version of the provided string",
        "type": "String"
      },
      "class": "Ember",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/invoke.ts",
      "line": 1,
      "description": "Checks to see if the `methodName` exists on the `obj`.\n\n```javascript\nlet foo = { bar: function() { return 'bar'; }, baz: null };\n\nEmber.canInvoke(foo, 'bar'); // true\nEmber.canInvoke(foo, 'baz'); // false\nEmber.canInvoke(foo, 'bat'); // false\n```",
      "itemtype": "method",
      "name": "canInvoke",
      "params": [
        {
          "name": "obj",
          "description": "The object to check for the method",
          "type": "Object"
        },
        {
          "name": "methodName",
          "description": "The method name to check for",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "access": "private",
      "tagname": "",
      "class": "Ember",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/invoke.ts",
      "line": 27,
      "description": "Checks to see if the `methodName` exists on the `obj`,\nand if it does, invokes it with the arguments passed.\n\n```javascript\nimport { tryInvoke } from '@ember/utils';\n\nlet d = new Date('03/15/2013');\n\ntryInvoke(d, 'getTime');              // 1363320000000\ntryInvoke(d, 'setFullYear', [2014]);  // 1394856000000\ntryInvoke(d, 'noSuchMethod', [2014]); // undefined\n```",
      "itemtype": "method",
      "name": "tryInvoke",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "The object to check for the method",
          "type": "Object"
        },
        {
          "name": "methodName",
          "description": "The method name to check for",
          "type": "String"
        },
        {
          "name": "args",
          "description": "The arguments to pass to the method",
          "type": "Array",
          "optional": true
        }
      ],
      "return": {
        "description": "the return value of the invoked method or undefined if it cannot be invoked",
        "type": "*"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/utils",
      "module": "@ember/utils"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/make-array.ts",
      "line": 5,
      "description": "Forces the passed object to be part of an array. If the object is already\nan array, it will return the object. Otherwise, it will add the object to\nan array. If object is `null` or `undefined`, it will return an empty array.\n\n```javascript\nimport { makeArray } from '@ember/array';\nimport ArrayProxy from '@ember/array/proxy';\n\nmakeArray();            // []\nmakeArray(null);        // []\nmakeArray(undefined);   // []\nmakeArray('lindsay');   // ['lindsay']\nmakeArray([1, 2, 42]);  // [1, 2, 42]\n\nlet proxy = ArrayProxy.create({ content: [] });\n\nmakeArray(proxy) === proxy;  // false\n```",
      "itemtype": "method",
      "name": "makeArray",
      "static": 1,
      "params": [
        {
          "name": "obj",
          "description": "the object",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Array"
      },
      "access": "private",
      "tagname": "",
      "class": "@ember/array",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/spec.ts",
      "line": 1,
      "description": "Returns whether Type(value) is Object.\n\nUseful for checking whether a value is a valid WeakMap key.\n\nRefs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation\n      https://tc39.github.io/ecma262/#sec-weakmap.prototype.set",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "isObject",
      "class": "Ember",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/utils/lib/super.ts",
      "line": 73,
      "description": "Wraps the passed function so that `this._super` will point to the superFunc\nwhen the function is invoked. This is the primitive we use to implement\ncalls to super.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "wrap",
      "params": [
        {
          "name": "func",
          "description": "The function to call",
          "type": "Function"
        },
        {
          "name": "superFunc",
          "description": "The super function.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "wrapped function.",
        "type": "Function"
      },
      "class": "Ember",
      "module": "@ember/array"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/action_support.js",
      "line": 40,
      "description": "Calls an action passed to a component.\n\nFor example a component for playing or pausing music may translate click events\ninto action notifications of \"play\" or \"stop\" depending on some internal state\nof the component:\n\n```app/components/play-button.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click() {\n    if (this.get('isPlaying')) {\n      this.sendAction('play');\n    } else {\n      this.sendAction('stop');\n    }\n  }\n});\n```\n\nThe actions \"play\" and \"stop\" must be passed to this `play-button` component:\n\n```handlebars\n{{! app/templates/application.hbs }}\n{{play-button play=(action \"musicStarted\") stop=(action \"musicStopped\")}}\n```\n\nWhen the component receives a browser `click` event it translate this\ninteraction into application-specific semantics (\"play\" or \"stop\") and\ncalls the specified action.\n\n```app/controller/application.js\nimport Controller from '@ember/controller';\n\nexport default Controller.extend({\n  actions: {\n    musicStarted() {\n      // called when the play button is clicked\n      // and the music started playing\n    },\n    musicStopped() {\n      // called when the play button is clicked\n      // and the music stopped playing\n    }\n  }\n});\n```\n\nIf no action is passed to `sendAction` a default name of \"action\"\nis assumed.\n\n```app/components/next-button.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n  click() {\n    this.sendAction();\n  }\n});\n```\n\n```handlebars\n{{! app/templates/application.hbs }}\n{{next-button action=(action \"playNextSongInAlbum\")}}\n```\n\n```app/controllers/application.js\nimport Controller from '@ember/controller';\n\nexport default Controller.extend({\n  actions: {\n    playNextSongInAlbum() {\n      ...\n    }\n  }\n});\n```",
      "itemtype": "method",
      "name": "sendAction",
      "params": [
        {
          "name": "action",
          "description": "the action to call",
          "type": "String",
          "optional": true
        },
        {
          "name": "params",
          "description": "arguments for the action",
          "type": "*",
          "optional": true
        }
      ],
      "access": "public",
      "tagname": "",
      "deprecated": true,
      "class": "Ember.ActionSupport",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/child_views_support.js",
      "line": 8,
      "description": "Array of child views. You should never edit this array directly.",
      "itemtype": "property",
      "name": "childViews",
      "type": "Array",
      "default": "[]",
      "access": "private",
      "tagname": "",
      "class": "Ember.ClassNamesSupport",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/class_names_support.js",
      "line": 31,
      "description": "Standard CSS class names to apply to the view's outer element. This\nproperty automatically inherits any class names defined by the view's\nsuperclasses as well.",
      "itemtype": "property",
      "name": "classNames",
      "type": "Array",
      "default": "['ember-view']",
      "access": "public",
      "tagname": "",
      "class": "Ember.ClassNamesSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/class_names_support.js",
      "line": 43,
      "description": "A list of properties of the view to apply as class names. If the property\nis a string value, the value of that string will be applied as a class\nname.\n\n```javascript\n// Applies the 'high' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['priority'],\n  priority: 'high'\n});\n```\n\nIf the value of the property is a Boolean, the name of that property is\nadded as a dasherized class name.\n\n```javascript\n// Applies the 'is-urgent' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['isUrgent'],\n  isUrgent: true\n});\n```\n\nIf you would prefer to use a custom value instead of the dasherized\nproperty name, you can pass a binding like this:\n\n```javascript\n// Applies the 'urgent' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['isUrgent:urgent'],\n  isUrgent: true\n});\n```\n\nIf you would like to specify a class that should only be added when the\nproperty is false, you can declare a binding like this:\n\n```javascript\n// Applies the 'disabled' class to the view element\nimport Component from '@ember/component';\nComponent.extend({\n  classNameBindings: ['isEnabled::disabled'],\n  isEnabled: false\n});\n```\n\nThis list of properties is inherited from the component's superclasses as well.",
      "itemtype": "property",
      "name": "classNameBindings",
      "type": "Array",
      "default": "[]",
      "access": "public",
      "tagname": "",
      "class": "Ember.ClassNamesSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 146,
      "description": "Whether the `keyUp` event that triggers an `action` to be sent continues\npropagating to other views.\n\nBy default, when the user presses the return key on their keyboard and\nthe text field has an `action` set, the action will be sent to the view's\ncontroller and the key event will stop propagating.\n\nIf you would like parent views to receive the `keyUp` event even after an\naction has been dispatched, set `bubbles` to true.",
      "itemtype": "property",
      "name": "bubbles",
      "type": "Boolean",
      "default": "false",
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 182,
      "description": "Allows you to specify a controller action to invoke when either the `enter`\nkey is pressed or, in the case of the field being a textarea, when a newline\nis inserted. To use this method, give your field an `insert-newline`\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.\n\nFor an example on how to use the `insert-newline` attribute, please\nreference the example near the top of this file.",
      "itemtype": "method",
      "name": "insertNewline",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 201,
      "description": "Allows you to specify a controller action to invoke when the escape button\nis pressed. To use this method, give your field an `escape-press`\nattribute. The value of that attribute should be the name of the action\nin your controller that you wish to invoke.\n\nFor an example on how to use the `escape-press` attribute, please reference\nthe example near the top of this file.",
      "itemtype": "method",
      "name": "cancel",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 218,
      "description": "Allows you to specify a controller action to invoke when a field receives\nfocus. To use this method, give your field a `focus-in` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `focus-in` attribute, please reference the\nexample near the top of this file.",
      "itemtype": "method",
      "name": "focusIn",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 235,
      "description": "Allows you to specify a controller action to invoke when a field loses\nfocus. To use this method, give your field a `focus-out` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `focus-out` attribute, please reference the\nexample near the top of this file.",
      "itemtype": "method",
      "name": "focusOut",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 253,
      "description": "Allows you to specify a controller action to invoke when a key is pressed.\nTo use this method, give your field a `key-press` attribute. The value of\nthat attribute should be the name of the action in your controller you\nthat wish to invoke.\n\nFor an example on how to use the `key-press` attribute, please reference the\nexample near the top of this file.",
      "itemtype": "method",
      "name": "keyPress",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 270,
      "description": "Allows you to specify a controller action to invoke when a key-up event is\nfired. To use this method, give your field a `key-up` attribute. The value\nof that attribute should be the name of the action in your controller\nthat you wish to invoke.\n\nFor an example on how to use the `key-up` attribute, please reference the\nexample near the top of this file.",
      "itemtype": "method",
      "name": "keyUp",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/text_support.js",
      "line": 288,
      "description": "Allows you to specify a controller action to invoke when a key-down event is\nfired. To use this method, give your field a `key-down` attribute. The value\nof that attribute should be the name of the action in your controller that\nyou wish to invoke.\n\nFor an example on how to use the `key-down` attribute, please reference the\nexample near the top of this file.",
      "itemtype": "method",
      "name": "keyDown",
      "params": [
        {
          "name": "event",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.TextSupport",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 15,
      "description": "A list of properties of the view to apply as attributes. If the property\nis a string value, the value of that string will be applied as the value\nfor an attribute of the property's name.\n\nThe following example creates a tag like `<div priority=\"high\" />`.\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n   attributeBindings: ['priority'],\n   priority: 'high'\n });\n```\n\nIf the value of the property is a Boolean, the attribute is treated as\nan HTML Boolean attribute. It will be present if the property is `true`\nand omitted if the property is `false`.\n\nThe following example creates markup like `<div visible />`.\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n   attributeBindings: ['visible'],\n   visible: true\n });\n```\n\nIf you would prefer to use a custom value instead of the property name,\nyou can create the same markup as the last example with a binding like\nthis:\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n   attributeBindings: ['isVisible:visible'],\n   isVisible: true\n });\n```\n\nThis list of attributes is inherited from the component's superclasses,\nas well.",
      "itemtype": "property",
      "name": "attributeBindings",
      "type": "Array",
      "default": "[]",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 73,
      "description": "Return the nearest ancestor that is an instance of the provided\nclass or mixin.",
      "itemtype": "method",
      "name": "nearestOfType",
      "params": [
        {
          "name": "klass",
          "description": "Subclass of Ember.View (or Ember.View itself),\nor an instance of Mixin.",
          "type": "Class,Mixin"
        }
      ],
      "return": {
        "description": "Ember.View"
      },
      "deprecated": true,
      "deprecationMessage": "use `yield` and contextual components for composition instead.",
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 97,
      "description": "Return the nearest ancestor that has a given property.",
      "itemtype": "method",
      "name": "nearestWithProperty",
      "params": [
        {
          "name": "property",
          "description": "A property name",
          "type": "String"
        }
      ],
      "return": {
        "description": "Ember.View"
      },
      "deprecated": true,
      "deprecationMessage": "use `yield` and contextual components for composition instead.",
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 117,
      "description": "Renders the view again. This will work regardless of whether the\nview is already in the DOM or not. If the view is in the DOM, the\nrendering process will be deferred to give bindings a chance\nto synchronize.\n\nIf children were added during the rendering process using `appendChild`,\n`rerender` will remove them, because they will be added again\nif needed by the next `render`.\n\nIn general, if the display of your view changes, you should modify\nthe DOM element directly instead of manually calling `rerender`, which can\nbe slow.",
      "itemtype": "method",
      "name": "rerender",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 142,
      "description": "Returns the current DOM element for the view.",
      "itemtype": "property",
      "name": "element",
      "type": "DOMElement",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 157,
      "description": "Appends the view's element to the specified parent element.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the given element until all bindings have\nfinished synchronizing.\n\nThis is not typically a function that you will need to call directly when\nbuilding your application. If you do need to use `appendTo`, be sure that\nthe target element you are providing is associated with an `Application`\nand does not have an ancestor element that is associated with an Ember view.",
      "itemtype": "method",
      "name": "appendTo",
      "params": [
        {
          "name": "A",
          "description": "selector, element, HTML string, or jQuery object",
          "type": "String|DOMElement|jQuery"
        }
      ],
      "return": {
        "description": "receiver",
        "type": "Ember.View"
      },
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 215,
      "description": "Appends the view's element to the document body. If the view does\nnot have an HTML representation yet\nthe element will be generated automatically.\n\nIf your application uses the `rootElement` property, you must append\nthe view within that element. Rendering views outside of the `rootElement`\nis not supported.\n\nNote that this method just schedules the view to be appended; the DOM\nelement will not be appended to the document body until all bindings have\nfinished synchronizing.",
      "itemtype": "method",
      "name": "append",
      "return": {
        "description": "receiver",
        "type": "Ember.View"
      },
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 236,
      "description": "The HTML `id` of the view's element in the DOM. You can provide this\nvalue yourself but it must be unique (just as in HTML):\n\n```handlebars\n{{my-component elementId=\"a-really-cool-id\"}}\n```\n\nIf not manually set a default value will be provided by the framework.\n\nOnce rendered an element's `elementId` is considered immutable and you\nshould never change it. If you need to compute a dynamic value for the\n`elementId`, you should do this when the component or element is being\ninstantiated:\n\n```app/components/my-component.js\nimport Component from '@ember/component';\n\nexport default Component.extend({\n   init() {\n     this._super(...arguments);\n     let index = this.get('index');\n     this.set('elementId', 'component-id' + index);\n   }\n });\n```",
      "itemtype": "property",
      "name": "elementId",
      "type": "String",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 269,
      "description": "Called when a view is going to insert an element into the DOM.",
      "itemtype": "event",
      "name": "willInsertElement",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 277,
      "description": "Called when the element of the view has been inserted into the DOM.\nOverride this function to do any set up that requires an element\nin the document body.\n\nWhen a view has children, didInsertElement will be called on the\nchild view(s) first and on itself afterwards.",
      "itemtype": "event",
      "name": "didInsertElement",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 290,
      "description": "Called when the view is about to rerender, but before anything has\nbeen torn down. This is a good opportunity to tear down any manual\nobservers you have installed based on the DOM state",
      "itemtype": "event",
      "name": "willClearRender",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 300,
      "description": "You must call `destroy` on a view to destroy the view (and all of its\nchild views). This will remove the view from any parent node, then make\nsure that the DOM element managed by the view can be released by the\nmemory manager.",
      "itemtype": "method",
      "name": "destroy",
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 314,
      "description": "Called when the element of the view is going to be destroyed. Override\nthis function to do any teardown that requires an element, like removing\nevent listeners.\n\nPlease note: any property changes made during this event will have no\neffect on object observers.",
      "itemtype": "event",
      "name": "willDestroyElement",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 327,
      "description": "Called after the element of the view is destroyed.",
      "itemtype": "event",
      "name": "willDestroyElement",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 335,
      "description": "Called when the parentView property has changed.",
      "itemtype": "event",
      "name": "parentViewDidChange",
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 347,
      "description": "Tag name for the view's outer element. The tag name is only used when an\nelement is first created. If you change the `tagName` for an element, you\nmust destroy and recreate the view element.\n\nBy default, the render buffer will use a `<div>` tag for views.\n\nIf the tagName is `''`, the view will be tagless, with no outer element.\nComponent properties that depend on the presence of an outer element, such\nas `classNameBindings` and `attributeBindings`, do not work with tagless\ncomponents. Tagless components cannot implement methods to handle events,\nand have no associated jQuery object to return with `$()`.",
      "itemtype": "property",
      "name": "tagName",
      "type": "String",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 374,
      "description": "Setup a view, but do not finish waking it up.\n\n* configure `childViews`\n* register the view with the global views hash, which is used for event\ndispatch",
      "itemtype": "method",
      "name": "init",
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 410,
      "description": "Handle events from `EventDispatcher`",
      "itemtype": "method",
      "name": "handleEvent",
      "params": [
        {
          "name": "eventName",
          "description": "",
          "type": "String"
        },
        {
          "name": "evt",
          "description": "",
          "type": "Event"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/mixins/view_support.js",
      "line": 424,
      "description": "Returns a jQuery object for this view's element. If you pass in a selector\nstring, this method will return a jQuery object, using the current element\nas its buffer.\n\nFor example, calling `view.$('li')` will return a jQuery object containing\nall of the `li` elements inside the DOM element of this view.",
      "itemtype": "method",
      "name": "$",
      "params": [
        {
          "name": "selector",
          "description": "a jQuery-compatible selector string",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "the jQuery object for the DOM node",
        "type": "JQuery"
      },
      "access": "public",
      "tagname": "",
      "deprecated": true,
      "class": "Ember.ViewMixin",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/action_manager.js",
      "line": 7,
      "description": "Global action id hash.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "registeredActions",
      "type": "Object",
      "class": "Ember.EventDispatcher",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/event_dispatcher.js",
      "line": 37,
      "description": "The set of events names (and associated handler function names) to be setup\nand dispatched by the `EventDispatcher`. Modifications to this list can be done\nat setup time, generally via the `Application.customEvents` hash.\n\nTo add new events to be listened to:\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create({\n  customEvents: {\n    paste: 'paste'\n  }\n});\n```\n\nTo prevent default events from being listened to:\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create({\n  customEvents: {\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n```",
      "itemtype": "property",
      "name": "events",
      "type": "Object",
      "access": "private",
      "tagname": "",
      "class": "Ember.EventDispatcher",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/event_dispatcher.js",
      "line": 106,
      "description": "The root DOM element to which event listeners should be attached. Event\nlisteners will be attached to the document unless this is overridden.\n\nCan be specified as a DOMElement or a selector string.\n\nThe default body is a string since this may be evaluated before document.body\nexists in the DOM.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "rootElement",
      "type": "DOMElement",
      "default": "'body'",
      "class": "Ember.EventDispatcher",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/event_dispatcher.js",
      "line": 138,
      "description": "Sets up event listeners for standard browser events.\n\nThis will be called after the browser sends a `DOMContentReady` event. By\ndefault, it will set up all of the listeners on the document body. If you\nwould like to register the listeners on a different element, set the event\ndispatcher's `root` property.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setup",
      "params": [
        {
          "name": "addedEvents",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "Ember.EventDispatcher",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/event_dispatcher.js",
      "line": 232,
      "description": "Registers an event listener on the rootElement. If the given event is\ntriggered, the provided event handler will be triggered on the target view.\n\nIf the target view does not implement the event handler, or if the handler\nreturns `false`, the parent view will be called. The event will continue to\nbubble to each successive parent view until it reaches the top.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setupHandler",
      "params": [
        {
          "name": "rootElement",
          "description": "",
          "type": "Element"
        },
        {
          "name": "event",
          "description": "the browser-originated event to listen to",
          "type": "String"
        },
        {
          "name": "eventName",
          "description": "the name of the method to call on the view",
          "type": "String"
        }
      ],
      "class": "Ember.EventDispatcher",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 41,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getRootViews",
      "params": [
        {
          "name": "owner",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 62,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getViewId",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 82,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getViewElement",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 114,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getChildViews",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 156,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getViewBounds",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 165,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getViewRange",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 180,
      "description": "`getViewClientRects` provides information about the position of the border\nbox edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getViewClientRects",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 196,
      "description": "`getViewBoundingClientRect` provides information about the position of the\nbounding border box edges of a view relative to the viewport.\n\nIt is only intended to be used by development tools like the Ember Inspector\nand may not work on older browsers.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "getViewBoundingClientRect",
      "params": [
        {
          "name": "view",
          "description": "",
          "type": "Ember.View"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/system/utils.ts",
      "line": 212,
      "description": "Determines if the element matches the specified selector.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "matches",
      "params": [
        {
          "name": "el",
          "description": "",
          "type": "DOMElement"
        },
        {
          "name": "selector",
          "description": "",
          "type": "String"
        }
      ],
      "class": "Ember.CoreView",
      "module": "ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/views/core_view.js",
      "line": 37,
      "description": "If the view is currently inserted into the DOM of a parent view, this\nproperty will point to the parent of the view.",
      "itemtype": "property",
      "name": "parentView",
      "type": "Ember.View",
      "default": "null",
      "access": "private",
      "tagname": "",
      "class": "Ember.CoreView",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/-internals/views/lib/views/core_view.js",
      "line": 55,
      "description": "Override the default event firing from `Evented` to\nalso call methods with the given name.",
      "itemtype": "method",
      "name": "trigger",
      "params": [
        {
          "name": "name",
          "description": "",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "Ember.CoreView",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 192,
      "description": "The root DOM element of the Application. This can be specified as an\nelement or a\n[jQuery-compatible selector string](http://api.jquery.com/category/selectors/).\n\nThis is the element that will be passed to the Application's,\n`eventDispatcher`, which sets up the listeners for event delegation. Every\nview in your application should be a child of the element you specify here.",
      "itemtype": "property",
      "name": "rootElement",
      "type": "DOMElement",
      "default": "'body'",
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 208,
      "description": "The `Ember.EventDispatcher` responsible for delegating events to this\napplication's views.\n\nThe event dispatcher is created by the application at initialization time\nand sets up event listeners on the DOM element described by the\napplication's `rootElement` property.\n\nSee the documentation for `Ember.EventDispatcher` for more information.",
      "itemtype": "property",
      "name": "eventDispatcher",
      "type": "Ember.EventDispatcher",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 225,
      "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.\n\nIf you would like additional bubbling events to be delegated to your\nviews, set your `Application`'s `customEvents` property\nto a hash containing the DOM event name as the key and the\ncorresponding view method name as the value. Setting an event to\na value of `null` will prevent a default event listener from being\nadded for that event.\n\nTo add new events to be listened to:\n\n```app/app.js\nimport Application from '@ember/application';\n\nlet App = Application.extend({\n  customEvents: {\n    // add support for the paste event\n    paste: 'paste'\n  }\n});\n```\n\nTo prevent default events from being listened to:\n\n```app/app.js\nimport Application from '@ember/application';\n\nlet App = Application.extend({\n  customEvents: {\n    // remove support for mouseenter / mouseleave events\n    mouseenter: null,\n    mouseleave: null\n  }\n});\n```",
      "itemtype": "property",
      "name": "customEvents",
      "type": "Object",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 273,
      "description": "Whether the application should automatically start routing and render\ntemplates to the `rootElement` on DOM ready. While default by true,\nother environments such as FastBoot or a testing harness can set this\nproperty to `false` and control the precise timing and behavior of the boot\nprocess.",
      "itemtype": "property",
      "name": "autoboot",
      "type": "Boolean",
      "default": "true",
      "access": "private",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 287,
      "description": "Whether the application should be configured for the legacy \"globals mode\".\nUnder this mode, the Application object serves as a global namespace for all\nclasses.\n\n```javascript\nimport Application from '@ember/application';\nimport Component from '@ember/component';\n\nlet App = Application.create({\n  ...\n});\n\nApp.Router.reopen({\n  location: 'none'\n});\n\nApp.Router.map({\n  ...\n});\n\nApp.MyComponent = Component.extend({\n  ...\n});\n```\n\nThis flag also exposes other internal APIs that assumes the existence of\na special \"default instance\", like `App.__container__.lookup(...)`.\n\nThis option is currently not configurable, its value is derived from\nthe `autoboot` flag – disabling `autoboot` also implies opting-out of\nglobals mode support, although they are ultimately orthogonal concerns.\n\nSome of the global modes features are already deprecated in 1.x. The\nexistence of this flag is to untangle the globals mode code paths from\nthe autoboot code paths, so that these legacy features can be reviewed\nfor deprecation/removal separately.\n\nForcing the (autoboot=true, _globalsMode=false) here and running the tests\nwould reveal all the places where we are still relying on these legacy\nbehavior internally (mostly just tests).",
      "itemtype": "property",
      "name": "_globalsMode",
      "type": "Boolean",
      "default": "true",
      "access": "private",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 336,
      "description": "An array of application instances created by `buildInstance()`. Used\ninternally to ensure that all instances get destroyed.",
      "itemtype": "property",
      "name": "_applicationInstances",
      "type": "Array",
      "default": "null",
      "access": "private",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 382,
      "description": "Create an ApplicationInstance for this application.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "buildInstance",
      "return": {
        "description": "the application instance",
        "type": "ApplicationInstance"
      },
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 405,
      "description": "Start tracking an ApplicationInstance for this application.\nUsed when the ApplicationInstance is created.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_watchInstance",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 416,
      "description": "Stop tracking an ApplicationInstance for this application.\nUsed when the ApplicationInstance is about to be destroyed.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_unwatchInstance",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 427,
      "description": "Enable the legacy globals mode by allowing this application to act\nas a global namespace. See the docs on the `_globalsMode` property\nfor details.\n\nMost of these features are already deprecated in 1.x, so we can\nstop using them internally and try to remove them.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "_prepareForGlobalsMode",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 471,
      "description": "Automatically kick-off the boot process for the application once the\nDOM has become ready.\n\nThe initialization itself is scheduled on the actions queue which\nensures that code-loading finishes before booting.\n\nIf you are asynchronously loading code, you should call `deferReadiness()`\nto defer booting, and then call `advanceReadiness()` once all of your code\nhas finished loading.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "waitForDOMReady",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 493,
      "description": "This is the autoboot flow:\n\n1. Boot the app by calling `this.boot()`\n2. Create an instance (or use the `__deprecatedInstance__` in globals mode)\n3. Boot the instance by calling `instance.boot()`\n4. Invoke the `App.ready()` callback\n5. Kick-off routing on the instance\n\nIdeally, this is all we would need to do:\n\n```javascript\n_autoBoot() {\n  this.boot().then(() => {\n    let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();\n    return instance.boot();\n  }).then((instance) => {\n    App.ready();\n    instance.startRouting();\n  });\n}\n```\n\nUnfortunately, we cannot actually write this because we need to participate\nin the \"synchronous\" boot process. While the code above would work fine on\nthe initial boot (i.e. DOM ready), when `App.reset()` is called, we need to\nboot a new instance synchronously (see the documentation on `_bootSync()`\nfor details).\n\nBecause of this restriction, the actual logic of this method is located\ninside `didBecomeReady()`.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "domReady",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 538,
      "description": "Use this to defer readiness until some condition is true.\n\nExample:\n\n```javascript\nimport Application from '@ember/application';\n\nlet App = Application.create();\n\nApp.deferReadiness();\n\n// $ is a reference to the jQuery object/function\nimport $ from 'jquery;\n\n$.getJSON('/auth-token', function(token) {\n  App.token = token;\n  App.advanceReadiness();\n});\n```\n\nThis allows you to perform asynchronous setup logic and defer\nbooting your application until the setup has finished.\n\nHowever, if the setup requires a loading UI, it might be better\nto use the router for this purpose.",
      "itemtype": "method",
      "name": "deferReadiness",
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 589,
      "description": "Call `advanceReadiness` after any asynchronous setup logic has completed.\nEach call to `deferReadiness` must be matched by a call to `advanceReadiness`\nor the application will never become ready and routing will not begin.",
      "itemtype": "method",
      "name": "advanceReadiness",
      "see": [
        "{Application#deferReadiness}"
      ],
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 626,
      "description": "Initialize the application and return a promise that resolves with the `Application`\nobject when the boot process is complete.\n\nRun any application initializers and run the application load hook. These hooks may\nchoose to defer readiness. For example, an authentication hook might want to defer\nreadiness until the auth token has been retrieved.\n\nBy default, this method is called automatically on \"DOM ready\"; however, if autoboot\nis disabled, this is automatically called when the first application instance is\ncreated via `visit`.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "boot",
      "return": {
        "description": "",
        "type": "Promise<Application,Error>"
      },
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 664,
      "description": "Unfortunately, a lot of existing code assumes the booting process is\n\"synchronous\". Specifically, a lot of tests assumes the last call to\n`app.advanceReadiness()` or `app.reset()` will result in the app being\nfully-booted when the current runloop completes.\n\nWe would like new code (like the `visit` API) to stop making this assumption,\nso we created the asynchronous version above that returns a promise. But until\nwe have migrated all the code, we would have to expose this method for use\n*internally* in places where we need to boot an app \"synchronously\".",
      "access": "private",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 703,
      "description": "Reset the application. This is typically used only in tests. It cleans up\nthe application in the following order:\n\n1. Deactivate existing routes\n2. Destroy all objects in the container\n3. Create a new application container\n4. Re-route to the existing url\n\nTypical Example:\n\n```javascript\nimport Application from '@ember/application';\nlet App;\n\nrun(function() {\n  App = Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    App.reset();\n  }\n});\n\ntest('first test', function() {\n  // App is freshly reset\n});\n\ntest('second test', function() {\n  // App is again freshly reset\n});\n```\n\nAdvanced Example:\n\nOccasionally you may want to prevent the app from initializing during\nsetup. This could enable extra configuration, or enable asserting prior\nto the app becoming ready.\n\n```javascript\nimport Application from '@ember/application';\nlet App;\n\nrun(function() {\n  App = Application.create();\n});\n\nmodule('acceptance test', {\n  setup: function() {\n    run(function() {\n      App.reset();\n      App.deferReadiness();\n    });\n  }\n});\n\ntest('first test', function() {\n  ok(true, 'something before app is initialized');\n\n  run(function() {\n    App.advanceReadiness();\n  });\n\n  ok(true, 'something after app is initialized');\n});\n```",
      "itemtype": "method",
      "name": "reset",
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 806,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "didBecomeReady",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 861,
      "description": "Called when the Application has become ready, immediately before routing\nbegins. The call will be delayed until the DOM has become ready.",
      "itemtype": "event",
      "name": "ready",
      "access": "public",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 888,
      "description": "Boot a new instance of `ApplicationInstance` for the current\napplication and navigate it to the given `url`. Returns a `Promise` that\nresolves with the instance when the initial routing and rendering is\ncomplete, or rejects with any error that occurred during the boot process.\n\nWhen `autoboot` is disabled, calling `visit` would first cause the\napplication to boot, which runs the application initializers.\n\nThis method also takes a hash of boot-time configuration options for\ncustomizing the instance's behavior. See the documentation on\n`ApplicationInstance.BootOptions` for details.\n\n`ApplicationInstance.BootOptions` is an interface class that exists\npurely to document the available options; you do not need to construct it\nmanually. Simply pass a regular JavaScript object containing of the\ndesired options:\n\n```javascript\nMyApp.visit(\"/\", { location: \"none\", rootElement: \"#container\" });\n```\n\n### Supported Scenarios\n\nWhile the `BootOptions` class exposes a large number of knobs, not all\ncombinations of them are valid; certain incompatible combinations might\nresult in unexpected behavior.\n\nFor example, booting the instance in the full browser environment\nwhile specifying a foreign `document` object (e.g. `{ isBrowser: true,\ndocument: iframe.contentDocument }`) does not work correctly today,\nlargely due to Ember's jQuery dependency.\n\nCurrently, there are three officially supported scenarios/configurations.\nUsages outside of these scenarios are not guaranteed to work, but please\nfeel free to file bug reports documenting your experience and any issues\nyou encountered to help expand support.\n\n#### Browser Applications (Manual Boot)\n\nThe setup is largely similar to how Ember works out-of-the-box. Normally,\nEmber will boot a default instance for your Application on \"DOM ready\".\nHowever, you can customize this behavior by disabling `autoboot`.\n\nFor example, this allows you to render a miniture demo of your application\ninto a specific area on your marketing website:\n\n```javascript\nimport MyApp from 'my-app';\n\n$(function() {\n  let App = MyApp.create({ autoboot: false });\n\n  let options = {\n    // Override the router's location adapter to prevent it from updating\n    // the URL in the address bar\n    location: 'none',\n\n    // Override the default `rootElement` on the app to render into a\n    // specific `div` on the page\n    rootElement: '#demo'\n  };\n\n  // Start the app at the special demo URL\n  App.visit('/demo', options);\n});\n```\n\nOr perhaps you might want to boot two instances of your app on the same\npage for a split-screen multiplayer experience:\n\n```javascript\nimport MyApp from 'my-app';\n\n$(function() {\n  let App = MyApp.create({ autoboot: false });\n\n  let sessionId = MyApp.generateSessionID();\n\n  let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });\n  let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });\n\n  Promise.all([player1, player2]).then(() => {\n    // Both apps have completed the initial render\n    $('#loading').fadeOut();\n  });\n});\n```\n\nDo note that each app instance maintains their own registry/container, so\nthey will run in complete isolation by default.\n\n#### Server-Side Rendering (also known as FastBoot)\n\nThis setup allows you to run your Ember app in a server environment using\nNode.js and render its content into static HTML for SEO purposes.\n\n```javascript\nconst HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);\n\nfunction renderURL(url) {\n  let dom = new SimpleDOM.Document();\n  let rootElement = dom.body;\n  let options = { isBrowser: false, document: dom, rootElement: rootElement };\n\n  return MyApp.visit(options).then(instance => {\n    try {\n      return HTMLSerializer.serialize(rootElement.firstChild);\n    } finally {\n      instance.destroy();\n    }\n  });\n}\n```\n\nIn this scenario, because Ember does not have access to a global `document`\nobject in the Node.js environment, you must provide one explicitly. In practice,\nin the non-browser environment, the stand-in `document` object only needs to\nimplement a limited subset of the full DOM API. The `SimpleDOM` library is known\nto work.\n\nSince there is no access to jQuery in the non-browser environment, you must also\nspecify a DOM `Element` object in the same `document` for the `rootElement` option\n(as opposed to a selector string like `\"body\"`).\n\nSee the documentation on the `isBrowser`, `document` and `rootElement` properties\non `ApplicationInstance.BootOptions` for details.\n\n#### Server-Side Resource Discovery\n\nThis setup allows you to run the routing layer of your Ember app in a server\nenvironment using Node.js and completely disable rendering. This allows you\nto simulate and discover the resources (i.e. AJAX requests) needed to fulfill\na given request and eagerly \"push\" these resources to the client.\n\n```app/initializers/network-service.js\nimport BrowserNetworkService from 'app/services/network/browser';\nimport NodeNetworkService from 'app/services/network/node';\n\n// Inject a (hypothetical) service for abstracting all AJAX calls and use\n// the appropriate implementation on the client/server. This also allows the\n// server to log all the AJAX calls made during a particular request and use\n// that for resource-discovery purpose.\n\nexport function initialize(application) {\n  if (window) { // browser\n    application.register('service:network', BrowserNetworkService);\n  } else { // node\n    application.register('service:network', NodeNetworkService);\n  }\n\n  application.inject('route', 'network', 'service:network');\n};\n\nexport default {\n  name: 'network-service',\n  initialize: initialize\n};\n```\n\n```app/routes/post.js\nimport Route from '@ember/routing/route';\n\n// An example of how the (hypothetical) service is used in routes.\n\nexport default Route.extend({\n  model(params) {\n    return this.network.fetch(`/api/posts/${params.post_id}.json`);\n  },\n\n  afterModel(post) {\n    if (post.isExternalContent) {\n      return this.network.fetch(`/api/external/?url=${post.externalURL}`);\n    } else {\n      return post;\n    }\n  }\n});\n```\n\n```javascript\n// Finally, put all the pieces together\n\nfunction discoverResourcesFor(url) {\n  return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {\n    let networkService = instance.lookup('service:network');\n    return networkService.requests; // => { \"/api/posts/123.json\": \"...\" }\n  });\n}\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "visit",
      "params": [
        {
          "name": "url",
          "description": "The initial URL to navigate to",
          "type": "String"
        },
        {
          "name": "options",
          "description": "",
          "type": "ApplicationInstance.BootOptions"
        }
      ],
      "return": {
        "description": "",
        "type": "Promise<ApplicationInstance, Error>"
      },
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/application.js",
      "line": 1108,
      "description": "This creates a registry with the default Ember naming conventions.\n\nIt also configures the registry:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
      "itemtype": "method",
      "name": "buildRegistry",
      "static": 1,
      "params": [
        {
          "name": "namespace",
          "description": "the application for which to\n  build the registry",
          "type": "Application"
        }
      ],
      "return": {
        "description": "the built registry",
        "type": "Ember.Registry"
      },
      "access": "private",
      "tagname": "",
      "class": "Application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/lazy_load.js",
      "line": 14,
      "description": "Detects when a specific package of Ember (e.g. 'Application')\nhas fully loaded and is available for extension.\n\nThe provided `callback` will be called with the `name` passed\nresolved from a string into the object:\n\n``` javascript\nimport { onLoad } from '@ember/application';\n\nonLoad('Ember.Application' function(hbars) {\n  hbars.registerHelper(...);\n});\n```",
      "itemtype": "method",
      "name": "onLoad",
      "static": 1,
      "params": [
        {
          "name": "name",
          "description": "name of hook",
          "type": "String"
        },
        {
          "name": "callback",
          "description": "callback to be called",
          "type": "Function"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/lib/lazy_load.js",
      "line": 47,
      "description": "Called when an Ember.js package (e.g Application) has finished\nloading. Triggers any callbacks registered for this event.",
      "itemtype": "method",
      "name": "runLoadHooks",
      "static": 1,
      "params": [
        {
          "name": "name",
          "description": "name of hook",
          "type": "String"
        },
        {
          "name": "object",
          "description": "object to pass to callbacks",
          "type": "Object"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/application",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 95,
      "description": "This will be set to the Application instance when it is\ncreated.",
      "itemtype": "property",
      "name": "namespace",
      "access": "public",
      "tagname": "",
      "deprecated": true,
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 137,
      "description": "This method is called via the container's resolver method.\nIt parses the provided `fullName` and then looks up and\nreturns the appropriate template or class.",
      "itemtype": "method",
      "name": "resolve",
      "params": [
        {
          "name": "fullName",
          "description": "the lookup string",
          "type": "String"
        }
      ],
      "return": {
        "description": "the resolved factory",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 188,
      "description": "Convert the string name of the form 'type:name' to\na Javascript object with the parsed aspects of the name\nbroken out.",
      "params": [
        {
          "name": "fullName",
          "description": "the lookup string",
          "type": "String"
        }
      ],
      "itemtype": "method",
      "name": "parseName",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 245,
      "description": "Returns a human-readable description for a fullName. Used by the\nApplication namespace in assertions to describe the\nprecise name of the class that Ember is looking for, rather than\ncontainer keys.",
      "params": [
        {
          "name": "fullName",
          "description": "the lookup string",
          "type": "String"
        }
      ],
      "itemtype": "method",
      "name": "lookupDescription",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 276,
      "description": "Given a parseName object (output from `parseName`), apply\nthe conventions expected by `Router`",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "useRouterNaming",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 292,
      "description": "Look up the template in Ember.TEMPLATES",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveTemplate",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 306,
      "description": "Lookup the view using `resolveOther`",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveView",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 319,
      "description": "Lookup the controller using `resolveOther`",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveController",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 331,
      "description": "Lookup the route using `resolveOther`",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveRoute",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 344,
      "description": "Lookup the model on the Application namespace",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveModel",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 358,
      "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveHelper",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 370,
      "description": "Look up the specified object (from parsedName) on the appropriate\nnamespace (usually on the Application)",
      "params": [
        {
          "name": "parsedName",
          "description": "a parseName object with the parsed\n  fullName lookup string",
          "type": "Object"
        }
      ],
      "itemtype": "method",
      "name": "resolveOther",
      "access": "protected",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 390,
      "description": "Used to iterate all items of a given type.",
      "itemtype": "method",
      "name": "knownForType",
      "params": [
        {
          "name": "type",
          "description": "the type to search for",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 417,
      "description": "Converts provided name from the backing namespace into a container lookup name.\n\nExamples:\n\n* App.FooBarHelper -> helper:foo-bar\n* App.THelper -> helper:t",
      "itemtype": "method",
      "name": "translateToContainerFullname",
      "params": [
        {
          "name": "type",
          "description": "",
          "type": "String"
        },
        {
          "name": "name",
          "description": "",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/globals-resolver.js",
      "line": 440,
      "itemtype": "method",
      "name": "_logLookup",
      "params": [
        {
          "name": "found",
          "description": "",
          "type": "Boolean"
        },
        {
          "name": "parsedName",
          "description": "",
          "type": "Object"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "GlobalsResolver",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 38,
      "description": "The `Application` for which this is an instance.",
      "itemtype": "property",
      "name": "application",
      "type": "Application",
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 46,
      "description": "The DOM events for which the event dispatcher should listen.\n\nBy default, the application's `Ember.EventDispatcher` listens\nfor a set of standard DOM events, such as `mousedown` and\n`keyup`, and delegates them to your application's `Ember.View`\ninstances.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "customEvents",
      "type": "Object",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 59,
      "description": "The root DOM element of the Application as an element or a\n[jQuery-compatible selector\nstring](http://api.jquery.com/category/selectors/).",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "rootElement",
      "type": "String|DOMElement",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 84,
      "description": "Overrides the base `EngineInstance._bootSync` method with concerns relevant\nto booting application (instead of engine) instances.\n\nThis method should only contain synchronous boot concerns. Asynchronous\nboot concerns should eventually be moved to the `boot` method, which\nreturns a promise.\n\nUntil all boot code has been made asynchronous, we need to continue to\nexpose this method for use *internally* in places where we need to boot an\ninstance synchronously.",
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 136,
      "description": "This hook is called by the root-most Route (a.k.a. the ApplicationRoute)\nwhen it has finished creating the root View. By default, we simply take the\nview and append it to the `rootElement` specified on the Application.\n\nIn cases like FastBoot and testing, we can override this hook and implement\ncustom behavior, such as serializing to a string and sending over an HTTP\nsocket rather than appending to DOM.",
      "params": [
        {
          "name": "view",
          "description": "the root-most view",
          "type": "Ember.View"
        }
      ],
      "deprecated": true,
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 153,
      "description": "Tells the router to start routing. The router will ask the location for the\ncurrent URL of the page to determine the initial URL to start routing to.\nTo start the app at a specific URL, call `handleURL` instead.",
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 165,
      "description": "Sets up the router, initializing the child router and configuring the\nlocation before routing begins.\n\nBecause setup should only occur once, multiple calls to `setupRouter`\nbeyond the first call have no effect.\n\nThis is commonly used in order to confirm things that rely on the router\nare functioning properly from tests that are primarily rendering related.\n\nFor example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s\n`setupRenderingTest` calling `this.owner.setupRouter()` would allow that\nrendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered\nhave the correct URL.",
      "access": "public",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 191,
      "description": "Directs the router to route to a particular URL. This is useful in tests,\nfor example, to tell the app to start at a particular URL.",
      "params": [
        {
          "name": "url",
          "description": "the URL the router should route to",
          "type": "String"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 203,
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 217,
      "description": "Returns the current URL of the app instance. This is useful when your\napp does not update the browsers URL bar (i.e. it uses the `'none'`\nlocation adapter).",
      "access": "public",
      "tagname": "",
      "return": {
        "description": "the current URL",
        "type": "String"
      },
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 232,
      "description": "Navigate the instance to a particular URL. This is useful in tests, for\nexample, or to tell the app to start at a particular URL. This method\nreturns a promise that resolves with the app instance when the transition\nis complete, or rejects if the transion was aborted due to an error.",
      "access": "public",
      "tagname": "",
      "params": [
        {
          "name": "url",
          "description": "the destination URL",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Promise<ApplicationInstance>"
      },
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 292,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setupRegistry",
      "params": [
        {
          "name": "registry",
          "description": "",
          "type": "Registry"
        },
        {
          "name": "options",
          "description": "",
          "type": "BootOptions"
        }
      ],
      "class": "ApplicationInstance",
      "module": "@ember/application"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 338,
      "description": "Provide a specific instance of jQuery. This is useful in conjunction with\nthe `document` option, as it allows you to use a copy of `jQuery` that is\nappropriately bound to the foreign `document` (e.g. a jsdom).\n\nThis is highly experimental and support very incomplete at the moment.",
      "itemtype": "property",
      "name": "jQuery",
      "type": "Object",
      "default": "auto-detected",
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 352,
      "description": "Interactive mode: whether we need to set up event delegation and invoke\nlifecycle callbacks on Components.",
      "itemtype": "property",
      "name": "isInteractive",
      "type": "boolean",
      "default": "auto-detected",
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 363,
      "itemtype": "property",
      "name": "_renderMode",
      "type": "string",
      "default": "false",
      "access": "private",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 371,
      "description": "Run in a full browser environment.\n\nWhen this flag is set to `false`, it will disable most browser-specific\nand interactive features. Specifically:\n\n* It does not use `jQuery` to append the root view; the `rootElement`\n  (either specified as a subsequent option or on the application itself)\n  must already be an `Element` in the given `document` (as opposed to a\n  string selector).\n\n* It does not set up an `EventDispatcher`.\n\n* It does not run any `Component` lifecycle hooks (such as `didInsertElement`).\n\n* It sets the `location` option to `\"none\"`. (If you would like to use\n  the location adapter specified in the app's router instead, you can also\n  specify `{ location: null }` to specifically opt-out.)",
      "itemtype": "property",
      "name": "isBrowser",
      "type": "boolean",
      "default": "auto-detected",
      "access": "public",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 407,
      "description": "Disable rendering completely.\n\nWhen this flag is set to `false`, it will disable the entire rendering\npipeline. Essentially, this puts the app into \"routing-only\" mode. No\ntemplates will be rendered, and no Components will be created.",
      "itemtype": "property",
      "name": "shouldRender",
      "type": "boolean",
      "default": "true",
      "access": "public",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 430,
      "description": "If present, render into the given `Document` object instead of the\nglobal `window.document` object.\n\nIn practice, this is only useful in non-browser environment or in\nnon-interactive mode, because Ember's `jQuery` dependency is\nimplicitly bound to the current document, causing event delegation\nto not work properly when the app is rendered into a foreign\ndocument object (such as an iframe's `contentDocument`).\n\nIn non-browser mode, this could be a \"`Document`-like\" object as\nEmber only interact with a small subset of the DOM API in non-\ninteractive mode. While the exact requirements have not yet been\nformalized, the `SimpleDOM` library's implementation is known to\nwork.",
      "itemtype": "property",
      "name": "document",
      "type": "Document",
      "default": "the global `document` object",
      "access": "public",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 457,
      "description": "If present, overrides the application's `rootElement` property on\nthe instance. This is useful for testing environment, where you\nmight want to append the root view to a fixture area.\n\nIn non-browser mode, because Ember does not have access to jQuery,\nthis options must be specified as a DOM `Element` object instead of\na selector string.\n\nSee the documentation on `Application`'s `rootElement` for\ndetails.",
      "itemtype": "property",
      "name": "rootElement",
      "type": "String|Element",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/application/instance.js",
      "line": 482,
      "description": "If present, overrides the router's `location` property with this\nvalue. This is useful for environments where trying to modify the\nURL would be inappropriate.",
      "itemtype": "property",
      "name": "location",
      "type": "string",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "ApplicationInstance.BootOptions",
      "module": "@ember/application",
      "namespace": "ApplicationInstance"
    },
    {
      "file": "packages/@ember/canary-features/index.ts",
      "line": 38,
      "description": "Determine whether the specified `feature` is enabled. Used by Ember's\nbuild tools to exclude experimental features from beta/stable builds.\n\nYou can define the following configuration options:\n\n* `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly\n  enabled/disabled.",
      "itemtype": "method",
      "name": "isEnabled",
      "params": [
        {
          "name": "feature",
          "description": "The feature to check",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "since": "1.1.0",
      "access": "public",
      "tagname": "",
      "class": "FEATURES",
      "module": "@ember/canary-features"
    },
    {
      "file": "packages/@ember/component/template-only.ts",
      "line": 15,
      "description": "This utility function is used to declare a given component has no backing class. When the rendering engine detects this it\nis able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_\nwithout adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).\nSpecifically, this means that the template will be rendered as \"outer HTML\".\n\nIn general, this method will be used by build time tooling and would not be directly written in an application. However,\nat times it may be useful to use directly to leverage the \"outer HTML\" semantics mentioned above. For example, if an addon would like\nto use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the\n`template-only-glimmer-components` optional feature.",
      "example": [
        "\n\n```js\nimport templateOnly from '@ember/component/template-only';\n\nexport default templateOnly();\n```"
      ],
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "templateOnly",
      "params": [
        {
          "name": "moduleName",
          "description": "the module name that the template only component represents, this will be used for debugging purposes",
          "type": "String"
        }
      ],
      "category": [
        "EMBER_GLIMMER_SET_COMPONENT_TEMPLATE"
      ],
      "class": "Ember.ControllerMixin",
      "module": "@ember/component/template-only"
    },
    {
      "file": "packages/@ember/controller/lib/controller_mixin.js",
      "line": 21,
      "description": "The object to which actions from the view should be sent.\n\nFor example, when a Handlebars template uses the `{{action}}` helper,\nit will attempt to send the action to the view's controller's `target`.\n\nBy default, the value of the target property is set to the router, and\nis injected when a controller is instantiated. This injection is applied\nas part of the application's initialization process. In most cases the\n`target` property will automatically be set to the logical consumer of\nactions for the controller.",
      "itemtype": "property",
      "name": "target",
      "default": "null",
      "access": "public",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/controller/lib/controller_mixin.js",
      "line": 41,
      "description": "The controller's current model. When retrieving or modifying a controller's\nmodel, this property should be used instead of the `content` property.",
      "itemtype": "property",
      "name": "model",
      "access": "public",
      "tagname": "",
      "class": "Ember.ControllerMixin",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/@ember/controller/index.js",
      "line": 17,
      "description": "Creates a property that lazily looks up another controller in the container.\nCan only be used when defining another controller.\n\nExample:\n\n```app/controllers/post.js\nimport Controller, {\n  inject as controller\n} from '@ember/controller';\n\nexport default class PostController extends Controller {\n  @controller posts;\n}\n```\n\nClassic Class Example:\n\n```app/controllers/post.js\nimport Controller, {\n  inject as controller\n} from '@ember/controller';\n\nexport default Controller.extend({\n  posts: controller()\n});\n```\n\nThis example will create a `posts` property on the `post` controller that\nlooks up the `posts` controller in the container, making it easy to reference\nother controllers.",
      "itemtype": "method",
      "name": "inject",
      "static": 1,
      "since": "1.10.0",
      "params": [
        {
          "name": "name",
          "description": "(optional) name of the controller to inject, defaults to\n       the property's name",
          "type": "String"
        }
      ],
      "return": {
        "description": "injection decorator instance",
        "type": "ComputedDecorator"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/controller",
      "module": "@ember/controller"
    },
    {
      "file": "packages/@ember/debug/lib/capture-render-tree.ts",
      "line": 8,
      "description": "Ember Inspector calls this function to capture the current render tree.\n\nIn production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`\nbefore loading Ember.",
      "access": "private",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "captureRenderTree",
      "params": [
        {
          "name": "app",
          "description": "An `ApplicationInstance`.",
          "type": "ApplicationInstance"
        }
      ],
      "since": "3.14.0",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/lib/deprecate.ts",
      "line": 25,
      "description": "Allows for runtime registration of handler functions that override the default deprecation behavior.\nDeprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).\nThe following example demonstrates its usage by registering a handler that throws an error if the\nmessage contains the word \"should\", otherwise defers to the default handler.\n\n```javascript\nimport { registerDeprecationHandler } from '@ember/debug';\n\nregisterDeprecationHandler((message, options, next) => {\n  if (message.indexOf('should') !== -1) {\n    throw new Error(`Deprecation message with should: ${message}`);\n  } else {\n    // defer to whatever handler was registered before this one\n    next(message, options);\n  }\n});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the deprecation call.</li>\n  <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>\n      <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "registerDeprecationHandler",
      "params": [
        {
          "name": "handler",
          "description": "A function to handle deprecation calls.",
          "type": "Function"
        }
      ],
      "since": "2.1.0",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/lib/deprecate.ts",
      "line": 161,
      "description": "Display a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only).\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.",
      "itemtype": "method",
      "name": "deprecate",
      "params": [
        {
          "name": "message",
          "description": "A description of the deprecation.",
          "type": "String"
        },
        {
          "name": "test",
          "description": "A boolean. If falsy, the deprecation will be displayed.",
          "type": "Boolean"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object",
          "props": [
            {
              "name": "id",
              "description": "A unique id for this deprecation. The id can be\n  used by Ember debugging tools to change the behavior (raise, log or silence)\n  for that specific deprecation. The id should be namespaced by dots, e.g.\n  \"view.helper.select\".",
              "type": "String"
            },
            {
              "name": "until",
              "description": "The version of Ember when this deprecation\n  warning will be removed.",
              "type": "String"
            },
            {
              "name": "url",
              "description": "An optional url to the transition guide on the\n  emberjs.com website.",
              "type": "String",
              "optional": true
            }
          ]
        }
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "since": "1.0.0",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/lib/warn.ts",
      "line": 23,
      "description": "Allows for runtime registration of handler functions that override the default warning behavior.\nWarnings are invoked by calls made to [@ember/debug/warn](/ember/release/classes/@ember%2Fdebug/methods/warn?anchor=warn).\nThe following example demonstrates its usage by registering a handler that does nothing overriding Ember's\ndefault warning behavior.\n\n```javascript\nimport { registerWarnHandler } from '@ember/debug';\n\n// next is not called, so no warnings get the default behavior\nregisterWarnHandler(() => {});\n```\n\nThe handler function takes the following arguments:\n\n<ul>\n  <li> <code>message</code> - The message received from the warn call. </li>\n  <li> <code>options</code> - An object passed in with the warn call containing additional information including:</li>\n    <ul>\n      <li> <code>id</code> - An id of the warning in the form of <code>package-name.specific-warning</code>.</li>\n    </ul>\n  <li> <code>next</code> - A function that calls into the previously registered handler.</li>\n</ul>",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "registerWarnHandler",
      "params": [
        {
          "name": "handler",
          "description": "A function to handle warnings.",
          "type": "Function"
        }
      ],
      "since": "2.1.0",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/lib/warn.ts",
      "line": 70,
      "description": "Display a warning with the provided message.\n\n* In a production build, this method is defined as an empty function (NOP).\nUses of this method in Ember itself are stripped from the ember.prod.js build.\n\n```javascript\nimport { warn } from '@ember/debug';\nimport tomsterCount from './tomster-counter'; // a module in my project\n\n// Log a warning if we have more than 3 tomsters\nwarn('Too many tomsters!', tomsterCount <= 3, {\n  id: 'ember-debug.too-many-tomsters'\n});\n```",
      "itemtype": "method",
      "name": "warn",
      "static": 1,
      "params": [
        {
          "name": "message",
          "description": "A warning to display.",
          "type": "String"
        },
        {
          "name": "test",
          "description": "An optional boolean. If falsy, the warning\n  will be displayed.",
          "type": "Boolean"
        },
        {
          "name": "options",
          "description": "An object that can be used to pass a unique\n  `id` for this warning.  The `id` can be used by Ember debugging tools\n  to change the behavior (raise, log, or silence) for that specific warning.\n  The `id` should be namespaced by dots, e.g. \"ember-debug.feature-flag-with-features-stripped\"",
          "type": "Object"
        }
      ],
      "access": "public",
      "tagname": "",
      "since": "1.0.0",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/index.ts",
      "line": 131,
      "description": "Verify that a certain expectation is met, or throw a exception otherwise.\n\nThis is useful for communicating assumptions in the code to other human\nreaders as well as catching bugs that accidentally violates these\nexpectations.\n\nAssertions are removed from production builds, so they can be freely added\nfor documentation and debugging purposes without worries of incuring any\nperformance penalty. However, because of that, they should not be used for\nchecks that could reasonably fail during normal usage. Furthermore, care\nshould be taken to avoid accidentally relying on side-effects produced from\nevaluating the condition itself, since the code will not run in production.\n\n```javascript\nimport { assert } from '@ember/debug';\n\n// Test for truthiness\nassert('Must pass a string', typeof str === 'string');\n\n// Fail unconditionally\nassert('This code path should never be run');\n```",
      "itemtype": "method",
      "name": "assert",
      "static": 1,
      "params": [
        {
          "name": "description",
          "description": "Describes the expectation. This will become the\n  text of the Error thrown if the assertion fails.",
          "type": "String"
        },
        {
          "name": "condition",
          "description": "Must be truthy for the assertion to pass. If\n  falsy, an exception will be thrown.",
          "type": "Any"
        }
      ],
      "access": "public",
      "tagname": "",
      "since": "1.0.0",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/index.ts",
      "line": 171,
      "description": "Display a debug notice.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.\n\n```javascript\nimport { debug } from '@ember/debug';\n\ndebug('I\\'m a debug notice!');\n```",
      "itemtype": "method",
      "name": "debug",
      "static": 1,
      "params": [
        {
          "name": "message",
          "description": "A debug message to display.",
          "type": "String"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/index.ts",
      "line": 200,
      "description": "Display an info notice.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.",
      "itemtype": "method",
      "name": "info",
      "access": "private",
      "tagname": "",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/index.ts",
      "line": 219,
      "description": "Alias an old, deprecated method with its new counterpart.\n\nDisplay a deprecation warning with the provided message and a stack trace\n(Chrome and Firefox only) when the assigned method is called.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.\n\n```javascript\nimport { deprecateFunc } from '@ember/debug';\n\nEmber.oldMethod = deprecateFunc('Please use the new, updated method', options, Ember.newMethod);\n```",
      "itemtype": "method",
      "name": "deprecateFunc",
      "static": 1,
      "params": [
        {
          "name": "message",
          "description": "A description of the deprecation.",
          "type": "String"
        },
        {
          "name": "options",
          "description": "The options object for `deprecate`.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "func",
          "description": "The new function called to replace its deprecated counterpart.",
          "type": "Function"
        }
      ],
      "return": {
        "description": "A new function that wraps the original function with a deprecation warning",
        "type": "Function"
      },
      "access": "private",
      "tagname": "",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/debug/index.ts",
      "line": 264,
      "description": "Run a function meant for debugging.\n\nCalls to this function are removed from production builds, so they can be\nfreely added for documentation and debugging purposes without worries of\nincuring any performance penalty.\n\n```javascript\nimport Component from '@ember/component';\nimport { runInDebug } from '@ember/debug';\n\nrunInDebug(() => {\n  Component.reopen({\n    didInsertElement() {\n      console.log(\"I'm happy\");\n    }\n  });\n});\n```",
      "itemtype": "method",
      "name": "runInDebug",
      "static": 1,
      "params": [
        {
          "name": "func",
          "description": "The function to be executed.",
          "type": "Function"
        }
      ],
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/debug",
      "module": "@ember/debug"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 32,
      "description": "This function is used to associate a destroyable object with a parent. When the parent\nis destroyed, all registered children will also be destroyed.\n\n```js\nclass CustomSelect extends Component {\n  constructor() {\n    // obj is now a child of the component. When the component is destroyed,\n    // obj will also be destroyed, and have all of its destructors triggered.\n    this.obj = associateDestroyableChild(this, {});\n  }\n}\n```\n\nReturns the associated child for convenience.",
      "itemtype": "method",
      "name": "associateDestroyableChild",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "params": [
        {
          "name": "parent",
          "description": "the destroyable to entangle the child destroyables lifetime with",
          "type": "Object|Function"
        },
        {
          "name": "child",
          "description": "the destroyable to be entangled with the parents lifetime",
          "type": "Object|Function"
        },
        {
          "name": "destructor",
          "description": "the destructor to run when the destroyable object is destroyed",
          "type": "Function"
        }
      ],
      "return": {
        "description": "the child argument",
        "type": "Object|Function"
      },
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 59,
      "description": "Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns\nfalse.\n\n ```js\n let obj = {};\n isDestroying(obj); // false\n destroy(obj);\n isDestroying(obj); // true\n // ...sometime later, after scheduled destruction\n isDestroyed(obj); // true\n isDestroying(obj); // true\n ```",
      "itemtype": "method",
      "name": "isDestroying",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "params": [
        {
          "name": "destroyable",
          "description": "the object to check",
          "type": "Object|Function"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 82,
      "description": "Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise\nreturns false.\n\n```js\nlet obj = {};\n\nisDestroyed(obj); // false\ndestroy(obj);\n\n// ...sometime later, after scheduled destruction\n\nisDestroyed(obj); // true\n```",
      "itemtype": "method",
      "name": "isDestroyed",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "params": [
        {
          "name": "destroyable",
          "description": "the object to check",
          "type": "Object|Function"
        }
      ],
      "return": {
        "description": "",
        "type": "Boolean"
      },
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 106,
      "description": "Initiates the destruction of a destroyable object. It runs all associated destructors, and then\ndestroys all children recursively.\n\n```js\nlet obj = {};\n\nregisterDestructor(obj, () => console.log('destroyed!'));\n\ndestroy(obj); // this will schedule the destructor to be called\n\n// ...some time later, during scheduled destruction\n\n// destroyed!\n```\n\nDestruction via `destroy()` follows these steps:\n\n1, Mark the destroyable such that `isDestroying(destroyable)` returns `true`\n2, Call `destroy()` on each of the destroyable's associated children\n3, Schedule calling the destroyable's destructors\n4, Schedule setting destroyable such that `isDestroyed(destroyable)` returns `true`\n\nThis results in the entire tree of destroyables being first marked as destroying,\nthen having all of their destructors called, and finally all being marked as isDestroyed.\nThere won't be any in between states where some items are marked as `isDestroying` while\ndestroying, while others are not.",
      "itemtype": "method",
      "name": "destroy",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "params": [
        {
          "name": "destroyable",
          "description": "the object to destroy",
          "type": "Object|Function"
        }
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 142,
      "description": "This function asserts that all objects which have associated destructors or associated children\nhave been destroyed at the time it is called. It is meant to be a low level hook that testing\nframeworks can use to hook into and validate that all destroyables have in fact been destroyed.\n\nThis function requires that `enableDestroyableTracking` was called previously, and is only\navailable in non-production builds.",
      "itemtype": "method",
      "name": "assertDestroyablesDestroyed",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 157,
      "description": "This function instructs the destroyable system to keep track of all destroyables (their\nchildren, destructors, etc). This enables a future usage of `assertDestroyablesDestroyed`\nto be used to ensure that all destroyable tasks (registered destructors and associated children)\nhave completed when `assertDestroyablesDestroyed` is called.",
      "itemtype": "method",
      "name": "enableDestroyableTracking",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 170,
      "description": "Receives a destroyable object and a destructor function, and associates the\nfunction with it. When the destroyable is destroyed with destroy, or when its\nparent is destroyed, the destructor function will be called.\n\n```js\nimport { registerDestructor } from '@ember/destroyable';\n\nclass Modal extends Component {\n  @service resize;\n\n  constructor() {\n    this.resize.register(this, this.layout);\n\n    registerDestructor(this, () => this.resize.unregister(this));\n  }\n}\n```\n\nMultiple destructors can be associated with a given destroyable, and they can be\nassociated over time, allowing libraries to dynamically add destructors as needed.\n`registerDestructor` also returns the associated destructor function, for convenience.\n\nThe destructor function is passed a single argument, which is the destroyable itself.\nThis allows the function to be reused multiple times for many destroyables, rather\nthan creating a closure function per destroyable.\n\n```js\nimport { registerDestructor } from '@ember/destroyable';\n\nfunction unregisterResize(instance) {\n  instance.resize.unregister(instance);\n}\n\nclass Modal extends Component {\n  @service resize;\n\n  constructor() {\n    this.resize.register(this, this.layout);\n\n    registerDestructor(this, unregisterResize);\n  }\n}\n```",
      "itemtype": "method",
      "name": "registerDestructor",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "params": [
        {
          "name": "destroyable",
          "description": "the destroyable to register the destructor function with",
          "type": "Object|Function"
        },
        {
          "name": "destructor",
          "description": "the destructor to run when the destroyable object is destroyed",
          "type": "Function"
        }
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/destroyable/index.ts",
      "line": 230,
      "description": "Receives a destroyable and a destructor function, and de-associates the destructor\nfrom the destroyable.\n\n```js\nimport { registerDestructor, unregisterDestructor } from '@ember/destroyable';\n\nclass Modal extends Component {\n  @service modals;\n\n  constructor() {\n    this.modals.add(this);\n\n    this.modalDestructor = registerDestructor(this, () => this.modals.remove(this));\n  }\n\n  @action pinModal() {\n    unregisterDestructor(this, this.modalDestructor);\n  }\n}\n```",
      "itemtype": "method",
      "name": "unregisterDestructor",
      "category": [
        "EMBER_DESTROYABLES"
      ],
      "params": [
        {
          "name": "destroyable",
          "description": "the destroyable to unregister the destructor function from",
          "type": "Object|Function"
        },
        {
          "name": "destructor",
          "description": "the destructor to remove from the destroyable",
          "type": "Function"
        }
      ],
      "static": 1,
      "access": "public",
      "tagname": "",
      "class": "@ember/destroyable",
      "module": "@ember/destroyable"
    },
    {
      "file": "packages/@ember/engine/lib/engine-parent.js",
      "line": 8,
      "description": "`getEngineParent` retrieves an engine instance's parent instance.",
      "itemtype": "method",
      "name": "getEngineParent",
      "params": [
        {
          "name": "engine",
          "description": "An engine instance.",
          "type": "EngineInstance"
        }
      ],
      "return": {
        "description": "The parent engine instance.",
        "type": "EngineInstance"
      },
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/lib/engine-parent.js",
      "line": 22,
      "description": "`setEngineParent` sets an engine instance's parent instance.",
      "itemtype": "method",
      "name": "setEngineParent",
      "params": [
        {
          "name": "engine",
          "description": "An engine instance.",
          "type": "EngineInstance"
        },
        {
          "name": "parent",
          "description": "The parent engine instance.",
          "type": "EngineInstance"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 54,
      "description": "A private flag indicating whether an engine's initializers have run yet.",
      "access": "private",
      "tagname": "",
      "itemtype": "property",
      "name": "_initializersRan",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 62,
      "description": "Ensure that initializers are run once, and only once, per engine.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "ensureInitializers",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 75,
      "description": "Create an EngineInstance for this engine.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "buildInstance",
      "return": {
        "description": "the engine instance",
        "type": "EngineInstance"
      },
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 88,
      "description": "Build and configure the registry for the current engine.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "buildRegistry",
      "return": {
        "description": "the configured registry",
        "type": "Ember.Registry"
      },
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 101,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "initializer",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 109,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "instanceInitializer",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 117,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "runInitializers",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 128,
      "access": "private",
      "tagname": "",
      "since": "1.12.0",
      "itemtype": "method",
      "name": "runInstanceInitializers",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 159,
      "description": "The goal of initializers should be to register dependencies and injections.\nThis phase runs once. Because these initializers may load code, they are\nallowed to defer application readiness and advance it. If you need to access\nthe container or store you should use an InstanceInitializer that will be run\nafter all initializers and therefore after all code is loaded and the app is\nready.\n\nInitializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize`, all others are optional.\n\n* `name` allows you to specify under which name the initializer is registered.\nThis must be a unique name, as trying to register two initializers with the\nsame name will result in an error.\n\n```app/initializer/named-initializer.js\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Running namedInitializer!');\n}\n\nexport default {\n  name: 'named-initializer',\n  initialize\n};\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\nAn example of ordering initializers, we create an initializer named `first`:\n\n```app/initializer/first.js\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('First initializer!');\n}\n\nexport default {\n  name: 'first',\n  initialize\n};\n```\n\n```bash\n// DEBUG: First initializer!\n```\n\nWe add another initializer named `second`, specifying that it should run\nafter the initializer named `first`:\n\n```app/initializer/second.js\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Second initializer!');\n}\n\nexport default {\n  name: 'second',\n  after: 'first',\n  initialize\n};\n```\n\n```\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nAfterwards we add a further initializer named `pre`, this time specifying\nthat it should run before the initializer named `first`:\n\n```app/initializer/pre.js\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Pre initializer!');\n}\n\nexport default {\n  name: 'pre',\n  before: 'first',\n  initialize\n};\n```\n\n```bash\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n```\n\nFinally we add an initializer named `post`, specifying it should run after\nboth the `first` and the `second` initializers:\n\n```app/initializer/post.js\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Post initializer!');\n}\n\nexport default {\n  name: 'post',\n  after: ['first', 'second'],\n  initialize\n};\n```\n\n```bash\n// DEBUG: Pre initializer!\n// DEBUG: First initializer!\n// DEBUG: Second initializer!\n// DEBUG: Post initializer!\n```\n\n* `initialize` is a callback function that receives one argument,\n  `application`, on which you can operate.\n\nExample of using `application` to register an adapter:\n\n```app/initializer/api-adapter.js\nimport ApiAdapter from '../utils/api-adapter';\n\nexport function initialize(application) {\n  application.register('api-adapter:main', ApiAdapter);\n}\n\nexport default {\n  name: 'post',\n  after: ['first', 'second'],\n  initialize\n};\n```",
      "itemtype": "method",
      "name": "initializer",
      "params": [
        {
          "name": "initializer",
          "description": "",
          "type": "Object"
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 306,
      "description": "Instance initializers run after all initializers have run. Because\ninstance initializers run after the app is fully set up. We have access\nto the store, container, and other items. However, these initializers run\nafter code has loaded and are not allowed to defer readiness.\n\nInstance initializer receives an object which has the following attributes:\n`name`, `before`, `after`, `initialize`. The only required attribute is\n`initialize`, all others are optional.\n\n* `name` allows you to specify under which name the instanceInitializer is\nregistered. This must be a unique name, as trying to register two\ninstanceInitializer with the same name will result in an error.\n\n```app/initializer/named-instance-initializer.js\nimport { debug } from '@ember/debug';\n\nexport function initialize() {\n  debug('Running named-instance-initializer!');\n}\n\nexport default {\n  name: 'named-instance-initializer',\n  initialize\n};\n```\n\n* `before` and `after` are used to ensure that this initializer is ran prior\nor after the one identified by the value. This value can be a single string\nor an array of strings, referencing the `name` of other initializers.\n\n* See Application.initializer for discussion on the usage of before\nand after.\n\nExample instanceInitializer to preload data into the store.\n\n```app/initializer/preload-data.js\nimport $ from 'jquery';\n\nexport function initialize(application) {\n    var userConfig, userConfigEncoded, store;\n    // We have a HTML escaped JSON representation of the user's basic\n    // configuration generated server side and stored in the DOM of the main\n    // index.html file. This allows the app to have access to a set of data\n    // without making any additional remote calls. Good for basic data that is\n    // needed for immediate rendering of the page. Keep in mind, this data,\n    // like all local models and data can be manipulated by the user, so it\n    // should not be relied upon for security or authorization.\n\n    // Grab the encoded data from the meta tag\n    userConfigEncoded = $('head meta[name=app-user-config]').attr('content');\n\n    // Unescape the text, then parse the resulting JSON into a real object\n    userConfig = JSON.parse(unescape(userConfigEncoded));\n\n    // Lookup the store\n    store = application.lookup('service:store');\n\n    // Push the encoded JSON into the store\n    store.pushPayload(userConfig);\n}\n\nexport default {\n  name: 'named-instance-initializer',\n  initialize\n};\n```",
      "itemtype": "method",
      "name": "instanceInitializer",
      "params": [
        {
          "name": "instanceInitializer",
          "description": ""
        }
      ],
      "access": "public",
      "tagname": "",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 380,
      "description": "This creates a registry with the default Ember naming conventions.\n\nIt also configures the registry:\n\n* registered views are created every time they are looked up (they are\n  not singletons)\n* registered templates are not factories; the registered value is\n  returned directly.\n* the router receives the application as its `namespace` property\n* all controllers receive the router as their `target` and `controllers`\n  properties\n* all controllers receive the application as their `namespace` property\n* the application view receives the application controller as its\n  `controller` property\n* the application view receives the application template as its\n  `defaultTemplate` property",
      "itemtype": "method",
      "name": "buildRegistry",
      "static": 1,
      "params": [
        {
          "name": "namespace",
          "description": "the application for which to\n  build the registry",
          "type": "Application"
        }
      ],
      "return": {
        "description": "the built registry",
        "type": "Ember.Registry"
      },
      "access": "private",
      "tagname": "",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 420,
      "description": "Set this to provide an alternate class to `DefaultResolver`",
      "deprecated": true,
      "deprecationMessage": "Use 'Resolver' instead",
      "itemtype": "property",
      "name": "resolver",
      "access": "public",
      "tagname": "",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 429,
      "description": "Set this to provide an alternate class to `DefaultResolver`",
      "itemtype": "property",
      "name": "resolver",
      "access": "public",
      "tagname": "",
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/index.js",
      "line": 438,
      "description": "This function defines the default lookup rules for container lookups:\n\n* templates are looked up on `Ember.TEMPLATES`\n* other names are looked up on the application after classifying the name.\n  For example, `controller:post` looks up `App.PostController` by default.\n* if the default lookup fails, look for registered classes on the container\n\nThis allows the application to register default injections in the container\nthat could be overridden by the normal naming convention.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "resolverFor",
      "params": [
        {
          "name": "namespace",
          "description": "the namespace to look for classes",
          "type": "Ember.Namespace"
        }
      ],
      "return": {
        "description": "the resolved value for a given lookup",
        "type": "*"
      },
      "class": "Engine",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 29,
      "description": "The base `Engine` for which this is an instance.",
      "itemtype": "property",
      "name": "engine",
      "type": "Engine",
      "access": "private",
      "tagname": "",
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 62,
      "description": "Initialize the `EngineInstance` and return a promise that resolves\nwith the instance itself when the boot process is complete.\n\nThe primary task here is to run any registered instance initializers.\n\nSee the documentation on `BootOptions` for the options it takes.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "boot",
      "params": [
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Promise<EngineInstance,Error>"
      },
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 85,
      "description": "Unfortunately, a lot of existing code assumes booting an instance is\nsynchronous – specifically, a lot of tests assume the last call to\n`app.advanceReadiness()` or `app.reset()` will result in a new instance\nbeing fully-booted when the current runloop completes.\n\nWe would like new code (like the `visit` API) to stop making this\nassumption, so we created the asynchronous version above that returns a\npromise. But until we have migrated all the code, we would have to expose\nthis method for use *internally* in places where we need to boot an instance\nsynchronously.",
      "access": "private",
      "tagname": "",
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 124,
      "description": "Unregister a factory.\n\nOverrides `RegistryProxy#unregister` in order to clear any cached instances\nof the unregistered factory.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "unregister",
      "params": [
        {
          "name": "fullName",
          "description": "",
          "type": "String"
        }
      ],
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 139,
      "description": "Build a new `EngineInstance` that's a child of this instance.\n\nEngines must be registered by name with their parent engine\n(or application).",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "buildChildEngineInstance",
      "params": [
        {
          "name": "name",
          "description": "the registered name of the engine.",
          "type": "String"
        },
        {
          "name": "options",
          "description": "options provided to the engine instance.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "EngineInstance,Error"
      },
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 167,
      "description": "Clone dependencies shared between an engine instance and its parent.",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "cloneParentDependencies",
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/engine/instance.js",
      "line": 203,
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "setupRegistry",
      "params": [
        {
          "name": "registry",
          "description": "",
          "type": "Registry"
        },
        {
          "name": "options",
          "description": "",
          "type": "BootOptions"
        }
      ],
      "class": "EngineInstance",
      "module": "@ember/engine"
    },
    {
      "file": "packages/@ember/instrumentation/index.ts",
      "line": 122,
      "description": "Notifies event's subscribers, calls `before` and `after` hooks.",
      "itemtype": "method",
      "name": "instrument",
      "static": 1,
      "params": [
        {
          "name": "name",
          "description": "Namespaced event name.",
          "type": "String",
          "optional": true
        },
        {
          "name": "payload",
          "description": "",
          "type": "Object"
        },
        {
          "name": "callback",
          "description": "Function that you're instrumenting.",
          "type": "Function"
        },
        {
          "name": "binding",
          "description": "Context that instrument function is called with.",
          "type": "Object"
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/instrumentation",
      "module": "@ember/instrumentation"
    },
    {
      "file": "packages/@ember/instrumentation/index.ts",
      "line": 281,
      "description": "Subscribes to a particular event or instrumented block of code.",
      "itemtype": "method",
      "name": "subscribe",
      "static": 1,
      "params": [
        {
          "name": "pattern",
          "description": "Namespaced event name.",
          "type": "String",
          "optional": true
        },
        {
          "name": "object",
          "description": "Before and After hooks.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "Subscriber"
      },
      "access": "private",
      "tagname": "",
      "class": "@ember/instrumentation",
      "module": "@ember/instrumentation"
    },
    {
      "file": "packages/@ember/instrumentation/index.ts",
      "line": 323,
      "description": "Unsubscribes from a particular event or instrumented block of code.",
      "itemtype": "method",
      "name": "unsubscribe",
      "static": 1,
      "params": [
        {
          "name": "subscriber",
          "description": "",
          "type": "Object",
          "optional": true
        }
      ],
      "access": "private",
      "tagname": "",
      "class": "@ember/instrumentation",
      "module": "@ember/instrumentation"
    },
    {
      "file": "packages/@ember/instrumentation/index.ts",
      "line": 346,
      "description": "Resets `Instrumentation` by flushing list of subscribers.",
      "itemtype": "method",
      "name": "reset",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/instrumentation",
      "module": "@ember/instrumentation"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 63,
      "description": "A computed property macro that returns true if the value of the dependent\nproperty is null, an empty string, empty array, or empty function.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { empty } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  @empty('todos') isDone;\n}\n\nlet todoList = new ToDoList(\n  ['Unit Test', 'Documentation', 'Release']\n);\n\ntodoList.isDone; // false\nset(todoList, 'todos', []);\ntodoList.isDone; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { empty } from '@ember/object/computed';\n\nlet ToDoList = EmberObject.extend({\n  isDone: empty('todos')\n});\n\nlet todoList = ToDoList.create({\n  todos: ['Unit Test', 'Documentation', 'Release']\n});\n\ntodoList.isDone; // false\nset(todoList, 'todos', []);\ntodoList.isDone; // true\n```",
      "since": "1.6.0",
      "itemtype": "method",
      "name": "empty",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which returns true if the value\nof the dependent property is null, an empty string, empty array, or empty\nfunction and false if the underlying value is not empty.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 131,
      "description": "A computed property that returns true if the value of the dependent property\nis NOT null, an empty string, empty array, or empty function.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { notEmpty } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(backpack) {\n    set(this, 'backpack', backpack);\n  }\n\n  @notEmpty('backpack') hasStuff\n}\n\nlet hamster = new Hamster(\n  ['Food', 'Sleeping Bag', 'Tent']\n);\n\nhamster.hasStuff; // true\nset(hamster, 'backpack', []);\nhamster.hasStuff; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { notEmpty } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  hasStuff: notEmpty('backpack')\n});\n\nlet hamster = Hamster.create({\n  backpack: ['Food', 'Sleeping Bag', 'Tent']\n});\n\nhamster.hasStuff; // true\nset(hamster, 'backpack', []);\nhamster.hasStuff; // false\n```",
      "itemtype": "method",
      "name": "notEmpty",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which returns true if original\nvalue for property is not empty.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 196,
      "description": "A computed property that returns true if the value of the dependent property\nis null or undefined. This avoids errors from JSLint complaining about use of\n==, which can be technically confusing.\n\n```javascript\nimport { set } from '@ember/object';\nimport { none } from '@ember/object/computed';\n\nclass Hamster {\n  @none('food') isHungry;\n}\n\nlet hamster = new Hamster();\n\nhamster.isHungry; // true\n\nset(hamster, 'food', 'Banana');\nhamster.isHungry; // false\n\nset(hamster, 'food', null);\nhamster.isHungry; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { none } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  isHungry: none('food')\n});\n\nlet hamster = Hamster.create();\n\nhamster.isHungry; // true\n\nset(hamster, 'food', 'Banana');\nhamster.isHungry; // false\n\nset(hamster, 'food', null);\nhamster.isHungry; // true\n```",
      "itemtype": "method",
      "name": "none",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which returns true if original\nvalue for property is null or undefined.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 260,
      "description": "A computed property that returns the inverse boolean value of the original\nvalue for the dependent property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { not } from '@ember/object/computed';\n\nclass User {\n  loggedIn = false;\n\n  @not('loggedIn') isAnonymous;\n}\n\nlet user = new User();\n\nuser.isAnonymous; // true\nset(user, 'loggedIn', true);\nuser.isAnonymous; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { not } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  loggedIn: false,\n\n  isAnonymous: not('loggedIn')\n});\n\nlet user = User.create();\n\nuser.isAnonymous; // true\nset(user, 'loggedIn', true);\nuser.isAnonymous; // false\n```",
      "itemtype": "method",
      "name": "not",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which returns inverse of the\noriginal value for property",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 321,
      "description": "A computed property that converts the provided dependent property into a\nboolean value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { bool } from '@ember/object/computed';\n\n\nclass Hamster {\n  @bool('numBananas') hasBananas\n}\n\nlet hamster = new Hamster();\n\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 0);\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 1);\nhamster.hasBananas; // true\n\nset(hamster, 'numBananas', null);\nhamster.hasBananas; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { bool } from '@ember/object/computed';\n\n\nlet Hamster = EmberObject.extend({\n  hasBananas: bool('numBananas')\n});\n\nlet hamster = Hamster.create();\n\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 0);\nhamster.hasBananas; // false\n\nset(hamster, 'numBananas', 1);\nhamster.hasBananas; // true\n\nset(hamster, 'numBananas', null);\nhamster.hasBananas; // false\n```",
      "itemtype": "method",
      "name": "bool",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which converts to boolean the\noriginal value for property",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 394,
      "description": "A computed property which matches the original value for the dependent\nproperty against a given RegExp, returning `true` if the value matches the\nRegExp and `false` if it does not.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { match } from '@ember/object/computed';\n\nclass User {\n  @match('email', /^.+@.+\\..+$/) hasValidEmail;\n}\n\nlet user = new User();\n\nuser.hasValidEmail; // false\n\nset(user, 'email', '');\nuser.hasValidEmail; // false\n\nset(user, 'email', 'ember_hamster@example.com');\nuser.hasValidEmail; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { match } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  hasValidEmail: match('email', /^.+@.+\\..+$/)\n});\n\nlet user = User.create();\n\nuser.hasValidEmail; // false\n\nset(user, 'email', '');\nuser.hasValidEmail; // false\n\nset(user, 'email', 'ember_hamster@example.com');\nuser.hasValidEmail; // true\n```",
      "itemtype": "method",
      "name": "match",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "regexp",
          "description": "",
          "type": "RegExp"
        }
      ],
      "return": {
        "description": "computed property which match the original value\nfor property against a given RegExp",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 462,
      "description": "A computed property that returns true if the provided dependent property is\nequal to the given value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { equal } from '@ember/object/computed';\n\nclass Hamster {\n  @equal('percentCarrotsEaten', 100) satisfied;\n}\n\nlet hamster = new Hamster();\n\nhamster.satisfied; // false\n\nset(hamster, 'percentCarrotsEaten', 100);\nhamster.satisfied; // true\n\nset(hamster, 'percentCarrotsEaten', 50);\nhamster.satisfied; // false\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { equal } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  satisfied: equal('percentCarrotsEaten', 100)\n});\n\nlet hamster = Hamster.create();\n\nhamster.satisfied; // false\n\nset(hamster, 'percentCarrotsEaten', 100);\nhamster.satisfied; // true\n\nset(hamster, 'percentCarrotsEaten', 50);\nhamster.satisfied; // false\n```",
      "itemtype": "method",
      "name": "equal",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "value",
          "description": "",
          "type": "String|Number|Object"
        }
      ],
      "return": {
        "description": "computed property which returns true if the\noriginal value for property is equal to the given value.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 528,
      "description": "A computed property that returns true if the provided dependent property is\ngreater than the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { gt } from '@ember/object/computed';\n\nclass Hamster {\n  @gt('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 11);\nhamster.hasTooManyBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { gt } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  hasTooManyBananas: gt('numBananas', 10)\n});\n\nlet hamster = Hamster.create();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 11);\nhamster.hasTooManyBananas; // true\n```",
      "itemtype": "method",
      "name": "gt",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "value",
          "description": "",
          "type": "Number"
        }
      ],
      "return": {
        "description": "computed property which returns true if the\noriginal value for property is greater than given value.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 594,
      "description": "A computed property that returns true if the provided dependent property is\ngreater than or equal to the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { gte } from '@ember/object/computed';\n\nclass Hamster {\n  @gte('numBananas', 10) hasTooManyBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 10);\nhamster.hasTooManyBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { gte } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  hasTooManyBananas: gte('numBananas', 10)\n});\n\nlet hamster = Hamster.create();\n\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.hasTooManyBananas; // false\n\nset(hamster, 'numBananas', 10);\nhamster.hasTooManyBananas; // true\n```",
      "itemtype": "method",
      "name": "gte",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "value",
          "description": "",
          "type": "Number"
        }
      ],
      "return": {
        "description": "computed property which returns true if the\noriginal value for property is greater or equal then given value.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 660,
      "description": "A computed property that returns true if the provided dependent property is\nless than the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { lt } from '@ember/object/computed';\n\nclass Hamster {\n  @lt('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 2);\nhamster.needsMoreBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { lt } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  needsMoreBananas: lt('numBananas', 3)\n});\n\nlet hamster = Hamster.create();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 2);\nhamster.needsMoreBananas; // true\n```",
      "itemtype": "method",
      "name": "lt",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "value",
          "description": "",
          "type": "Number"
        }
      ],
      "return": {
        "description": "computed property which returns true if the\noriginal value for property is less then given value.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 726,
      "description": "A computed property that returns true if the provided dependent property is\nless than or equal to the provided value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { lte } from '@ember/object/computed';\n\nclass Hamster {\n  @lte('numBananas', 3) needsMoreBananas;\n}\n\nlet hamster = new Hamster();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 5);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // true\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { lte } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  needsMoreBananas: lte('numBananas', 3)\n});\n\nlet hamster = Hamster.create();\n\nhamster.needsMoreBananas; // true\n\nset(hamster, 'numBananas', 5);\nhamster.needsMoreBananas; // false\n\nset(hamster, 'numBananas', 3);\nhamster.needsMoreBananas; // true\n```",
      "itemtype": "method",
      "name": "lte",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "value",
          "description": "",
          "type": "Number"
        }
      ],
      "return": {
        "description": "computed property which returns true if the\noriginal value for property is less or equal than given value.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 792,
      "description": "A computed property that performs a logical `and` on the original values for\nthe provided dependent properties.\n\nYou may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first falsy value or last\ntruthy value just like JavaScript's `&&` operator.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { and } from '@ember/object/computed';\n\nclass Hamster {\n  @and('hasTent', 'hasBackpack') readyForCamp;\n  @and('hasWalkingStick', 'hasBackpack') readyForHike;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForCamp; // false\n\nset(tomster, 'hasTent', true);\ntomster.readyForCamp; // false\n\nset(tomster, 'hasBackpack', true);\ntomster.readyForCamp; // true\n\nset(tomster, 'hasBackpack', 'Yes');\ntomster.readyForCamp; // 'Yes'\n\nset(tomster, 'hasWalkingStick', null);\ntomster.readyForHike; // null\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { and } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  readyForCamp: and('hasTent', 'hasBackpack'),\n  readyForHike: and('hasWalkingStick', 'hasBackpack')\n});\n\nlet tomster = Hamster.create();\n\ntomster.readyForCamp; // false\n\nset(tomster, 'hasTent', true);\ntomster.readyForCamp; // false\n\nset(tomster, 'hasBackpack', true);\ntomster.readyForCamp; // true\n\nset(tomster, 'hasBackpack', 'Yes');\ntomster.readyForCamp; // 'Yes'\n\nset(tomster, 'hasWalkingStick', null);\ntomster.readyForHike; // null\n```",
      "itemtype": "method",
      "name": "and",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "computed property which performs a logical `and` on\nthe values of all the original values for properties.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 866,
      "description": "A computed property which performs a logical `or` on the original values for\nthe provided dependent properties.\n\nYou may pass in more than two properties and even use property brace\nexpansion.  The computed property will return the first truthy value or last\nfalsy value just like JavaScript's `||` operator.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { or } from '@ember/object/computed';\n\nclass Hamster {\n  @or('hasJacket', 'hasUmbrella') readyForRain;\n  @or('hasSunscreen', 'hasUmbrella') readyForBeach;\n}\n\nlet tomster = new Hamster();\n\ntomster.readyForRain; // undefined\n\nset(tomster, 'hasUmbrella', true);\ntomster.readyForRain; // true\n\nset(tomster, 'hasJacket', 'Yes');\ntomster.readyForRain; // 'Yes'\n\nset(tomster, 'hasSunscreen', 'Check');\ntomster.readyForBeach; // 'Check'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { or } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  readyForRain: or('hasJacket', 'hasUmbrella'),\n  readyForBeach: or('hasSunscreen', 'hasUmbrella')\n});\n\nlet tomster = Hamster.create();\n\ntomster.readyForRain; // undefined\n\nset(tomster, 'hasUmbrella', true);\ntomster.readyForRain; // true\n\nset(tomster, 'hasJacket', 'Yes');\ntomster.readyForRain; // 'Yes'\n\nset(tomster, 'hasSunscreen', 'Check');\ntomster.readyForBeach; // 'Check'\n```",
      "itemtype": "method",
      "name": "or",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "computed property which performs a logical `or` on\nthe values of all the original values for properties.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 934,
      "description": "Creates a new property that is an alias for another property on an object.\nCalls to `get` or `set` this property behave as though they were called on the\noriginal property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { alias } from '@ember/object/computed';\n\nclass Person {\n  name = 'Alex Matchneer';\n\n  @alias('name') nomen;\n}\n\nlet alex = new Person();\n\nalex.nomen; // 'Alex Matchneer'\nalex.name;  // 'Alex Matchneer'\n\nset(alex, 'nomen', '@machty');\nalex.name;  // '@machty'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { alias } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  name: 'Alex Matchneer',\n\n  nomen: alias('name')\n});\n\nlet alex = Person.create();\n\nalex.nomen; // 'Alex Matchneer'\nalex.name;  // 'Alex Matchneer'\n\nset(alex, 'nomen', '@machty');\nalex.name;  // '@machty'\n```",
      "itemtype": "method",
      "name": "alias",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which creates an alias to the\noriginal value for property.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 990,
      "description": "Where `computed.alias` aliases `get` and `set`, and allows for bidirectional\ndata flow, `computed.oneWay` only provides an aliased `get`. The `set` will\nnot mutate the upstream property, rather causes the current property to become\nthe value set. This causes the downstream property to permanently diverge from\nthe upstream property.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { oneWay }from '@ember/object/computed';\n\nclass User {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @oneWay('firstName') nickName;\n}\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear');\nteddy.firstName; // 'Teddy'\nteddy.nickName; // 'TeddyBear'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { oneWay } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  firstName: null,\n  lastName: null,\n\n  nickName: oneWay('firstName')\n});\n\nlet teddy = User.create({\n  firstName: 'Teddy',\n  lastName: 'Zeenny'\n});\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // 'TeddyBear'\nteddy.firstName; // 'Teddy'\nteddy.nickName; // 'TeddyBear'\n```",
      "itemtype": "method",
      "name": "oneWay",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which creates a one way computed\nproperty to the original value for property.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 1063,
      "description": "This is a more semantically meaningful alias of `computed.oneWay`, whose name\nis somewhat ambiguous as to which direction the data flows.",
      "itemtype": "method",
      "name": "reads",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which creates a one way computed\n  property to the original value for property.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 1076,
      "description": "Where `computed.oneWay` provides oneWay bindings, `computed.readOnly` provides\na readOnly one way binding. Very often when using `computed.oneWay` one does\nnot also want changes to propagate back up, as they will replace the value.\n\nThis prevents the reverse flow, and also throws an exception when it occurs.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { readOnly } from '@ember/object/computed';\n\nclass User {\n  constructor(firstName, lastName) {\n    set(this, 'firstName', firstName);\n    set(this, 'lastName', lastName);\n  }\n\n  @readOnly('firstName') nickName;\n});\n\nlet teddy = new User('Teddy', 'Zeenny');\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // throws Exception\n// throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n\nteddy.firstName; // 'Teddy'\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { readOnly } from '@ember/object/computed';\n\nlet User = EmberObject.extend({\n  firstName: null,\n  lastName: null,\n\n  nickName: readOnly('firstName')\n});\n\nlet teddy = User.create({\n  firstName: 'Teddy',\n  lastName:  'Zeenny'\n});\n\nteddy.nickName; // 'Teddy'\n\nset(teddy, 'nickName', 'TeddyBear'); // throws Exception\n// throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`\n\nteddy.firstName; // 'Teddy'\n```",
      "itemtype": "method",
      "name": "readOnly",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computed property which creates a one way computed\nproperty to the original value for property.",
        "type": "ComputedProperty"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/computed_macros.js",
      "line": 1152,
      "description": "Creates a new property that is an alias for another property on an object.\nCalls to `get` or `set` this property behave as though they were called on the\noriginal property, but also print a deprecation warning.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { deprecatingAlias } from '@ember/object/computed';\n\nclass Hamster {\n  @deprecatingAlias('cavendishCount', {\n    id: 'hamster.deprecate-banana',\n    until: '3.0.0'\n  })\n  bananaCount;\n}\n\nlet hamster = new Hamster();\n\nset(hamster, 'bananaCount', 5); // Prints a deprecation warning.\nhamster.cavendishCount; // 5\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { deprecatingAlias } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  bananaCount: deprecatingAlias('cavendishCount', {\n    id: 'hamster.deprecate-banana',\n    until: '3.0.0'\n  })\n});\n\nlet hamster = Hamster.create();\n\nset(hamster, 'bananaCount', 5); // Prints a deprecation warning.\nhamster.cavendishCount; // 5\n```",
      "itemtype": "method",
      "name": "deprecatingAlias",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "options",
          "description": "Options for `deprecate`.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "computed property which creates an alias with a\ndeprecation to the original value for property.",
        "type": "ComputedProperty"
      },
      "since": "1.7.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 56,
      "description": "A computed property that returns the sum of the values in the dependent array.\n\nExample:\n\n```javascript\nimport { sum } from '@ember/object/computed';\n\nclass Invoice {\n  lineItems = [1.00, 2.50, 9.99];\n\n  @sum('lineItems') total;\n}\n\nlet invoice = new Invoice();\n\ninvoice.total; // 13.49\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { sum } from '@ember/object/computed';\n\nlet Invoice = EmberObject.extend({\n  lineItems: [1.00, 2.50, 9.99],\n\n  total: sum('lineItems')\n})\n\nlet invoice = Invoice.create();\n\ninvoice.total; // 13.49\n```",
      "itemtype": "method",
      "name": "sum",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computes the sum of all values in the\ndependentKey's array",
        "type": "ComputedProperty"
      },
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 110,
      "description": "A computed property that calculates the maximum value in the dependent array.\nThis will return `-Infinity` when the dependent array is empty.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy, max } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n  @max('childAges') maxChildAge;\n}\n\nlet lordByron = new Person();\n\nlordByron.maxChildAge; // -Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.maxChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.maxChildAge; // 8\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { mapBy, max } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  childAges: mapBy('children', 'age'),\n  maxChildAge: max('childAges')\n});\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.maxChildAge; // -Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.maxChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.maxChildAge; // 8\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe max of a list of Date objects will be the highest timestamp as a `Number`.\nThis behavior is consistent with `Math.max`.",
      "itemtype": "method",
      "name": "max",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computes the largest value in the dependentKey's\narray",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 210,
      "description": "A computed property that calculates the minimum value in the dependent array.\nThis will return `Infinity` when the dependent array is empty.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy, min } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n  @min('childAges') minChildAge;\n}\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.minChildAge; // Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.minChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.minChildAge; // 5\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { mapBy, min } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  childAges: mapBy('children', 'age'),\n  minChildAge: min('childAges')\n});\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.minChildAge; // Infinity\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.minChildAge; // 7\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.minChildAge; // 5\n```\n\nIf the types of the arguments are not numbers, they will be converted to\nnumbers and the type of the return value will always be `Number`. For example,\nthe min of a list of Date objects will be the lowest timestamp as a `Number`.\nThis behavior is consistent with `Math.min`.",
      "itemtype": "method",
      "name": "min",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computes the smallest value in the dependentKey's array",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 309,
      "description": "Returns an array mapped via the callback\n\nThe callback method you provide should have the following signature:\n- `item` is the current item in the iteration.\n- `index` is the integer index of the current item in the iteration.\n\n```javascript\nfunction mapCallback(item, index);\n```\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @map('chores', function(chore, index) {\n    return `${chore.toUpperCase()}!`;\n  })\n  excitingChores;\n});\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  excitingChores: map('chores', function(chore, index) {\n    return `${chore.toUpperCase()}!`;\n  })\n});\n\nlet hamster = Hamster.create({\n  chores: ['clean', 'write more unit tests']\n});\n\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```\n\nYou can optionally pass an array of additional dependent keys as the second\nparameter to the macro, if your map function relies on any external values:\n\n```javascript\nimport { set } from '@ember/object';\nimport { map } from '@ember/object/computed';\n\nclass Hamster {\n  shouldUpperCase = false;\n\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @map('chores', ['shouldUpperCase'], function(chore, index) {\n    if (this.shouldUpperCase) {\n      return `${chore.toUpperCase()}!`;\n    } else {\n      return `${chore}!`;\n    }\n  })\n  excitingChores;\n}\n\nlet hamster = new Hamster(['clean', 'write more unit tests']);\n\nhamster.excitingChores; // ['clean!', 'write more unit tests!']\n\nset(hamster, 'shouldUpperCase', true);\nhamster.excitingChores; // ['CLEAN!', 'WRITE MORE UNIT TESTS!']\n```",
      "itemtype": "method",
      "name": "map",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "additionalDependentKeys",
          "description": "optional array of additional\ndependent keys",
          "type": "Array",
          "optional": true
        },
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "an array mapped via the callback",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 429,
      "description": "Returns an array mapped to the specified key.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { mapBy } from '@ember/object/computed';\n\nclass Person {\n  children = [];\n\n  @mapBy('children', 'age') childAges;\n}\n\nlet lordByron = new Person();\n\nlordByron.childAges; // []\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.childAges; // [7]\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.childAges; // [7, 5, 8]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { mapBy } from '@ember/object/computed';\n\nlet Person = EmberObject.extend({\n  childAges: mapBy('children', 'age')\n});\n\nlet lordByron = Person.create({ children: [] });\n\nlordByron.childAges; // []\n\nset(lordByron, 'children', [\n  {\n    name: 'Augusta Ada Byron',\n    age: 7\n  }\n]);\nlordByron.childAges; // [7]\n\nset(lordByron, 'children', [\n  ...lordByron.children,\n  {\n    name: 'Allegra Byron',\n    age: 5\n  }, {\n    name: 'Elizabeth Medora Leigh',\n    age: 8\n  }\n]);\nlordByron.childAges; // [7, 5, 8]\n```",
      "itemtype": "method",
      "name": "mapBy",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "propertyKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "an array mapped to the specified key",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 531,
      "description": "Filters the array by the callback.\n\nThe callback method you provide should have the following signature:\n- `item` is the current item in the iteration.\n- `index` is the integer index of the current item in the iteration.\n- `array` is the dependant array itself.\n\n```javascript\nfunction filterCallback(item, index, array);\n```\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filter('chores', function(chore, index, array) {\n    return !chore.done;\n  })\n  remainingChores;\n}\n\nlet hamster = Hamster.create([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  remainingChores: filter('chores', function(chore, index, array) {\n    return !chore.done;\n  })\n});\n\nlet hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n```\n\nYou can also use `@each.property` in your dependent key, the callback will\nstill use the underlying array:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filter('chores.@each.done', function(chore, index, array) {\n    return !chore.done;\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\nhamster.remainingChores; // [{name: 'write more unit tests', done: false}]\n\nset(hamster.chores[2], 'done', true);\nhamster.remainingChores; // []\n```\n\nFinally, you can optionally pass an array of additional dependent keys as the\nsecond parameter to the macro, if your filter function relies on any external\nvalues:\n\n```javascript\nimport { filter } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  doneKey = 'finished';\n\n  @filter('chores', ['doneKey'], function(chore, index, array) {\n    return !chore[this.doneKey];\n  })\n  remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', finished: true },\n  { name: 'clean', finished: true },\n  { name: 'write more unit tests', finished: false }\n]);\n\nhamster.remainingChores; // [{name: 'write more unit tests', finished: false}]\n```",
      "itemtype": "method",
      "name": "filter",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "additionalDependentKeys",
          "description": "optional array of additional dependent keys",
          "type": "Array",
          "optional": true
        },
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "return": {
        "description": "the filtered array",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 685,
      "description": "Filters the array by the property and value.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { filterBy } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(chores) {\n    set(this, 'chores', chores);\n  }\n\n  @filterBy('chores', 'done', false) remainingChores;\n}\n\nlet hamster = new Hamster([\n  { name: 'cook', done: true },\n  { name: 'clean', done: true },\n  { name: 'write more unit tests', done: false }\n]);\n\nhamster.remainingChores; // [{ name: 'write more unit tests', done: false }]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { filterBy } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  remainingChores: filterBy('chores', 'done', false)\n});\n\nlet hamster = Hamster.create({\n  chores: [\n    { name: 'cook', done: true },\n    { name: 'clean', done: true },\n    { name: 'write more unit tests', done: false }\n  ]\n});\n\nhamster.remainingChores; // [{ name: 'write more unit tests', done: false }]\n```",
      "itemtype": "method",
      "name": "filterBy",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "propertyKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "value",
          "description": "",
          "type": "*"
        }
      ],
      "return": {
        "description": "the filtered array",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 762,
      "description": "A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { uniq } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits) {\n    set(this, 'fruits', fruits);\n  }\n\n  @uniq('fruits') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  'banana',\n  'grape',\n  'kale',\n  'banana'\n]);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { uniq } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: uniq('fruits')\n});\n\nlet hamster = Hamster.create({\n  fruits: [\n    'banana',\n    'grape',\n    'kale',\n    'banana'\n  ]\n});\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale']\n```",
      "itemtype": "method",
      "name": "uniq",
      "static": 1,
      "params": [
        {
          "name": "propertyKey",
          "description": "",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "computes a new array with all the\nunique elements from the dependent array",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 850,
      "description": "A computed property which returns a new array with all the unique elements\nfrom an array, with uniqueness determined by specific key.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { uniqBy } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits) {\n    set(this, 'fruits', fruits);\n  }\n\n  @uniqBy('fruits', 'id') uniqueFruits;\n}\n\nlet hamster = new Hamster([\n  { id: 1, 'banana' },\n  { id: 2, 'grape' },\n  { id: 3, 'peach' },\n  { id: 1, 'banana' }\n]);\n\nhamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { uniqBy } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: uniqBy('fruits', 'id')\n});\n\nlet hamster = Hamster.create({\n  fruits: [\n    { id: 1, 'banana' },\n    { id: 2, 'grape' },\n    { id: 3, 'peach' },\n    { id: 1, 'banana' }\n  ]\n});\n\nhamster.uniqueFruits; // [ { id: 1, 'banana' }, { id: 2, 'grape' }, { id: 3, 'peach' }]\n```",
      "itemtype": "method",
      "name": "uniqBy",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "propertyKey",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computes a new array with all the\nunique elements from the dependent array",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 926,
      "description": "A computed property which returns a new array with all the unique elements\nfrom one or more dependent arrays.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { union } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(fruits, vegetables) {\n    set(this, 'fruits', fruits);\n    set(this, 'vegetables', vegetables);\n  }\n\n  @union('fruits', 'vegetables') uniqueFruits;\n});\n\nlet hamster = new, Hamster(\n  [\n    'banana',\n    'grape',\n    'kale',\n    'banana',\n    'tomato'\n  ],\n  [\n    'tomato',\n    'carrot',\n    'lettuce'\n  ]\n);\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { union } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  uniqueFruits: union('fruits', 'vegetables')\n});\n\nlet hamster = Hamster.create({\n  fruits: [\n    'banana',\n    'grape',\n    'kale',\n    'banana',\n    'tomato'\n  ],\n  vegetables: [\n    'tomato',\n    'carrot',\n    'lettuce'\n  ]\n});\n\nhamster.uniqueFruits; // ['banana', 'grape', 'kale', 'tomato', 'carrot', 'lettuce']\n```",
      "itemtype": "method",
      "name": "union",
      "static": 1,
      "params": [
        {
          "name": "propertyKey",
          "description": "",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "computes a new array with all the unique elements\nfrom one or more dependent arrays.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 1001,
      "description": "A computed property which returns a new array with all the elements\ntwo or more dependent arrays have in common.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { intersect } from '@ember/object/computed';\n\nclass FriendGroups {\n  constructor(adaFriends, charlesFriends) {\n    set(this, 'adaFriends', adaFriends);\n    set(this, 'charlesFriends', charlesFriends);\n  }\n\n  @intersect('adaFriends', 'charlesFriends') friendsInCommon;\n}\n\nlet groups = new FriendGroups(\n  ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n);\n\ngroups.friendsInCommon; // ['William King', 'Mary Somerville']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { intersect } from '@ember/object/computed';\n\nlet FriendGroups = EmberObject.extend({\n  friendsInCommon: intersect('adaFriends', 'charlesFriends')\n});\n\nlet groups = FriendGroups.create({\n  adaFriends: ['Charles Babbage', 'John Hobhouse', 'William King', 'Mary Somerville'],\n  charlesFriends: ['William King', 'Mary Somerville', 'Ada Lovelace', 'George Peacock']\n});\n\ngroups.friendsInCommon; // ['William King', 'Mary Somerville']\n```",
      "itemtype": "method",
      "name": "intersect",
      "static": 1,
      "params": [
        {
          "name": "propertyKey",
          "description": "",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "computes a new array with all the duplicated\nelements from the dependent arrays",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 1093,
      "description": "A computed property which returns a new array with all the properties from the\nfirst dependent array that are not in the second dependent array.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { setDiff } from '@ember/object/computed';\n\nclass Hamster {\n  constructor(likes, fruits) {\n    set(this, 'likes', likes);\n    set(this, 'fruits', fruits);\n  }\n\n  @setDiff('likes', 'fruits') wants;\n}\n\nlet hamster = new Hamster(\n  [\n    'banana',\n    'grape',\n    'kale'\n  ],\n  [\n    'grape',\n    'kale',\n  ]\n);\n\nhamster.wants; // ['banana']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { setDiff } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  wants: setDiff('likes', 'fruits')\n});\n\nlet hamster = Hamster.create({\n  likes: [\n    'banana',\n    'grape',\n    'kale'\n  ],\n  fruits: [\n    'grape',\n    'kale',\n  ]\n});\n\nhamster.wants; // ['banana']\n```",
      "itemtype": "method",
      "name": "setDiff",
      "static": 1,
      "params": [
        {
          "name": "setAProperty",
          "description": "",
          "type": "String"
        },
        {
          "name": "setBProperty",
          "description": "",
          "type": "String"
        }
      ],
      "return": {
        "description": "computes a new array with all the items from the\nfirst dependent array that are not in the second dependent array",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 1188,
      "description": "A computed property that returns the array of values for the provided\ndependent properties.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { collect } from '@ember/object/computed';\n\nclass Hamster {\n  @collect('hat', 'shirt') clothes;\n}\n\nlet hamster = new Hamster();\n\nhamster.clothes; // [null, null]\n\nset(hamster, 'hat', 'Camp Hat');\nset(hamster, 'shirt', 'Camp Shirt');\nhamster.clothes; // ['Camp Hat', 'Camp Shirt']\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject, { set } from '@ember/object';\nimport { collect } from '@ember/object/computed';\n\nlet Hamster = EmberObject.extend({\n  clothes: collect('hat', 'shirt')\n});\n\nlet hamster = Hamster.create();\n\nhamster.clothes; // [null, null]\n\nset(hamster, 'hat', 'Camp Hat');\nset(hamster, 'shirt', 'Camp Shirt');\nhamster.clothes; // ['Camp Hat', 'Camp Shirt']\n```",
      "itemtype": "method",
      "name": "collect",
      "static": 1,
      "params": [
        {
          "name": "dependentKey",
          "description": "",
          "type": "String",
          "multiple": true
        }
      ],
      "return": {
        "description": "computed property which maps values of all passed\nin properties to an array.",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/lib/computed/reduce_computed_macros.js",
      "line": 1258,
      "description": "A computed property which returns a new array with all the properties from the\nfirst dependent array sorted based on a property or sort function. The sort\nmacro can be used in two different ways:\n\n1. By providing a sort callback function\n2. By providing an array of keys to sort the array\n\nIn the first form, the callback method you provide should have the following\nsignature:\n\n```javascript\nfunction sortCallback(itemA, itemB);\n```\n\n- `itemA` the first item to compare.\n- `itemB` the second item to compare.\n\nThis function should return negative number (e.g. `-1`) when `itemA` should\ncome before `itemB`. It should return positive number (e.g. `1`) when `itemA`\nshould come after `itemB`. If the `itemA` and `itemB` are equal this function\nshould return `0`.\n\nTherefore, if this function is comparing some numeric values, simple `itemA -\nitemB` or `itemA.get( 'foo' ) - itemB.get( 'foo' )` can be used instead of\nseries of `if`.\n\nExample:\n\n```javascript\nimport { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using a custom sort function\n  @sort('todos', function(a, b){\n    if (a.priority > b.priority) {\n      return 1;\n    } else if (a.priority < b.priority) {\n      return -1;\n    }\n\n    return 0;\n  })\n  priorityTodos;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nClassic Class Example:\n\n```javascript\nimport EmberObject from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nlet ToDoList = EmberObject.extend({\n  // using a custom sort function\n  priorityTodos: sort('todos', function(a, b){\n    if (a.priority > b.priority) {\n      return 1;\n    } else if (a.priority < b.priority) {\n      return -1;\n    }\n\n    return 0;\n  })\n});\n\nlet todoList = ToDoList.create({\n  todos: [\n    { name: 'Unit Test', priority: 2 },\n    { name: 'Documentation', priority: 3 },\n    { name: 'Release', priority: 1 }\n  ]\n});\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nYou can also optionally pass an array of additional dependent keys as the\nsecond parameter, if your sort function is dependent on additional values that\ncould changes:\n\n```js\nimport EmberObject, { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  sortKey = 'priority';\n\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using a custom sort function\n  @sort('todos', ['sortKey'], function(a, b){\n    if (a[this.sortKey] > b[this.sortKey]) {\n      return 1;\n    } else if (a[this.sortKey] < b[this.sortKey]) {\n      return -1;\n    }\n\n    return 0;\n  })\n  sortedTodos;\n});\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.priorityTodos; // [{ name:'Release', priority:1 }, { name:'Unit Test', priority:2 }, { name:'Documentation', priority:3 }]\n```\n\nIn the second form, you should provide the key of the array of sort values as\nthe second parameter:\n\n```javascript\nimport { set } from '@ember/object';\nimport { sort } from '@ember/object/computed';\n\nclass ToDoList {\n  constructor(todos) {\n    set(this, 'todos', todos);\n  }\n\n  // using standard ascending sort\n  todosSorting = ['name'];\n  @sort('todos', 'todosSorting') sortedTodos;\n\n  // using descending sort\n  todosSortingDesc = ['name:desc'];\n  @sort('todos', 'todosSortingDesc') sortedTodosDesc;\n}\n\nlet todoList = new ToDoList([\n  { name: 'Unit Test', priority: 2 },\n  { name: 'Documentation', priority: 3 },\n  { name: 'Release', priority: 1 }\n]);\n\ntodoList.sortedTodos; // [{ name:'Documentation', priority:3 }, { name:'Release', priority:1 }, { name:'Unit Test', priority:2 }]\ntodoList.sortedTodosDesc; // [{ name:'Unit Test', priority:2 }, { name:'Release', priority:1 }, { name:'Documentation', priority:3 }]\n```",
      "itemtype": "method",
      "name": "sort",
      "static": 1,
      "params": [
        {
          "name": "itemsKey",
          "description": "",
          "type": "String"
        },
        {
          "name": "sortDefinitionOrDependentKeys",
          "description": "The key of the sort definition (an array of sort properties),\nthe sort function, or an array of additional dependent keys",
          "type": "String|Function|Array"
        },
        {
          "name": "sortDefinition",
          "description": "the sort function (when used with additional dependent keys)",
          "type": "Function?"
        }
      ],
      "return": {
        "description": "computes a new sorted array based on the sort\nproperty array or callback function",
        "type": "ComputedProperty"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/object/computed",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/compat.ts",
      "line": 39,
      "description": "`@dependentKeyCompat` is decorator that can be used on _native getters_ that\nuse tracked properties. It exposes the getter to Ember's classic computed\nproperty and observer systems, so they can watch it for changes. It can be\nused in both native and classic classes.\n\nNative Example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport { computed, set } from '@ember/object';\n\nclass Person {\n  @tracked firstName;\n  @tracked lastName;\n\n  @dependentKeyCompat\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n\nclass Profile {\n  constructor(person) {\n    set(this, 'person', person);\n  }\n\n  @computed('person.fullName')\n  get helloMessage() {\n    return `Hello, ${this.person.fullName}!`;\n  }\n}\n```\n\nClassic Example:\n\n```js\nimport { tracked } from '@glimmer/tracking';\nimport { dependentKeyCompat } from '@ember/object/compat';\nimport EmberObject, { computed, observer, set } from '@ember/object';\n\nconst Person = EmberObject.extend({\n  firstName: tracked(),\n  lastName: tracked(),\n\n  fullName: dependentKeyCompat(function() {\n    return `${this.firstName} ${this.lastName}`;\n  }),\n});\n\nconst Profile = EmberObject.extend({\n  person: null,\n\n  helloMessage: computed('person.fullName', function() {\n    return `Hello, ${this.person.fullName}!`;\n  }),\n\n  onNameUpdated: observer('person.fullName', function() {\n    console.log('person name updated!');\n  }),\n});\n```\n\n`dependentKeyCompat()` can receive a getter function or an object containing\n`get`/`set` methods when used in classic classes, like computed properties.\n\nIn general, only properties which you _expect_ to be watched by older,\nuntracked clases should be marked as dependency compatible. The decorator is\nmeant as an interop layer for parts of Ember's older classic APIs, and should\nnot be applied to every possible getter/setter in classes. The number of\ndependency compatible getters should be _minimized_ wherever possible. New\napplication code should not need to use `@dependentKeyCompat`, since it is\nonly for interoperation with older code.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "dependentKeyCompat",
      "static": 1,
      "params": [
        {
          "name": "desc",
          "description": "A property descriptor containing\n                                           the getter and setter (when used in\n                                           classic classes)",
          "type": "PropertyDescriptor|undefined"
        }
      ],
      "return": {
        "description": "property decorator instance",
        "type": "PropertyDecorator"
      },
      "class": "@ember/object/compat",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/object/index.js",
      "line": 5,
      "description": "Decorator that turns the target function into an Action which can be accessed\ndirectly by reference.\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n```hbs\n<!-- template.hbs -->\n<button {{action this.toggleShowing}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nDecorated actions also interop with the string style template actions:\n\n```hbs\n<!-- template.hbs -->\n<button {{action \"toggleShowing\"}}>Show tooltip</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nIt also binds the function directly to the instance, so it can be used in any\ncontext and will correctly refer to the class it came from:\n\n```hbs\n<!-- template.hbs -->\n<button\n  {{did-insert this.toggleShowing}}\n  {{on \"click\" this.toggleShowing}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThis can also be used in JavaScript code directly:\n\n```js\nimport Component from '@ember/component';\nimport { action, set } from '@ember/object';\n\nexport default class Tooltip extends Component {\n  constructor() {\n    super(...arguments);\n\n    // this.toggleShowing is still bound correctly when added to\n    // the event listener\n    document.addEventListener('click', this.toggleShowing);\n  }\n\n  @action\n  toggleShowing() {\n    set(this, 'isShowing', !this.isShowing);\n  }\n}\n```\n\nThis is considered best practice, since it means that methods will be bound\ncorrectly no matter where they are used. By contrast, the `{{action}}` helper\nand modifier can also be used to bind context, but it will be required for\nevery usage of the method:\n\n```hbs\n<!-- template.hbs -->\n<button\n  {{did-insert (action this.toggleShowing)}}\n  {{on \"click\" (action this.toggleShowing)}}\n>\n  Show tooltip\n</button>\n\n{{#if isShowing}}\n  <div class=\"tooltip\">\n    I'm a tooltip!\n  </div>\n{{/if}}\n```\n\nThey also do not have equivalents in JavaScript directly, so they cannot be\nused for other situations where binding would be useful.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "action",
      "static": 1,
      "params": [
        {
          "name": "callback",
          "description": "The function to turn into an action,\n                                     when used in classic classes",
          "type": "Function|undefined"
        }
      ],
      "return": {
        "description": "property decorator instance",
        "type": "PropertyDecorator"
      },
      "class": "@ember/object",
      "module": "@ember/object"
    },
    {
      "file": "packages/@ember/polyfills/lib/assign.ts",
      "line": 9,
      "description": "Copy properties from a source object to a target object. Source arguments remain unchanged.\n\n```javascript\nimport { assign } from '@ember/polyfills';\n\nvar a = { first: 'Yehuda' };\nvar b = { last: 'Katz' };\nvar c = { company: 'Other Company' };\nvar d = { company: 'Tilde Inc.' };\nassign(a, b, c, d); // a === { first: 'Yehuda', last: 'Katz', company: 'Tilde Inc.' };\n```",
      "itemtype": "method",
      "name": "assign",
      "params": [
        {
          "name": "target",
          "description": "The object to assign into",
          "type": "Object"
        },
        {
          "name": "args",
          "description": "The objects to copy properties from",
          "type": "Object",
          "multiple": true
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "static": 1,
      "class": "@ember/polyfills",
      "module": "@ember/polyfills"
    },
    {
      "file": "packages/@ember/polyfills/lib/merge.ts",
      "line": 9,
      "description": "Merge the contents of two objects together into the first object.\n\n```javascript\nimport { merge } from '@ember/polyfills';\n\nmerge({ first: 'Tom' }, { last: 'Dale' }); // { first: 'Tom', last: 'Dale' }\nvar a = { first: 'Yehuda' };\nvar b = { last: 'Katz' };\nmerge(a, b); // a == { first: 'Yehuda', last: 'Katz' }, b == { last: 'Katz' }\n```",
      "itemtype": "method",
      "name": "merge",
      "static": 1,
      "params": [
        {
          "name": "original",
          "description": "The object to merge into",
          "type": "Object"
        },
        {
          "name": "updates",
          "description": "The object to copy properties from",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "Object"
      },
      "deprecated": true,
      "access": "public",
      "tagname": "",
      "class": "@ember/polyfills",
      "module": "@ember/polyfills"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 31,
      "description": "Array of named queues. This array determines the order in which queues\nare flushed at the end of the RunLoop. You can define your own queues by\nsimply adding the queue name to this array. Normally you should not need\nto inspect or modify this property.",
      "itemtype": "property",
      "name": "queues",
      "type": "Array",
      "default": "['actions', 'destroy']",
      "access": "private",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/polyfills"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 74,
      "description": "Runs the passed target and method inside of a RunLoop, ensuring any\ndeferred actions including bindings and views updates are flushed at the\nend.\n\nNormally you should not need to invoke this method yourself. However if\nyou are implementing raw event handlers when interfacing with other\nlibraries or plugins, you should probably wrap all of your code inside this\ncall.\n\n```javascript\nimport { run } from '@ember/runloop';\n\nrun(function() {\n  // code to be executed within a RunLoop\n});\n```",
      "itemtype": "method",
      "name": "run",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to call",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Any additional arguments you wish to pass to the method.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "return value from invoking the passed function.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 109,
      "description": "If no run-loop is present, it creates a new one. If a run loop is\npresent it will queue itself to run on the existing run-loops action\nqueue.\n\nPlease note: This is not for normal usage, and should be used sparingly.\n\nIf invoked when not within a run loop:\n\n```javascript\nimport { join } from '@ember/runloop';\n\njoin(function() {\n  // creates a new run-loop\n});\n```\n\nAlternatively, if called within an existing run loop:\n\n```javascript\nimport { run, join } from '@ember/runloop';\n\nrun(function() {\n  // creates a new run-loop\n\n  join(function() {\n    // joins with the existing run-loop, and queues for invocation on\n    // the existing run-loops action queue.\n  });\n});\n```",
      "itemtype": "method",
      "name": "join",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to call",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Any additional arguments you wish to pass to the method.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Return value from invoking the passed function. Please note,\nwhen called within an existing loop, no return value is possible.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 157,
      "description": "Allows you to specify which context to call the specified function in while\nadding the execution of that function to the Ember run loop. This ability\nmakes this method a great way to asynchronously integrate third-party libraries\ninto your Ember application.\n\n`bind` takes two main arguments, the desired context and the function to\ninvoke in that context. Any additional arguments will be supplied as arguments\nto the function that is passed in.\n\nLet's use the creation of a TinyMCE component as an example. Currently,\nTinyMCE provides a setup configuration option we can use to do some processing\nafter the TinyMCE instance is initialized but before it is actually rendered.\nWe can use that setup option to do some additional setup for our component.\nThe component itself could look something like the following:\n\n```app/components/rich-text-editor.js\nimport Component from '@ember/component';\nimport { on } from '@ember/object/evented';\nimport { bind } from '@ember/runloop';\n\nexport default Component.extend({\n  initializeTinyMCE: on('didInsertElement', function() {\n    tinymce.init({\n      selector: '#' + this.$().prop('id'),\n      setup: bind(this, this.setupEditor)\n    });\n  }),\n\n  didInsertElement() {\n    tinymce.init({\n      selector: '#' + this.$().prop('id'),\n      setup: bind(this, this.setupEditor)\n    });\n  }\n\n  setupEditor(editor) {\n    this.set('editor', editor);\n\n    editor.on('change', function() {\n      console.log('content changed!');\n    });\n  }\n});\n```\n\nIn this example, we use `bind` to bind the setupEditor method to the\ncontext of the RichTextEditor component and to have the invocation of that\nmethod be safely handled and executed by the Ember run loop.",
      "itemtype": "method",
      "name": "bind",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to call",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "Method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Any additional arguments you wish to pass to the method.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "returns a new function that will always have a particular context",
        "type": "Function"
      },
      "since": "1.4.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 244,
      "description": "Begins a new RunLoop. Any deferred actions invoked after the begin will\nbe buffered until you invoke a matching call to `end()`. This is\na lower-level way to use a RunLoop instead of using `run()`.\n\n```javascript\nimport { begin, end } from '@ember/runloop';\n\nbegin();\n// code to be executed within a RunLoop\nend();\n```",
      "itemtype": "method",
      "name": "begin",
      "static": 1,
      "return": {
        "description": "",
        "type": "Void"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 267,
      "description": "Ends a RunLoop. This must be called sometime after you call\n`begin()` to flush any deferred actions. This is a lower-level way\nto use a RunLoop instead of using `run()`.\n\n```javascript\nimport { begin, end } from '@ember/runloop';\n\nbegin();\n// code to be executed within a RunLoop\nend();\n```",
      "itemtype": "method",
      "name": "end",
      "static": 1,
      "return": {
        "description": "",
        "type": "Void"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 290,
      "description": "Adds the passed target/method and any optional arguments to the named\nqueue to be executed at the end of the RunLoop. If you have not already\nstarted a RunLoop when calling this method one will be started for you\nautomatically.\n\nAt the end of a RunLoop, any methods scheduled in this way will be invoked.\nMethods will be invoked in an order matching the named queues defined in\nthe `queues` property.\n\n```javascript\nimport { schedule } from '@ember/runloop';\n\nschedule('afterRender', this, function() {\n  // this will be executed in the 'afterRender' queue\n  console.log('scheduled on afterRender queue');\n});\n\nschedule('actions', this, function() {\n  // this will be executed in the 'actions' queue\n  console.log('scheduled on actions queue');\n});\n\n// Note the functions will be run in order based on the run queues order.\n// Output would be:\n//   scheduled on actions queue\n//   scheduled on afterRender queue\n```",
      "itemtype": "method",
      "name": "schedule",
      "static": 1,
      "params": [
        {
          "name": "queue",
          "description": "The name of the queue to schedule against. Default queues is 'actions'",
          "type": "String"
        },
        {
          "name": "target",
          "description": "target object to use as the context when invoking a method.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke. If you pass a string it\n  will be resolved on the target object at the time the scheduled item is\n  invoked allowing you to change the target function.",
          "type": "String|Function"
        },
        {
          "name": "arguments*",
          "description": "Optional arguments to be passed to the queued method.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "*"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 345,
      "description": "Invokes the passed target/method and optional arguments after a specified\nperiod of time. The last parameter of this method must always be a number\nof milliseconds.\n\nYou should use this method whenever you need to run some action after a\nperiod of time instead of using `setTimeout()`. This method will ensure that\nitems that expire during the same script execution cycle all execute\ntogether, which is often more efficient than using a real setTimeout.\n\n```javascript\nimport { later } from '@ember/runloop';\n\nlater(myContext, function() {\n  // code here will execute within a RunLoop in about 500ms with this == myContext\n}, 500);\n```",
      "itemtype": "method",
      "name": "later",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to invoke",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Optional arguments to pass to the timeout.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "wait",
          "description": "Number of milliseconds to wait.",
          "type": "Number"
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "*"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 379,
      "description": "Schedule a function to run one time during the current RunLoop. This is equivalent\n to calling `scheduleOnce` with the \"actions\" queue.",
      "itemtype": "method",
      "name": "once",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "The target of the method to invoke.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke.\n   If you pass a string it will be resolved on the\n   target at the time the method is invoked.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Optional arguments to pass to the timeout.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 399,
      "description": "Schedules a function to run one time in a given queue of the current RunLoop.\nCalling this method with the same queue/target/method combination will have\nno effect (past the initial call).\n\nNote that although you can pass optional arguments these will not be\nconsidered when looking for duplicates. New arguments will replace previous\ncalls.\n\n```javascript\nimport { run, scheduleOnce } from '@ember/runloop';\n\nfunction sayHi() {\n  console.log('hi');\n}\n\nrun(function() {\n  scheduleOnce('afterRender', myContext, sayHi);\n  scheduleOnce('afterRender', myContext, sayHi);\n  // sayHi will only be executed once, in the afterRender queue of the RunLoop\n});\n```\n\nAlso note that for `scheduleOnce` to prevent additional calls, you need to\npass the same function instance. The following case works as expected:\n\n```javascript\nfunction log() {\n  console.log('Logging only once');\n}\n\nfunction scheduleIt() {\n  scheduleOnce('actions', myContext, log);\n}\n\nscheduleIt();\nscheduleIt();\n```\n\nBut this other case will schedule the function multiple times:\n\n```javascript\nimport { scheduleOnce } from '@ember/runloop';\n\nfunction scheduleIt() {\n  scheduleOnce('actions', myContext, function() {\n    console.log('Closure');\n  });\n}\n\nscheduleIt();\nscheduleIt();\n\n// \"Closure\" will print twice, even though we're using `scheduleOnce`,\n// because the function we pass to it won't match the\n// previously scheduled operation.\n```\n\nAvailable queues, and their order, can be found at `queues`",
      "itemtype": "method",
      "name": "scheduleOnce",
      "static": 1,
      "params": [
        {
          "name": "queue",
          "description": "The name of the queue to schedule against. Default queues is 'actions'.",
          "type": "String",
          "optional": true
        },
        {
          "name": "target",
          "description": "The target of the method to invoke.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Optional arguments to pass to the timeout.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 475,
      "description": "Schedules an item to run from within a separate run loop, after\ncontrol has been returned to the system. This is equivalent to calling\n`later` with a wait time of 1ms.\n\n```javascript\nimport { next } from '@ember/runloop';\n\nnext(myContext, function() {\n  // code to be executed in the next run loop,\n  // which will be scheduled after the current one\n});\n```\n\nMultiple operations scheduled with `next` will coalesce\ninto the same later run loop, along with any other operations\nscheduled by `later` that expire right around the same\ntime that `next` operations will fire.\n\nNote that there are often alternatives to using `next`.\nFor instance, if you'd like to schedule an operation to happen\nafter all DOM element operations have completed within the current\nrun loop, you can make use of the `afterRender` run loop queue (added\nby the `ember-views` package, along with the preceding `render` queue\nwhere all the DOM element operations happen).\n\nExample:\n\n```app/components/my-component.js\nimport Component from '@ember/component';\nimport { scheduleOnce } from '@ember/runloop';\n\nexport Component.extend({\n  didInsertElement() {\n    this._super(...arguments);\n    scheduleOnce('afterRender', this, 'processChildElements');\n  },\n\n  processChildElements() {\n    // ... do something with component's child component\n    // elements after they've finished rendering, which\n    // can't be done within this component's\n    // `didInsertElement` hook because that gets run\n    // before the child elements have been added to the DOM.\n  }\n});\n```\n\nOne benefit of the above approach compared to using `next` is\nthat you will be able to perform DOM/CSS operations before unprocessed\nelements are rendered to the screen, which may prevent flickering or\nother artifacts caused by delaying processing until after rendering.\n\nThe other major benefit to the above approach is that `next`\nintroduces an element of non-determinism, which can make things much\nharder to test, due to its reliance on `setTimeout`; it's much harder\nto guarantee the order of scheduled operations when they are scheduled\noutside of the current run loop, i.e. with `next`.",
      "itemtype": "method",
      "name": "next",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to invoke",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke.\n  If you pass a string it will be resolved on the\n  target at the time the method is invoked.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Optional arguments to pass to the timeout.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 550,
      "description": "Cancels a scheduled item. Must be a value returned by `later()`,\n`once()`, `scheduleOnce()`, `next()`, `debounce()`, or\n`throttle()`.\n\n```javascript\nimport {\n  next,\n  cancel,\n  later,\n  scheduleOnce,\n  once,\n  throttle,\n  debounce\n} from '@ember/runloop';\n\nlet runNext = next(myContext, function() {\n  // will not be executed\n});\n\ncancel(runNext);\n\nlet runLater = later(myContext, function() {\n  // will not be executed\n}, 500);\n\ncancel(runLater);\n\nlet runScheduleOnce = scheduleOnce('afterRender', myContext, function() {\n  // will not be executed\n});\n\ncancel(runScheduleOnce);\n\nlet runOnce = once(myContext, function() {\n  // will not be executed\n});\n\ncancel(runOnce);\n\nlet throttle = throttle(myContext, function() {\n  // will not be executed\n}, 1, false);\n\ncancel(throttle);\n\nlet debounce = debounce(myContext, function() {\n  // will not be executed\n}, 1);\n\ncancel(debounce);\n\nlet debounceImmediate = debounce(myContext, function() {\n  // will be executed since we passed in true (immediate)\n}, 100, true);\n\n// the 100ms delay until this method can be called again will be canceled\ncancel(debounceImmediate);\n```",
      "itemtype": "method",
      "name": "cancel",
      "static": 1,
      "params": [
        {
          "name": "timer",
          "description": "Timer object to cancel",
          "type": "Object"
        }
      ],
      "return": {
        "description": "true if canceled or false/undefined if it wasn't found",
        "type": "Boolean"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 621,
      "description": "Delay calling the target method until the debounce period has elapsed\nwith no additional debounce calls. If `debounce` is called again before\nthe specified time has elapsed, the timer is reset and the entire period\nmust pass again before the target method is called.\n\nThis method should be used when an event may be called multiple times\nbut the action should only be called once when the event is done firing.\nA common example is for scroll events where you only want updates to\nhappen once scrolling has ceased.\n\n```javascript\nimport { debounce } from '@ember/runloop';\n\nfunction whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nlet myContext = { name: 'debounce' };\n\ndebounce(myContext, whoRan, 150);\n\n// less than 150ms passes\ndebounce(myContext, whoRan, 150);\n\n// 150ms passes\n// whoRan is invoked with context myContext\n// console logs 'debounce ran.' one time.\n```\n\nImmediate allows you to run the function immediately, but debounce\nother calls for this function until the wait time has elapsed. If\n`debounce` is called again before the specified time has elapsed,\nthe timer is reset and the entire period must pass again before\nthe method can be called again.\n\n```javascript\nimport { debounce } from '@ember/runloop';\n\nfunction whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nlet myContext = { name: 'debounce' };\n\ndebounce(myContext, whoRan, 150, true);\n\n// console logs 'debounce ran.' one time immediately.\n// 100ms passes\ndebounce(myContext, whoRan, 150, true);\n\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\ndebounce(myContext, whoRan, 150, true);\n\n// console logs 'debounce ran.' one time immediately.\n// 150ms passes and nothing else is logged to the console and\n// the debouncee is no longer being watched\n```",
      "itemtype": "method",
      "name": "debounce",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to invoke",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Optional arguments to pass to the timeout.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "wait",
          "description": "Number of milliseconds to wait.",
          "type": "Number"
        },
        {
          "name": "immediate",
          "description": "Trigger the function on the leading instead\n  of the trailing edge of the wait interval. Defaults to false.",
          "type": "Boolean"
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/runloop/index.js",
      "line": 699,
      "description": "Ensure that the target method is never called more frequently than\nthe specified spacing period. The target method is called immediately.\n\n```javascript\nimport { throttle } from '@ember/runloop';\n\nfunction whoRan() {\n  console.log(this.name + ' ran.');\n}\n\nlet myContext = { name: 'throttle' };\n\nthrottle(myContext, whoRan, 150);\n// whoRan is invoked with context myContext\n// console logs 'throttle ran.'\n\n// 50ms passes\nthrottle(myContext, whoRan, 150);\n\n// 50ms passes\nthrottle(myContext, whoRan, 150);\n\n// 150ms passes\nthrottle(myContext, whoRan, 150);\n// whoRan is invoked with context myContext\n// console logs 'throttle ran.'\n```",
      "itemtype": "method",
      "name": "throttle",
      "static": 1,
      "params": [
        {
          "name": "target",
          "description": "target of method to invoke",
          "type": "Object",
          "optional": true
        },
        {
          "name": "method",
          "description": "The method to invoke.\n  May be a function or a string. If you pass a string\n  then it will be looked up on the passed target.",
          "type": "Function|String"
        },
        {
          "name": "args*",
          "description": "Optional arguments to pass to the timeout.",
          "type": "Object",
          "optional": true
        },
        {
          "name": "spacing",
          "description": "Number of milliseconds to space out requests.",
          "type": "Number"
        },
        {
          "name": "immediate",
          "description": "Trigger the function on the leading instead\n  of the trailing edge of the wait interval. Defaults to true.",
          "type": "Boolean"
        }
      ],
      "return": {
        "description": "Timer information for use in canceling, see `cancel`.",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/runloop",
      "module": "@ember/runloop"
    },
    {
      "file": "packages/@ember/service/index.js",
      "line": 9,
      "description": "Creates a property that lazily looks up a service in the container. There are\nno restrictions as to what objects a service can be injected into.\n\nExample:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class ApplicationRoute extends Route {\n  @service('auth') authManager;\n\n  model() {\n    return this.authManager.findCurrentUser();\n  }\n}\n```\n\nClassic Class Example:\n\n```app/routes/application.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default Route.extend({\n  authManager: service('auth'),\n\n  model() {\n    return this.get('authManager').findCurrentUser();\n  }\n});\n```\n\nThis example will create an `authManager` property on the application route\nthat looks up the `auth` service in the container, making it easily accessible\nin the `model` hook.",
      "itemtype": "method",
      "name": "inject",
      "static": 1,
      "since": "1.10.0",
      "params": [
        {
          "name": "name",
          "description": "(optional) name of the service to inject, defaults to\n       the property's name",
          "type": "String"
        }
      ],
      "return": {
        "description": "injection decorator instance",
        "type": "ComputedDecorator"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/service",
      "module": "@ember/service"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 87,
      "description": "Formats the passed string, but first looks up the string in the localized\nstrings hash. This is a convenient way to localize text.\n\nNote that it is traditional but not required to prefix localized string\nkeys with an underscore or other character so you can easily identify\nlocalized strings.\n\n```javascript\nimport { loc } from '@ember/string';\n\nEmber.STRINGS = {\n  '_Hello World': 'Bonjour le monde',\n  '_Hello %@ %@': 'Bonjour %@ %@'\n};\n\nloc(\"_Hello World\");  // 'Bonjour le monde';\nloc(\"_Hello %@ %@\", [\"John\", \"Smith\"]);  // \"Bonjour John Smith\";\n```",
      "itemtype": "method",
      "name": "loc",
      "params": [
        {
          "name": "str",
          "description": "The string to format",
          "type": "String"
        },
        {
          "name": "formats",
          "description": "Optional array of parameters to interpolate into string.",
          "type": "Array"
        }
      ],
      "return": {
        "description": "formatted string",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 122,
      "description": "Splits a string into separate units separated by spaces, eliminating any\nempty strings in the process. This is a convenience method for split that\nis mostly useful when applied to the `String.prototype`.\n\n```javascript\nimport { w } from '@ember/string';\n\nw(\"alpha beta gamma\").forEach(function(key) {\n  console.log(key);\n});\n\n// > alpha\n// > beta\n// > gamma\n```",
      "itemtype": "method",
      "name": "w",
      "params": [
        {
          "name": "str",
          "description": "The string to split",
          "type": "String"
        }
      ],
      "return": {
        "description": "array containing the split strings",
        "type": "Array"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 148,
      "description": "Converts a camelized string into all lower case separated by underscores.\n\n```javascript\nimport { decamelize } from '@ember/string';\n\ndecamelize('innerHTML');          // 'inner_html'\ndecamelize('action_name');        // 'action_name'\ndecamelize('css-class-name');     // 'css-class-name'\ndecamelize('my favorite items');  // 'my favorite items'\n```",
      "itemtype": "method",
      "name": "decamelize",
      "params": [
        {
          "name": "str",
          "description": "The string to decamelize.",
          "type": "String"
        }
      ],
      "return": {
        "description": "the decamelized string.",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 169,
      "description": "Replaces underscores, spaces, or camelCase with dashes.\n\n```javascript\nimport { dasherize } from '@ember/string';\n\ndasherize('innerHTML');                // 'inner-html'\ndasherize('action_name');              // 'action-name'\ndasherize('css-class-name');           // 'css-class-name'\ndasherize('my favorite items');        // 'my-favorite-items'\ndasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'\n```",
      "itemtype": "method",
      "name": "dasherize",
      "params": [
        {
          "name": "str",
          "description": "The string to dasherize.",
          "type": "String"
        }
      ],
      "return": {
        "description": "the dasherized string.",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 191,
      "description": "Returns the lowerCamelCase form of a string.\n\n```javascript\nimport { camelize } from '@ember/string';\n\ncamelize('innerHTML');                   // 'innerHTML'\ncamelize('action_name');                 // 'actionName'\ncamelize('css-class-name');              // 'cssClassName'\ncamelize('my favorite items');           // 'myFavoriteItems'\ncamelize('My Favorite Items');           // 'myFavoriteItems'\ncamelize('private-docs/owner-invoice');  // 'privateDocs/ownerInvoice'\n```",
      "itemtype": "method",
      "name": "camelize",
      "params": [
        {
          "name": "str",
          "description": "The string to camelize.",
          "type": "String"
        }
      ],
      "return": {
        "description": "the camelized string.",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 214,
      "description": "Returns the UpperCamelCase form of a string.\n\n```javascript\nimport { classify } from '@ember/string';\n\nclassify('innerHTML');                   // 'InnerHTML'\nclassify('action_name');                 // 'ActionName'\nclassify('css-class-name');              // 'CssClassName'\nclassify('my favorite items');           // 'MyFavoriteItems'\nclassify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'\n```",
      "itemtype": "method",
      "name": "classify",
      "params": [
        {
          "name": "str",
          "description": "the string to classify",
          "type": "String"
        }
      ],
      "return": {
        "description": "the classified string",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 236,
      "description": "More general than decamelize. Returns the lower\\_case\\_and\\_underscored\nform of a string.\n\n```javascript\nimport { underscore } from '@ember/string';\n\nunderscore('innerHTML');                 // 'inner_html'\nunderscore('action_name');               // 'action_name'\nunderscore('css-class-name');            // 'css_class_name'\nunderscore('my favorite items');         // 'my_favorite_items'\nunderscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'\n```",
      "itemtype": "method",
      "name": "underscore",
      "params": [
        {
          "name": "str",
          "description": "The string to underscore.",
          "type": "String"
        }
      ],
      "return": {
        "description": "the underscored string.",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 259,
      "description": "Returns the Capitalized form of a string\n\n```javascript\nimport { capitalize } from '@ember/string';\n\ncapitalize('innerHTML')                 // 'InnerHTML'\ncapitalize('action_name')               // 'Action_name'\ncapitalize('css-class-name')            // 'Css-class-name'\ncapitalize('my favorite items')         // 'My favorite items'\ncapitalize('privateDocs/ownerInvoice'); // 'PrivateDocs/ownerInvoice'\n```",
      "itemtype": "method",
      "name": "capitalize",
      "params": [
        {
          "name": "str",
          "description": "The string to capitalize.",
          "type": "String"
        }
      ],
      "return": {
        "description": "The capitalized string.",
        "type": "String"
      },
      "access": "public",
      "tagname": "",
      "class": "String",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 283,
      "description": "See [String.w](/ember/release/classes/String/methods/w?anchor=w).",
      "itemtype": "method",
      "name": "w",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 300,
      "description": "See [String.loc](/ember/release/classes/String/methods/loc?anchor=loc).",
      "itemtype": "method",
      "name": "loc",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 317,
      "description": "See [String.camelize](/ember/release/classes/String/methods/camelize?anchor=camelize).",
      "itemtype": "method",
      "name": "camelize",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 334,
      "description": "See [String.decamelize](/ember/release/classes/String/methods/decamelize?anchor=decamelize).",
      "itemtype": "method",
      "name": "decamelize",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 351,
      "description": "See [String.dasherize](/ember/release/classes/String/methods/dasherize?anchor=dasherize).",
      "itemtype": "method",
      "name": "dasherize",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 368,
      "description": "See [String.underscore](/ember/release/classes/String/methods/underscore?anchor=underscore).",
      "itemtype": "method",
      "name": "underscore",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 385,
      "description": "See [String.classify](/ember/release/classes/String/methods/classify?anchor=classify).",
      "itemtype": "method",
      "name": "classify",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/@ember/string/index.ts",
      "line": 402,
      "description": "See [String.capitalize](/ember/release/classes/String/methods/capitalize?anchor=capitalize).",
      "itemtype": "method",
      "name": "capitalize",
      "static": 1,
      "access": "private",
      "tagname": "",
      "class": "@ember/string",
      "module": "@ember/string"
    },
    {
      "file": "packages/ember-testing/lib/adapters/adapter.js",
      "line": 19,
      "description": "This callback will be called whenever an async operation is about to start.\n\nOverride this to call your framework's methods that handle async\noperations.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "asyncStart",
      "class": "TestAdapter",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/adapters/adapter.js",
      "line": 30,
      "description": "This callback will be called whenever an async operation has completed.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "asyncEnd",
      "class": "TestAdapter",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/adapters/adapter.js",
      "line": 38,
      "description": "Override this method with your testing framework's false assertion.\nThis function is called whenever an exception occurs causing the testing\npromise to fail.\n\nQUnit example:\n\n```javascript\n  exception: function(error) {\n    ok(false, error);\n  };\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "exception",
      "params": [
        {
          "name": "error",
          "description": "The exception to be raised.",
          "type": "String"
        }
      ],
      "class": "TestAdapter",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 10,
      "description": "This property contains the testing helpers for the current application. These\nare created once you call `injectTestHelpers` on your `Application`\ninstance. The included helpers are also available on the `window` object by\ndefault, but can be used from this object on the individual application also.",
      "itemtype": "property",
      "name": "testHelpers",
      "type": "{Object}",
      "default": "{}",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 23,
      "description": "This property will contain the original methods that were registered\non the `helperContainer` before `injectTestHelpers` is called.\n\nWhen `removeTestHelpers` is called, these methods are restored to the\n`helperContainer`.",
      "itemtype": "property",
      "name": "originalMethods",
      "type": "{Object}",
      "default": "{}",
      "access": "private",
      "tagname": "",
      "since": "1.3.0",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 38,
      "description": "This property indicates whether or not this application is currently in\ntesting mode. This is set when `setupForTesting` is called on the current\napplication.",
      "itemtype": "property",
      "name": "testing",
      "type": "{Boolean}",
      "default": "false",
      "since": "1.3.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 51,
      "description": "This hook defers the readiness of the application, so that you can start\nthe app when your tests are ready to run. It also sets the router's\nlocation to 'none', so that the window's location will not be modified\n(preventing both accidental leaking of state between tests and interference\nwith your testing framework). `setupForTesting` should only be called after\nsetting a custom `router` class (for example `App.Router = Router.extend(`).\n\nExample:\n\n```\nApp.setupForTesting();\n```",
      "itemtype": "method",
      "name": "setupForTesting",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 78,
      "description": "This will be used as the container to inject the test helpers into. By\ndefault the helpers are injected into `window`.",
      "itemtype": "property",
      "name": "helperContainer",
      "type": "{Object} The object to be used for test helpers.",
      "default": "window",
      "since": "1.2.0",
      "access": "private",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 90,
      "description": "This injects the test helpers into the `helperContainer` object. If an object is provided\nit will be used as the helperContainer. If `helperContainer` is not set it will default\nto `window`. If a function of the same name has already been defined it will be cached\n(so that it can be reset if the helper is removed with `unregisterHelper` or\n`removeTestHelpers`).\n\nAny callbacks registered with `onInjectHelpers` will be called once the\nhelpers have been injected.\n\nExample:\n```\nApp.injectTestHelpers();\n```",
      "itemtype": "method",
      "name": "injectTestHelpers",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/ext/application.js",
      "line": 132,
      "description": "This removes all helpers that have been registered, and resets and functions\nthat were overridden by the helpers.\n\nExample:\n\n```javascript\nApp.removeTestHelpers();\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "removeTestHelpers",
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/helpers/-is-form-control.js",
      "line": 3,
      "access": "private",
      "tagname": "",
      "params": [
        {
          "name": "element",
          "description": "the element to check",
          "type": "Element"
        }
      ],
      "return": {
        "description": "`true` when the element is a form control, `false` otherwise",
        "type": "Boolean"
      },
      "class": "@ember/test",
      "module": "ember",
      "namespace": "Ember.Test"
    },
    {
      "file": "packages/ember-testing/lib/helpers/click.js",
      "line": 6,
      "description": "Clicks an element and triggers any actions triggered by the element's `click`\nevent.\n\nExample:\n\n```javascript\nclick('.some-jQuery-selector').then(function() {\n  // assert something\n});\n```",
      "itemtype": "method",
      "name": "click",
      "params": [
        {
          "name": "selector",
          "description": "jQuery selector for finding element on the DOM",
          "type": "String"
        },
        {
          "name": "context",
          "description": "A DOM Element, Document, or jQuery to use as context",
          "type": "Object"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise<undefined>"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/current_path.js",
      "line": 6,
      "description": "Returns the current path.\n\nExample:\n\n```javascript\nfunction validateURL() {\nequal(currentPath(), 'some.path.index', \"correct path was transitioned into.\");\n}\n\nclick('#some-link-id').then(validateURL);\n```",
      "itemtype": "method",
      "name": "currentPath",
      "return": {
        "description": "The currently active path.",
        "type": "Object"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/current_route_name.js",
      "line": 5,
      "description": "Returns the currently active route name.\n\nExample:\n\n```javascript\nfunction validateRouteName() {\nequal(currentRouteName(), 'some.path', \"correct route was transitioned into.\");\n}\nvisit('/some/path').then(validateRouteName)\n```",
      "itemtype": "method",
      "name": "currentRouteName",
      "return": {
        "description": "The name of the currently active route.",
        "type": "Object"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/current_url.js",
      "line": 6,
      "description": "Returns the current URL.\n\nExample:\n\n```javascript\nfunction validateURL() {\nequal(currentURL(), '/some/path', \"correct URL was transitioned into.\");\n}\n\nclick('#some-link-id').then(validateURL);\n```",
      "itemtype": "method",
      "name": "currentURL",
      "return": {
        "description": "The currently active URL.",
        "type": "Object"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/fill_in.js",
      "line": 7,
      "description": "Fills in an input element with some text.\n\nExample:\n\n```javascript\nfillIn('#email', 'you@example.com').then(function() {\n  // assert something\n});\n```",
      "itemtype": "method",
      "name": "fillIn",
      "params": [
        {
          "name": "selector",
          "description": "jQuery selector finding an input element on the DOM\nto fill text with",
          "type": "String"
        },
        {
          "name": "text",
          "description": "text to place inside the input element",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise<undefined>"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/find.js",
      "line": 8,
      "description": "Finds an element in the context of the app's container element. A simple alias\nfor `app.$(selector)`.\n\nExample:\n\n```javascript\nvar $el = find('.my-selector');\n```\n\nWith the `context` param:\n\n```javascript\nvar $el = find('.my-selector', '.parent-element-class');\n```",
      "itemtype": "method",
      "name": "find",
      "params": [
        {
          "name": "selector",
          "description": "jQuery selector for element lookup",
          "type": "String"
        },
        {
          "name": "context",
          "description": "(optional) jQuery selector that will limit the selector\n                          argument to find only within the context's children",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "DOM element representing the results of the query",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/find_with_assert.js",
      "line": 4,
      "description": "Like `find`, but throws an error if the element selector returns no results.\n\nExample:\n\n```javascript\nvar $el = findWithAssert('.doesnt-exist'); // throws error\n```\n\nWith the `context` param:\n\n```javascript\nvar $el = findWithAssert('.selector-id', '.parent-element-class'); // assert will pass\n```",
      "itemtype": "method",
      "name": "findWithAssert",
      "params": [
        {
          "name": "selector",
          "description": "jQuery selector string for finding an element within\nthe DOM",
          "type": "String"
        },
        {
          "name": "context",
          "description": "(optional) jQuery selector that will limit the\nselector argument to find only within the context's children",
          "type": "String",
          "optional": true
        }
      ],
      "return": {
        "description": "jQuery object representing the results of the query",
        "type": "Object"
      },
      "throws": {
        "description": "throws error if object returned has a length of 0",
        "type": "Error"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/key_event.js",
      "line": 4,
      "description": "Simulates a key event, e.g. `keypress`, `keydown`, `keyup` with the desired keyCode\nExample:\n```javascript\nkeyEvent('.some-jQuery-selector', 'keypress', 13).then(function() {\n // assert something\n});\n```",
      "itemtype": "method",
      "name": "keyEvent",
      "params": [
        {
          "name": "selector",
          "description": "jQuery selector for finding element on the DOM",
          "type": "String"
        },
        {
          "name": "type",
          "description": "the type of key event, e.g. `keypress`, `keydown`, `keyup`",
          "type": "String"
        },
        {
          "name": "keyCode",
          "description": "the keyCode of the simulated key event",
          "type": "Number"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise<undefined>"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/pause_test.js",
      "line": 9,
      "description": "Resumes a test paused by `pauseTest`.",
      "itemtype": "method",
      "name": "resumeTest",
      "return": {
        "description": "",
        "type": "Void"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/pause_test.js",
      "line": 22,
      "description": "Pauses the current test - this is useful for debugging while testing or for test-driving.\nIt allows you to inspect the state of your application at any point.\nExample (The test will pause before clicking the button):\n\n```javascript\nvisit('/')\nreturn pauseTest();\nclick('.btn');\n```\n\nYou may want to turn off the timeout before pausing.\n\nqunit (timeout available to use as of 2.4.0):\n\n```\nvisit('/');\nassert.timeout(0);\nreturn pauseTest();\nclick('.btn');\n```\n\nmocha (timeout happens automatically as of ember-mocha v0.14.0):\n\n```\nvisit('/');\nthis.timeout(0);\nreturn pauseTest();\nclick('.btn');\n```",
      "since": "1.9.0",
      "itemtype": "method",
      "name": "pauseTest",
      "return": {
        "description": "A promise that will never resolve",
        "type": "Object"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/trigger_event.js",
      "line": 5,
      "description": "Triggers the given DOM event on the element identified by the provided selector.\nExample:\n```javascript\ntriggerEvent('#some-elem-id', 'blur');\n```\nThis is actually used internally by the `keyEvent` helper like so:\n```javascript\ntriggerEvent('#some-elem-id', 'keypress', { keyCode: 13 });\n```",
      "itemtype": "method",
      "name": "triggerEvent",
      "params": [
        {
          "name": "selector",
          "description": "jQuery selector for finding element on the DOM",
          "type": "String"
        },
        {
          "name": "context",
          "description": "jQuery selector that will limit the selector\n                         argument to find only within the context's children",
          "type": "String",
          "optional": true
        },
        {
          "name": "type",
          "description": "The event type to be triggered.",
          "type": "String"
        },
        {
          "name": "options",
          "description": "The options to be passed to jQuery.Event.",
          "type": "Object",
          "optional": true
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise<undefined>"
      },
      "since": "1.5.0",
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/visit.js",
      "line": 3,
      "description": "Loads a route, sets up any controllers, and renders any templates associated\nwith the route as though a real user had triggered the route change while\nusing your app.\n\nExample:\n\n```javascript\nvisit('posts/index').then(function() {\n  // assert something\n});\n```",
      "itemtype": "method",
      "name": "visit",
      "params": [
        {
          "name": "url",
          "description": "the name of the route",
          "type": "String"
        }
      ],
      "return": {
        "description": "",
        "type": "RSVP.Promise<undefined>"
      },
      "access": "public",
      "tagname": "",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/helpers/wait.js",
      "line": 9,
      "description": "Causes the run loop to process any pending events. This is used to ensure that\nany async operations from other helpers (or your assertions) have been processed.\n\nThis is most often used as the return value for the helper functions (see 'click',\n'fillIn','visit',etc). However, there is a method to register a test helper which\nutilizes this method without the need to actually call `wait()` in your helpers.\n\nThe `wait` helper is built into `registerAsyncHelper` by default. You will not need\nto `return app.testHelpers.wait();` - the wait behavior is provided for you.\n\nExample:\n\n```javascript\nimport { registerAsyncHelper } from '@ember/test';\n\nregisterAsyncHelper('loginUser', function(app, username, password) {\n  visit('secured/path/here')\n    .fillIn('#username', username)\n    .fillIn('#password', password)\n    .click('.submit');\n});\n```",
      "itemtype": "method",
      "name": "wait",
      "params": [
        {
          "name": "value",
          "description": "The value to be returned.",
          "type": "Object"
        }
      ],
      "return": {
        "description": "Promise that resolves to the passed value.",
        "type": "RSVP.Promise<any>"
      },
      "access": "public",
      "tagname": "",
      "since": "1.0.0",
      "class": "@ember/test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/test/helpers.js",
      "line": 8,
      "description": "`registerHelper` is used to register a test helper that will be injected\nwhen `App.injectTestHelpers` is called.\n\nThe helper method will always be called with the current Application as\nthe first parameter.\n\nFor example:\n\n```javascript\nimport { registerHelper } from '@ember/test';\nimport { run } from '@ember/runloop';\n\nregisterHelper('boot', function(app) {\n  run(app, app.advanceReadiness);\n});\n```\n\nThis helper can later be called without arguments because it will be\ncalled with `app` as the first parameter.\n\n```javascript\nimport Application from '@ember/application';\n\nApp = Application.create();\nApp.injectTestHelpers();\nboot();\n```",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "registerHelper",
      "params": [
        {
          "name": "name",
          "description": "The name of the helper method to add.",
          "type": "String"
        },
        {
          "name": "helperMethod",
          "description": "",
          "type": "Function"
        },
        {
          "name": "options",
          "description": "",
          "type": "Object"
        }
      ],
      "class": "@ember/test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/helpers.js",
      "line": 52,
      "description": "`registerAsyncHelper` is used to register an async test helper that will be injected\nwhen `App.injectTestHelpers` is called.\n\nThe helper method will always be called with the current Application as\nthe first parameter.\n\nFor example:\n\n```javascript\nimport { registerAsyncHelper } from '@ember/test';\nimport { run } from '@ember/runloop';\n\nregisterAsyncHelper('boot', function(app) {\n  run(app, app.advanceReadiness);\n});\n```\n\nThe advantage of an async helper is that it will not run\nuntil the last async helper has completed.  All async helpers\nafter it will wait for it complete before running.\n\n\nFor example:\n\n```javascript\nimport { registerAsyncHelper } from '@ember/test';\n\nregisterAsyncHelper('deletePost', function(app, postId) {\n  click('.delete-' + postId);\n});\n\n// ... in your test\nvisit('/post/2');\ndeletePost(2);\nvisit('/post/3');\ndeletePost(3);\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "registerAsyncHelper",
      "params": [
        {
          "name": "name",
          "description": "The name of the helper method to add.",
          "type": "String"
        },
        {
          "name": "helperMethod",
          "description": "",
          "type": "Function"
        }
      ],
      "since": "1.2.0",
      "class": "@ember/test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/helpers.js",
      "line": 105,
      "description": "Remove a previously added helper method.\n\nExample:\n\n```javascript\nimport { unregisterHelper } from '@ember/test';\n\nunregisterHelper('wait');\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "unregisterHelper",
      "static": 1,
      "params": [
        {
          "name": "name",
          "description": "The helper to remove.",
          "type": "String"
        }
      ],
      "class": "@ember/test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/on_inject_helpers.js",
      "line": 3,
      "description": "Used to register callbacks to be fired whenever `App.injectTestHelpers`\nis called.\n\nThe callback will receive the current application as an argument.\n\nExample:\n\n```javascript\nimport $ from 'jquery';\n\nEmber.Test.onInjectHelpers(function() {\n  $(document).ajaxSend(function() {\n    Test.pendingRequests++;\n  });\n\n  $(document).ajaxComplete(function() {\n    Test.pendingRequests--;\n  });\n});\n```",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "onInjectHelpers",
      "params": [
        {
          "name": "callback",
          "description": "The function to be called.",
          "type": "Function"
        }
      ],
      "class": "Ember.Test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/promise.js",
      "line": 19,
      "description": "This returns a thenable tailored for testing.  It catches failed\n`onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`\ncallback in the last chained then.\n\nThis method should be returned by async helpers such as `wait`.",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "promise",
      "params": [
        {
          "name": "resolver",
          "description": "The function used to resolve the promise.",
          "type": "Function"
        },
        {
          "name": "label",
          "description": "An optional string for identifying the promise.",
          "type": "String"
        }
      ],
      "class": "Ember.Test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/promise.js",
      "line": 37,
      "description": "Replacement for `Ember.RSVP.resolve`\nThe only difference is this uses\nan instance of `Ember.Test.Promise`",
      "access": "public",
      "tagname": "",
      "itemtype": "method",
      "name": "resolve",
      "params": [
        {
          "name": "The",
          "description": "value to resolve",
          "type": "Mixed"
        }
      ],
      "since": "1.2.0",
      "class": "Ember.Test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/waiters.js",
      "line": 7,
      "description": "This allows ember-testing to play nicely with other asynchronous\nevents, such as an application that is waiting for a CSS3\ntransition or an IndexDB transaction. The waiter runs periodically\nafter each async helper (i.e. `click`, `andThen`, `visit`, etc) has executed,\nuntil the returning result is truthy. After the waiters finish, the next async helper\nis executed and the process repeats.\n\nFor example:\n\n```javascript\nimport { registerWaiter } from '@ember/test';\n\nregisterWaiter(function() {\n  return myPendingTransactions() === 0;\n});\n```\nThe `context` argument allows you to optionally specify the `this`\nwith which your callback will be invoked.\n\nFor example:\n\n```javascript\nimport { registerWaiter } from '@ember/test';\n\nregisterWaiter(MyDB, MyDB.hasPendingTransactions);\n```",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "registerWaiter",
      "params": [
        {
          "name": "context",
          "description": "(optional)",
          "type": "Object"
        },
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "since": "1.2.0",
      "class": "@ember/test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/waiters.js",
      "line": 55,
      "description": "`unregisterWaiter` is used to unregister a callback that was\nregistered with `registerWaiter`.",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "unregisterWaiter",
      "params": [
        {
          "name": "context",
          "description": "(optional)",
          "type": "Object"
        },
        {
          "name": "callback",
          "description": "",
          "type": "Function"
        }
      ],
      "since": "1.2.0",
      "class": "@ember/test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/test/waiters.js",
      "line": 83,
      "description": "Iterates through each registered test waiter, and invokes\nits callback. If any waiter returns false, this method will return\ntrue indicating that the waiters have not settled yet.\n\nThis is generally used internally from the acceptance/integration test\ninfrastructure.",
      "access": "public",
      "tagname": "",
      "static": 1,
      "itemtype": "method",
      "name": "checkWaiters",
      "class": "@ember/test",
      "module": "@ember/test"
    },
    {
      "file": "packages/ember-testing/lib/setup_for_testing.js",
      "line": 14,
      "description": "Sets Ember up for testing. This is useful to perform\nbasic setup steps in order to unit test.\n\nUse `App.setupForTesting` to perform integration tests (full\napplication testing).",
      "itemtype": "method",
      "name": "setupForTesting",
      "since": "1.5.0",
      "access": "private",
      "tagname": "",
      "class": "Ember.Test",
      "module": "@ember/test",
      "namespace": "Ember"
    },
    {
      "file": "packages/ember-testing/lib/support.js",
      "line": 12,
      "description": "This method creates a checkbox and triggers the click event to fire the\npassed in handler. It is used to correct for a bug in older versions\nof jQuery (e.g 1.8.3).",
      "access": "private",
      "tagname": "",
      "itemtype": "method",
      "name": "testCheckboxClick",
      "class": "Ember.Test",
      "module": "ember"
    },
    {
      "file": "packages/ember-testing/lib/test.js",
      "line": 24,
      "description": "Hash containing all known test helpers.",
      "itemtype": "property",
      "name": "_helpers",
      "access": "private",
      "tagname": "",
      "since": "1.7.0",
      "class": "Ember.Test",
      "module": "ember",
      "namespace": "Ember"
    },
    {
      "file": "packages/ember-testing/lib/test.js",
      "line": 45,
      "description": "Used to allow ember-testing to communicate with a specific testing\nframework.\n\nYou can manually set it before calling `App.setupForTesting()`.\n\nExample:\n\n```javascript\nEmber.Test.adapter = MyCustomAdapter.create()\n```\n\nIf you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.",
      "access": "public",
      "tagname": "",
      "itemtype": "property",
      "name": "adapter",
      "type": "{Class} The adapter to be used.",
      "default": "Ember.Test.QUnitAdapter",
      "class": "Ember.Test",
      "module": "ember",
      "namespace": "Ember"
    }
  ],
  "warnings": [
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/-internals/container/lib/container.ts:193"
    },
    {
      "message": "unknown tag: decorator",
      "line": " packages/@ember/-internals/metal/lib/tracked.ts:15"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/-internals/routing/lib/system/route-info.ts:84"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/-internals/routing/lib/system/route-info.ts:185"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/-internals/routing/lib/system/route.ts:2496"
    },
    {
      "message": "replacing incorrect tag: function with method",
      "line": " packages/@ember/-internals/utils/lib/spec.ts:1"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/destroyable/index.ts:32"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/destroyable/index.ts:59"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/@ember/destroyable/index.ts:82"
    },
    {
      "message": "replacing incorrect tag: returns with return",
      "line": " packages/ember-testing/lib/helpers/-is-form-control.js:3"
    },
    {
      "message": "Missing item type\nThe CustomComponentManager allows addons to provide custom component\nimplementations that integrate seamlessly into Ember. This is accomplished\nthrough a delegate, registered with the custom component manager, which\nimplements a set of hooks that determine component behavior.\n\nTo create a custom component manager, instantiate a new CustomComponentManager\nclass and pass the delegate as the first argument:\n\n```js\nlet manager = new CustomComponentManager({\n  // ...delegate implementation...\n});\n```\n\n## Delegate Hooks\n\nThroughout the lifecycle of a component, the component manager will invoke\ndelegate hooks that are responsible for surfacing those lifecycle changes to\nthe end developer.\n\n* `create()` - invoked when a new instance of a component should be created\n* `update()` - invoked when the arguments passed to a component change\n* `getContext()` - returns the object that should be",
      "line": " packages/@ember/-internals/glimmer/lib/component-managers/custom.ts:148"
    },
    {
      "message": "Missing item type\nStores internal state about a component instance after it's been created.",
      "line": " packages/@ember/-internals/glimmer/lib/component-managers/custom.ts:282"
    },
    {
      "message": "Missing item type\nThis reference is used to get the `[]` tag of iterables, so we can trigger\nupdates to `{{each}}` when it changes. It is put into place by a template\ntransform at build time, similar to the (-each-in) helper",
      "line": " packages/@ember/-internals/glimmer/lib/helpers/-track-array.ts:10"
    },
    {
      "message": "Missing item type\nThe CustomModifierManager allows addons to provide custom modifier\nimplementations that integrate seamlessly into Ember. This is accomplished\nthrough a delegate, registered with the custom modifier manager, which\nimplements a set of hooks that determine modifier behavior.\nTo create a custom modifier manager, instantiate a new CustomModifierManager\nclass and pass the delegate as the first argument:\n\n```js\nlet manager = new CustomModifierManager({\n  // ...delegate implementation...\n});\n```\n\n## Delegate Hooks\n\nThroughout the lifecycle of a modifier, the modifier manager will invoke\ndelegate hooks that are responsible for surfacing those lifecycle changes to\nthe end developer.\n* `createModifier()` - invoked when a new instance of a modifier should be created\n* `installModifier()` - invoked when the modifier is installed on the element\n* `updateModifier()` - invoked when the arguments passed to a modifier change\n* `destroyModifier()` - invoked when the modifier is about to be destroyed",
      "line": " packages/@ember/-internals/glimmer/lib/modifiers/custom.ts:89"
    },
    {
      "message": "Missing item type\nNot sure why this is here, we use the owner of the template for lookups.\n\nMaybe this is for the render helper?",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:7"
    },
    {
      "message": "Missing item type\nThe name of the parent outlet state.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:14"
    },
    {
      "message": "Missing item type\nThe name of the route/template",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:24"
    },
    {
      "message": "Missing item type\nThe controller (the self of the outlet component)",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:29"
    },
    {
      "message": "Missing item type\nThe model (the resolved value of the model hook)",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:34"
    },
    {
      "message": "Missing item type\ntemplate (the layout of the outlet component)",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:39"
    },
    {
      "message": "Missing item type\nNested outlet connections.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:50"
    },
    {
      "message": "Missing item type\nRepresents what was rendered into this outlet.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:55"
    },
    {
      "message": "Missing item type\nHas to do with render helper and orphan outlets.\nWhether outlet state was rendered.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:60"
    },
    {
      "message": "Missing item type\nRepresents the root outlet.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:67"
    },
    {
      "message": "Missing item type\nRepresents the connected outlet.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:94"
    },
    {
      "message": "Missing item type\nOutlet state is dirtied from root.\nThis just using the parent tag for dirtiness.",
      "line": " packages/@ember/-internals/glimmer/lib/utils/outlet.ts:118"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/glimmer/lib/views/outlet.ts:87"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/glimmer/lib/views/outlet.ts:95"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/glimmer/lib/resolver.ts:299"
    },
    {
      "message": "Missing item type\npublic componentDefHandleCount = 0;\nCalled while executing Append Op.PushDynamicComponentManager if string",
      "line": " packages/@ember/-internals/glimmer/lib/resolver.ts:301"
    },
    {
      "message": "Missing item type\nCalled by RuntimeConstants to lookup unresolved handles.",
      "line": " packages/@ember/-internals/glimmer/lib/resolver.ts:331"
    },
    {
      "message": "Missing item type\nCalled by CompileTimeLookup compiling Unknown or Helper OpCode",
      "line": " packages/@ember/-internals/glimmer/lib/resolver.ts:339"
    },
    {
      "message": "Missing item type\nCalled by CompileTimeLookup compiling the",
      "line": " packages/@ember/-internals/glimmer/lib/resolver.ts:356"
    },
    {
      "message": "Missing item type\nCalled by CompileTimeLookup to lookup partial",
      "line": " packages/@ember/-internals/glimmer/lib/resolver.ts:363"
    },
    {
      "message": "Missing item type\nFlattening is based on a global revision counter. If the revision has\nbumped it means that somewhere in a class inheritance chain something has\nchanged, so we need to reflatten everything. This can only happen if:\n\n1. A meta has been flattened (listener has been called)\n2. The meta is a prototype meta with children who have inherited its\n   listeners\n3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)\n\nThis is a very rare occurrence, so while the counter is global it shouldn't\nbe updated very often in practice.",
      "line": " packages/@ember/-internals/meta/lib/meta.ts:487"
    },
    {
      "message": "Missing item type\nPrimarily used for cases where we are redefining a class, e.g. mixins/reopen\nbeing applied later. Revalidates all the observers, resetting their tags.",
      "line": " packages/@ember/-internals/metal/lib/observer.ts:154"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/metal/lib/tracked.ts:15"
    },
    {
      "message": "Missing item type\nCalled by the router to instruct the location to do any feature detection\nnecessary. In the case of AutoLocation, we detect whether to use history\nor hash concrete implementations.",
      "line": " packages/@ember/-internals/routing/lib/location/auto_location.ts:73"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/routing/lib/location/auto_location.ts:273"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/routing/lib/location/util.ts:1"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/routing/lib/location/util.ts:16"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/-internals/routing/lib/location/util.ts:25"
    },
    {
      "message": "Missing item type\nReplaces the current location, making sure we explicitly include the origin\nto prevent redirecting to a different origin.",
      "line": " packages/@ember/-internals/routing/lib/location/util.ts:98"
    },
    {
      "message": "Missing item type\nFinds the name of the substate route if it exists for the given route. A\nsubstate route is of the form `route_state`, such as `foo_loading`.",
      "line": " packages/@ember/-internals/routing/lib/system/router.ts:1322"
    },
    {
      "message": "Missing item type\nFinds the name of the state route if it exists for the given route. A state\nroute is of the form `route.state`, such as `foo.loading`. Properly Handles\n`application` named routes.",
      "line": " packages/@ember/-internals/routing/lib/system/router.ts:1341"
    },
    {
      "message": "Missing item type\nDetermines whether or not a route has been defined by checking that the route\nis in the Router's map and the owner has a registration for that route.",
      "line": " packages/@ember/-internals/routing/lib/system/router.ts:1361"
    },
    {
      "message": "Missing item type\nPreviously we used `Ember.$.uuid`, however `$.uuid` has been removed from\njQuery master. We'll just bootstrap our own uuid now.",
      "line": " packages/@ember/-internals/utils/lib/guid.ts:8"
    },
    {
      "message": "Missing item type\nGenerates a universally unique identifier. This method\nis used internally by Ember for assisting with\nthe generation of GUID's and other unique identifiers.",
      "line": " packages/@ember/-internals/utils/lib/guid.ts:17"
    },
    {
      "message": "Missing item type\nStrongly hint runtimes to intern the provided string.\n\nWhen do I need to use this function?\n\nFor the most part, never. Pre-mature optimization is bad, and often the\nruntime does exactly what you need it to, and more often the trade-off isn't\nworth it.\n\nWhy?\n\nRuntimes store strings in at least 2 different representations:\nRopes and Symbols (interned strings). The Rope provides a memory efficient\ndata-structure for strings created from concatenation or some other string\nmanipulation like splitting.\n\nUnfortunately checking equality of different ropes can be quite costly as\nruntimes must resort to clever string comparison algorithms. These\nalgorithms typically cost in proportion to the length of the string.\nLuckily, this is where the Symbols (interned strings) shine. As Symbols are\nunique by their string content, equality checks can be done by pointer\ncomparison.\n\nHow do I know if my string is a rope or symbol?\n\nTypically (warning general sweeping statement, but truthy in runtimes at\npresent) static strings created as part of the JS source are interned.\nStrings often used for comparisons can be interned at runtime if some\ncriteria are met.  One of these criteria can be the size of the entire rope.\nFor example, in chrome 38 a rope longer then 12 characters will not\nintern, nor will segments of that rope.\n\nSome numbers: http://jsperf.com/eval-vs-keys/8\n\nKnown Trick™",
      "line": " packages/@ember/-internals/utils/lib/intern.ts:1"
    },
    {
      "message": "Missing item type\nUnfortunately, a lot of existing code assumes the booting process is\n\"synchronous\". Specifically, a lot of tests assumes the last call to\n`app.advanceReadiness()` or `app.reset()` will result in the app being\nfully-booted when the current runloop completes.\n\nWe would like new code (like the `visit` API) to stop making this assumption,\nso we created the asynchronous version above that returns a promise. But until\nwe have migrated all the code, we would have to expose this method for use\n*internally* in places where we need to boot an app \"synchronously\".",
      "line": " packages/@ember/application/lib/application.js:664"
    },
    {
      "message": "Missing item type\nOverrides the base `EngineInstance._bootSync` method with concerns relevant\nto booting application (instead of engine) instances.\n\nThis method should only contain synchronous boot concerns. Asynchronous\nboot concerns should eventually be moved to the `boot` method, which\nreturns a promise.\n\nUntil all boot code has been made asynchronous, we need to continue to\nexpose this method for use *internally* in places where we need to boot an\ninstance synchronously.",
      "line": " packages/@ember/application/instance.js:84"
    },
    {
      "message": "Missing item type\nThis hook is called by the root-most Route (a.k.a. the ApplicationRoute)\nwhen it has finished creating the root View. By default, we simply take the\nview and append it to the `rootElement` specified on the Application.\n\nIn cases like FastBoot and testing, we can override this hook and implement\ncustom behavior, such as serializing to a string and sending over an HTTP\nsocket rather than appending to DOM.",
      "line": " packages/@ember/application/instance.js:136"
    },
    {
      "message": "Missing item type\nTells the router to start routing. The router will ask the location for the\ncurrent URL of the page to determine the initial URL to start routing to.\nTo start the app at a specific URL, call `handleURL` instead.",
      "line": " packages/@ember/application/instance.js:153"
    },
    {
      "message": "Missing item type\nSets up the router, initializing the child router and configuring the\nlocation before routing begins.\n\nBecause setup should only occur once, multiple calls to `setupRouter`\nbeyond the first call have no effect.\n\nThis is commonly used in order to confirm things that rely on the router\nare functioning properly from tests that are primarily rendering related.\n\nFor example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s\n`setupRenderingTest` calling `this.owner.setupRouter()` would allow that\nrendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered\nhave the correct URL.",
      "line": " packages/@ember/application/instance.js:165"
    },
    {
      "message": "Missing item type\nDirects the router to route to a particular URL. This is useful in tests,\nfor example, to tell the app to start at a particular URL.",
      "line": " packages/@ember/application/instance.js:191"
    },
    {
      "message": "Missing item type",
      "line": " packages/@ember/application/instance.js:203"
    },
    {
      "message": "Missing item type\nReturns the current URL of the app instance. This is useful when your\napp does not update the browsers URL bar (i.e. it uses the `'none'`\nlocation adapter).",
      "line": " packages/@ember/application/instance.js:217"
    },
    {
      "message": "Missing item type\nNavigate the instance to a particular URL. This is useful in tests, for\nexample, or to tell the app to start at a particular URL. This method\nreturns a promise that resolves with the app instance when the transition\nis complete, or rejects if the transion was aborted due to an error.",
      "line": " packages/@ember/application/instance.js:232"
    },
    {
      "message": "Missing item type\nUnfortunately, a lot of existing code assumes booting an instance is\nsynchronous – specifically, a lot of tests assume the last call to\n`app.advanceReadiness()` or `app.reset()` will result in a new instance\nbeing fully-booted when the current runloop completes.\n\nWe would like new code (like the `visit` API) to stop making this\nassumption, so we created the asynchronous version above that returns a\npromise. But until we have migrated all the code, we would have to expose\nthis method for use *internally* in places where we need to boot an instance\nsynchronously.",
      "line": " packages/@ember/engine/instance.js:85"
    },
    {
      "message": "Missing item type",
      "line": " packages/ember-testing/lib/helpers/-is-form-control.js:3"
    }
  ]
}